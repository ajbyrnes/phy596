-- ==============================================================
-- Generated by Vitis HLS v2023.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity fit_interStage2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    x1_dout : IN STD_LOGIC_VECTOR (11 downto 0);
    x1_num_data_valid : IN STD_LOGIC_VECTOR (4 downto 0);
    x1_fifo_cap : IN STD_LOGIC_VECTOR (4 downto 0);
    x1_empty_n : IN STD_LOGIC;
    x1_read : OUT STD_LOGIC;
    y1_dout : IN STD_LOGIC_VECTOR (11 downto 0);
    y1_num_data_valid : IN STD_LOGIC_VECTOR (4 downto 0);
    y1_fifo_cap : IN STD_LOGIC_VECTOR (4 downto 0);
    y1_empty_n : IN STD_LOGIC;
    y1_read : OUT STD_LOGIC;
    sigmaDiv1_dout : IN STD_LOGIC_VECTOR (63 downto 0);
    sigmaDiv1_num_data_valid : IN STD_LOGIC_VECTOR (4 downto 0);
    sigmaDiv1_fifo_cap : IN STD_LOGIC_VECTOR (4 downto 0);
    sigmaDiv1_empty_n : IN STD_LOGIC;
    sigmaDiv1_read : OUT STD_LOGIC;
    SDiv1_dout : IN STD_LOGIC_VECTOR (63 downto 0);
    SDiv1_num_data_valid : IN STD_LOGIC_VECTOR (4 downto 0);
    SDiv1_fifo_cap : IN STD_LOGIC_VECTOR (4 downto 0);
    SDiv1_empty_n : IN STD_LOGIC;
    SDiv1_read : OUT STD_LOGIC;
    SxDivS_dout : IN STD_LOGIC_VECTOR (63 downto 0);
    SxDivS_num_data_valid : IN STD_LOGIC_VECTOR (4 downto 0);
    SxDivS_fifo_cap : IN STD_LOGIC_VECTOR (4 downto 0);
    SxDivS_empty_n : IN STD_LOGIC;
    SxDivS_read : OUT STD_LOGIC;
    SxSquaredDivS_dout : IN STD_LOGIC_VECTOR (63 downto 0);
    SxSquaredDivS_num_data_valid : IN STD_LOGIC_VECTOR (4 downto 0);
    SxSquaredDivS_fifo_cap : IN STD_LOGIC_VECTOR (4 downto 0);
    SxSquaredDivS_empty_n : IN STD_LOGIC;
    SxSquaredDivS_read : OUT STD_LOGIC;
    SyDivS_dout : IN STD_LOGIC_VECTOR (63 downto 0);
    SyDivS_num_data_valid : IN STD_LOGIC_VECTOR (4 downto 0);
    SyDivS_fifo_cap : IN STD_LOGIC_VECTOR (4 downto 0);
    SyDivS_empty_n : IN STD_LOGIC;
    SyDivS_read : OUT STD_LOGIC;
    last2_dout : IN STD_LOGIC_VECTOR (1 downto 0);
    last2_num_data_valid : IN STD_LOGIC_VECTOR (4 downto 0);
    last2_fifo_cap : IN STD_LOGIC_VECTOR (4 downto 0);
    last2_empty_n : IN STD_LOGIC;
    last2_read : OUT STD_LOGIC;
    resultStream_din : OUT STD_LOGIC_VECTOR (331 downto 0);
    resultStream_num_data_valid : IN STD_LOGIC_VECTOR (4 downto 0);
    resultStream_fifo_cap : IN STD_LOGIC_VECTOR (4 downto 0);
    resultStream_full_n : IN STD_LOGIC;
    resultStream_write : OUT STD_LOGIC );
end;


architecture behav of fit_interStage2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (97 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (97 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (97 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (97 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (97 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (97 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (97 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (97 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (97 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (97 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (97 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (97 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (97 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (97 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (97 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (97 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (97 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (97 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (97 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (97 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (97 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (97 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (97 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (97 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (97 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (97 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (97 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (97 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (97 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (97 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (97 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (97 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (97 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (97 downto 0) := "00000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (97 downto 0) := "00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (97 downto 0) := "00000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (97 downto 0) := "00000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (97 downto 0) := "00000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (97 downto 0) := "00000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (97 downto 0) := "00000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (97 downto 0) := "00000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (97 downto 0) := "00000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (97 downto 0) := "00000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (97 downto 0) := "00000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (97 downto 0) := "00000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (97 downto 0) := "00000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (97 downto 0) := "00000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (97 downto 0) := "00000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (97 downto 0) := "00000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (97 downto 0) := "00000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (97 downto 0) := "00000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (97 downto 0) := "00000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (97 downto 0) := "00000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (97 downto 0) := "00000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (97 downto 0) := "00000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (97 downto 0) := "00000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (97 downto 0) := "00000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (97 downto 0) := "00000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (97 downto 0) := "00000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (97 downto 0) := "00000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (97 downto 0) := "00000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (97 downto 0) := "00000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (97 downto 0) := "00000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (97 downto 0) := "00000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (97 downto 0) := "00000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state66 : STD_LOGIC_VECTOR (97 downto 0) := "00000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state67 : STD_LOGIC_VECTOR (97 downto 0) := "00000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state68 : STD_LOGIC_VECTOR (97 downto 0) := "00000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state69 : STD_LOGIC_VECTOR (97 downto 0) := "00000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state70 : STD_LOGIC_VECTOR (97 downto 0) := "00000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state71 : STD_LOGIC_VECTOR (97 downto 0) := "00000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state72 : STD_LOGIC_VECTOR (97 downto 0) := "00000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state73 : STD_LOGIC_VECTOR (97 downto 0) := "00000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state74 : STD_LOGIC_VECTOR (97 downto 0) := "00000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state75 : STD_LOGIC_VECTOR (97 downto 0) := "00000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state76 : STD_LOGIC_VECTOR (97 downto 0) := "00000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state77 : STD_LOGIC_VECTOR (97 downto 0) := "00000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state78 : STD_LOGIC_VECTOR (97 downto 0) := "00000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state79 : STD_LOGIC_VECTOR (97 downto 0) := "00000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state80 : STD_LOGIC_VECTOR (97 downto 0) := "00000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state81 : STD_LOGIC_VECTOR (97 downto 0) := "00000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state82 : STD_LOGIC_VECTOR (97 downto 0) := "00000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state83 : STD_LOGIC_VECTOR (97 downto 0) := "00000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state84 : STD_LOGIC_VECTOR (97 downto 0) := "00000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state85 : STD_LOGIC_VECTOR (97 downto 0) := "00000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state86 : STD_LOGIC_VECTOR (97 downto 0) := "00000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state87 : STD_LOGIC_VECTOR (97 downto 0) := "00000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state88 : STD_LOGIC_VECTOR (97 downto 0) := "00000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state89 : STD_LOGIC_VECTOR (97 downto 0) := "00000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state90 : STD_LOGIC_VECTOR (97 downto 0) := "00000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state91 : STD_LOGIC_VECTOR (97 downto 0) := "00000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state92 : STD_LOGIC_VECTOR (97 downto 0) := "00000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state93 : STD_LOGIC_VECTOR (97 downto 0) := "00000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state94 : STD_LOGIC_VECTOR (97 downto 0) := "00001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state95 : STD_LOGIC_VECTOR (97 downto 0) := "00010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state96 : STD_LOGIC_VECTOR (97 downto 0) := "00100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state97 : STD_LOGIC_VECTOR (97 downto 0) := "01000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state98 : STD_LOGIC_VECTOR (97 downto 0) := "10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_56 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010110";
    constant ap_const_lv32_61 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_57 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010111";
    constant ap_const_lv32_5B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011011";
    constant ap_const_lv32_5C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011100";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv66_10000000000000000 : STD_LOGIC_VECTOR (65 downto 0) := "010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_58 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011000";
    constant ap_const_lv32_59 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011001";
    constant ap_const_lv32_5A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011010";
    constant ap_const_lv32_5D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011101";
    constant ap_const_lv32_5E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011110";

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (97 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal x1_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal y1_blk_n : STD_LOGIC;
    signal sigmaDiv1_blk_n : STD_LOGIC;
    signal SDiv1_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state87 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state87 : signal is "none";
    signal SxDivS_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state98 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state98 : signal is "none";
    signal tmp_reg_448 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln144_reg_493 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_nbreadreq_fu_159_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal SxSquaredDivS_blk_n : STD_LOGIC;
    signal SyDivS_blk_n : STD_LOGIC;
    signal last2_blk_n : STD_LOGIC;
    signal resultStream_blk_n : STD_LOGIC;
    signal grp_nbreadreq_fu_102_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal sigmaDiv1Temp_reg_478 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_state2 : BOOLEAN;
    signal sub_ln140_fu_225_p2 : STD_LOGIC_VECTOR (64 downto 0);
    signal sub_ln140_reg_483 : STD_LOGIC_VECTOR (64 downto 0);
    signal y1_read_reg_488 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln144_fu_231_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln140_2_fu_237_p1 : STD_LOGIC_VECTOR (95 downto 0);
    signal sext_ln140_2_reg_497 : STD_LOGIC_VECTOR (95 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal t_reg_508 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal sext_ln141_fu_263_p1 : STD_LOGIC_VECTOR (95 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal grp_fu_167_p2 : STD_LOGIC_VECTOR (75 downto 0);
    signal mul_ln142_reg_530 : STD_LOGIC_VECTOR (75 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal grp_fu_171_p2 : STD_LOGIC_VECTOR (95 downto 0);
    signal mul_ln141_reg_540 : STD_LOGIC_VECTOR (95 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal Stt_2_reg_545 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal grp_fu_183_p2 : STD_LOGIC_VECTOR (95 downto 0);
    signal mul_ln142_1_reg_551 : STD_LOGIC_VECTOR (95 downto 0);
    signal bSum_2_reg_556 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal grp_fu_327_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal sdiv_ln147_reg_566 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_state87 : BOOLEAN;
    signal SyDivS_read_reg_571 : STD_LOGIC_VECTOR (63 downto 0);
    signal SDiv1_read_reg_576 : STD_LOGIC_VECTOR (63 downto 0);
    signal SxSquaredDivS_read_reg_581 : STD_LOGIC_VECTOR (63 downto 0);
    signal r_sigmaB_fu_342_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal r_sigmaB_reg_586 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state88 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state88 : signal is "none";
    signal sext_ln148_fu_345_p1 : STD_LOGIC_VECTOR (95 downto 0);
    signal sext_ln148_1_fu_349_p1 : STD_LOGIC_VECTOR (95 downto 0);
    signal r_b_reg_611 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state92 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state92 : signal is "none";
    signal grp_fu_175_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal mul_ln150_reg_617 : STD_LOGIC_VECTOR (127 downto 0);
    signal sext_ln149_fu_373_p1 : STD_LOGIC_VECTOR (95 downto 0);
    signal ap_CS_fsm_state93 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state93 : signal is "none";
    signal sext_ln149_1_fu_377_p1 : STD_LOGIC_VECTOR (95 downto 0);
    signal mul_ln149_reg_637 : STD_LOGIC_VECTOR (95 downto 0);
    signal ap_CS_fsm_state97 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state97 : signal is "none";
    signal tmp_2_reg_642 : STD_LOGIC_VECTOR (63 downto 0);
    signal Stt_fu_84 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_predicate_op279_write_state98 : BOOLEAN;
    signal ap_predicate_op284_read_state98 : BOOLEAN;
    signal ap_block_state98 : BOOLEAN;
    signal bSum_fu_88 : STD_LOGIC_VECTOR (63 downto 0);
    signal SxDivSTemp_1_fu_92 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_171_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_171_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_183_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln_fu_209_p3 : STD_LOGIC_VECTOR (43 downto 0);
    signal sext_ln140_1_fu_221_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln140_fu_217_p1 : STD_LOGIC_VECTOR (64 downto 0);
    signal sext_ln140_1_fu_221_p1 : STD_LOGIC_VECTOR (64 downto 0);
    signal grp_fu_179_p2 : STD_LOGIC_VECTOR (95 downto 0);
    signal shl_ln1_fu_275_p3 : STD_LOGIC_VECTOR (95 downto 0);
    signal add_ln141_fu_283_p2 : STD_LOGIC_VECTOR (95 downto 0);
    signal shl_ln2_fu_301_p3 : STD_LOGIC_VECTOR (95 downto 0);
    signal add_ln142_fu_309_p2 : STD_LOGIC_VECTOR (95 downto 0);
    signal sext_ln149_fu_373_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_187_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal shl_ln3_fu_395_p3 : STD_LOGIC_VECTOR (95 downto 0);
    signal sub_ln149_fu_402_p2 : STD_LOGIC_VECTOR (95 downto 0);
    signal tmp_1_fu_407_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_ln152_5_fu_417_p6 : STD_LOGIC_VECTOR (267 downto 0);
    signal grp_fu_327_ce : STD_LOGIC;
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_CS_fsm_state89 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state89 : signal is "none";
    signal ap_CS_fsm_state90 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state90 : signal is "none";
    signal ap_CS_fsm_state91 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state91 : signal is "none";
    signal ap_CS_fsm_state94 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state94 : signal is "none";
    signal ap_CS_fsm_state95 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state95 : signal is "none";
    signal ap_CS_fsm_state96 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state96 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (97 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ST_fsm_state14_blk : STD_LOGIC;
    signal ap_ST_fsm_state15_blk : STD_LOGIC;
    signal ap_ST_fsm_state16_blk : STD_LOGIC;
    signal ap_ST_fsm_state17_blk : STD_LOGIC;
    signal ap_ST_fsm_state18_blk : STD_LOGIC;
    signal ap_ST_fsm_state19_blk : STD_LOGIC;
    signal ap_ST_fsm_state20_blk : STD_LOGIC;
    signal ap_ST_fsm_state21_blk : STD_LOGIC;
    signal ap_ST_fsm_state22_blk : STD_LOGIC;
    signal ap_ST_fsm_state23_blk : STD_LOGIC;
    signal ap_ST_fsm_state24_blk : STD_LOGIC;
    signal ap_ST_fsm_state25_blk : STD_LOGIC;
    signal ap_ST_fsm_state26_blk : STD_LOGIC;
    signal ap_ST_fsm_state27_blk : STD_LOGIC;
    signal ap_ST_fsm_state28_blk : STD_LOGIC;
    signal ap_ST_fsm_state29_blk : STD_LOGIC;
    signal ap_ST_fsm_state30_blk : STD_LOGIC;
    signal ap_ST_fsm_state31_blk : STD_LOGIC;
    signal ap_ST_fsm_state32_blk : STD_LOGIC;
    signal ap_ST_fsm_state33_blk : STD_LOGIC;
    signal ap_ST_fsm_state34_blk : STD_LOGIC;
    signal ap_ST_fsm_state35_blk : STD_LOGIC;
    signal ap_ST_fsm_state36_blk : STD_LOGIC;
    signal ap_ST_fsm_state37_blk : STD_LOGIC;
    signal ap_ST_fsm_state38_blk : STD_LOGIC;
    signal ap_ST_fsm_state39_blk : STD_LOGIC;
    signal ap_ST_fsm_state40_blk : STD_LOGIC;
    signal ap_ST_fsm_state41_blk : STD_LOGIC;
    signal ap_ST_fsm_state42_blk : STD_LOGIC;
    signal ap_ST_fsm_state43_blk : STD_LOGIC;
    signal ap_ST_fsm_state44_blk : STD_LOGIC;
    signal ap_ST_fsm_state45_blk : STD_LOGIC;
    signal ap_ST_fsm_state46_blk : STD_LOGIC;
    signal ap_ST_fsm_state47_blk : STD_LOGIC;
    signal ap_ST_fsm_state48_blk : STD_LOGIC;
    signal ap_ST_fsm_state49_blk : STD_LOGIC;
    signal ap_ST_fsm_state50_blk : STD_LOGIC;
    signal ap_ST_fsm_state51_blk : STD_LOGIC;
    signal ap_ST_fsm_state52_blk : STD_LOGIC;
    signal ap_ST_fsm_state53_blk : STD_LOGIC;
    signal ap_ST_fsm_state54_blk : STD_LOGIC;
    signal ap_ST_fsm_state55_blk : STD_LOGIC;
    signal ap_ST_fsm_state56_blk : STD_LOGIC;
    signal ap_ST_fsm_state57_blk : STD_LOGIC;
    signal ap_ST_fsm_state58_blk : STD_LOGIC;
    signal ap_ST_fsm_state59_blk : STD_LOGIC;
    signal ap_ST_fsm_state60_blk : STD_LOGIC;
    signal ap_ST_fsm_state61_blk : STD_LOGIC;
    signal ap_ST_fsm_state62_blk : STD_LOGIC;
    signal ap_ST_fsm_state63_blk : STD_LOGIC;
    signal ap_ST_fsm_state64_blk : STD_LOGIC;
    signal ap_ST_fsm_state65_blk : STD_LOGIC;
    signal ap_ST_fsm_state66_blk : STD_LOGIC;
    signal ap_ST_fsm_state67_blk : STD_LOGIC;
    signal ap_ST_fsm_state68_blk : STD_LOGIC;
    signal ap_ST_fsm_state69_blk : STD_LOGIC;
    signal ap_ST_fsm_state70_blk : STD_LOGIC;
    signal ap_ST_fsm_state71_blk : STD_LOGIC;
    signal ap_ST_fsm_state72_blk : STD_LOGIC;
    signal ap_ST_fsm_state73_blk : STD_LOGIC;
    signal ap_ST_fsm_state74_blk : STD_LOGIC;
    signal ap_ST_fsm_state75_blk : STD_LOGIC;
    signal ap_ST_fsm_state76_blk : STD_LOGIC;
    signal ap_ST_fsm_state77_blk : STD_LOGIC;
    signal ap_ST_fsm_state78_blk : STD_LOGIC;
    signal ap_ST_fsm_state79_blk : STD_LOGIC;
    signal ap_ST_fsm_state80_blk : STD_LOGIC;
    signal ap_ST_fsm_state81_blk : STD_LOGIC;
    signal ap_ST_fsm_state82_blk : STD_LOGIC;
    signal ap_ST_fsm_state83_blk : STD_LOGIC;
    signal ap_ST_fsm_state84_blk : STD_LOGIC;
    signal ap_ST_fsm_state85_blk : STD_LOGIC;
    signal ap_ST_fsm_state86_blk : STD_LOGIC;
    signal ap_ST_fsm_state87_blk : STD_LOGIC;
    signal ap_ST_fsm_state88_blk : STD_LOGIC;
    signal ap_ST_fsm_state89_blk : STD_LOGIC;
    signal ap_ST_fsm_state90_blk : STD_LOGIC;
    signal ap_ST_fsm_state91_blk : STD_LOGIC;
    signal ap_ST_fsm_state92_blk : STD_LOGIC;
    signal ap_ST_fsm_state93_blk : STD_LOGIC;
    signal ap_ST_fsm_state94_blk : STD_LOGIC;
    signal ap_ST_fsm_state95_blk : STD_LOGIC;
    signal ap_ST_fsm_state96_blk : STD_LOGIC;
    signal ap_ST_fsm_state97_blk : STD_LOGIC;
    signal ap_ST_fsm_state98_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component fit_mul_64s_12s_76_5_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (75 downto 0) );
    end component;


    component fit_mul_64s_64s_96_5_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (95 downto 0) );
    end component;


    component fit_mul_64s_64s_128_5_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (127 downto 0) );
    end component;


    component fit_mul_65s_64s_96_5_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (64 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (95 downto 0) );
    end component;


    component fit_mul_76s_64s_96_5_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (75 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (95 downto 0) );
    end component;


    component fit_mul_128s_64s_128_5_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (127 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (127 downto 0) );
    end component;


    component fit_sdiv_66ns_64s_64_70_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (65 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;



begin
    mul_64s_12s_76_5_1_U37 : component fit_mul_64s_12s_76_5_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 12,
        dout_WIDTH => 76)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => t_reg_508,
        din1 => y1_read_reg_488,
        ce => ap_const_logic_1,
        dout => grp_fu_167_p2);

    mul_64s_64s_96_5_1_U38 : component fit_mul_64s_64s_96_5_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 96)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_171_p0,
        din1 => grp_fu_171_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_171_p2);

    mul_64s_64s_128_5_1_U39 : component fit_mul_64s_64s_128_5_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 128)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => SDiv1_read_reg_576,
        din1 => r_sigmaB_fu_342_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_175_p2);

    mul_65s_64s_96_5_1_U40 : component fit_mul_65s_64s_96_5_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 65,
        din1_WIDTH => 64,
        dout_WIDTH => 96)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => sub_ln140_reg_483,
        din1 => sigmaDiv1Temp_reg_478,
        ce => ap_const_logic_1,
        dout => grp_fu_179_p2);

    mul_76s_64s_96_5_1_U41 : component fit_mul_76s_64s_96_5_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 76,
        din1_WIDTH => 64,
        dout_WIDTH => 96)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => mul_ln142_reg_530,
        din1 => grp_fu_183_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_183_p2);

    mul_128s_64s_128_5_1_U42 : component fit_mul_128s_64s_128_5_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 128,
        din1_WIDTH => 64,
        dout_WIDTH => 128)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => mul_ln150_reg_617,
        din1 => SxSquaredDivS_read_reg_581,
        ce => ap_const_logic_1,
        dout => grp_fu_187_p2);

    sdiv_66ns_64s_64_70_1_U43 : component fit_sdiv_66ns_64s_64_70_1
    generic map (
        ID => 1,
        NUM_STAGE => 70,
        din0_WIDTH => 66,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => ap_const_lv66_10000000000000000,
        din1 => Stt_2_reg_545,
        ce => grp_fu_327_ce,
        dout => grp_fu_327_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((not((((ap_predicate_op284_read_state98 = ap_const_boolean_1) and (ap_const_logic_0 = SxDivS_empty_n)) or ((ap_predicate_op279_write_state98 = ap_const_boolean_1) and (resultStream_full_n = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state98) and ((grp_nbreadreq_fu_102_p3 = ap_const_lv1_0) or (tmp_reg_448 = ap_const_lv1_0)))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    Stt_fu_84_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln144_reg_493 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state18))) then 
                Stt_fu_84 <= Stt_2_reg_545;
            elsif (((not((((ap_predicate_op284_read_state98 = ap_const_boolean_1) and (ap_const_logic_0 = SxDivS_empty_n)) or ((ap_predicate_op279_write_state98 = ap_const_boolean_1) and (resultStream_full_n = ap_const_logic_0)))) and (icmp_ln144_reg_493 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state98) and (tmp_reg_448 = ap_const_lv1_1)) or (not(((ap_const_logic_0 = SxDivS_empty_n) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (grp_nbreadreq_fu_102_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
                Stt_fu_84 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    bSum_fu_88_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln144_reg_493 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state18))) then 
                bSum_fu_88 <= add_ln142_fu_309_p2(95 downto 32);
            elsif (((not((((ap_predicate_op284_read_state98 = ap_const_boolean_1) and (ap_const_logic_0 = SxDivS_empty_n)) or ((ap_predicate_op279_write_state98 = ap_const_boolean_1) and (resultStream_full_n = ap_const_logic_0)))) and (icmp_ln144_reg_493 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state98) and (tmp_reg_448 = ap_const_lv1_1)) or (not(((ap_const_logic_0 = SxDivS_empty_n) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (grp_nbreadreq_fu_102_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
                bSum_fu_88 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_const_logic_0 = SyDivS_empty_n) or (ap_const_logic_0 = SxSquaredDivS_empty_n) or (ap_const_logic_0 = SDiv1_empty_n))) and (ap_const_logic_1 = ap_CS_fsm_state87))) then
                SDiv1_read_reg_576 <= SDiv1_dout;
                SxSquaredDivS_read_reg_581 <= SxSquaredDivS_dout;
                SyDivS_read_reg_571 <= SyDivS_dout;
                sdiv_ln147_reg_566 <= grp_fu_327_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then
                Stt_2_reg_545 <= add_ln141_fu_283_p2(95 downto 32);
                mul_ln142_1_reg_551 <= grp_fu_183_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not((((ap_predicate_op284_read_state98 = ap_const_boolean_1) and (ap_const_logic_0 = SxDivS_empty_n)) or ((ap_predicate_op279_write_state98 = ap_const_boolean_1) and (resultStream_full_n = ap_const_logic_0)))) and (tmp_9_nbreadreq_fu_159_p3 = ap_const_lv1_1) and (icmp_ln144_reg_493 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state98) and (tmp_reg_448 = ap_const_lv1_1)) or (not(((ap_const_logic_0 = SxDivS_empty_n) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (grp_nbreadreq_fu_102_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then
                SxDivSTemp_1_fu_92 <= SxDivS_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then
                bSum_2_reg_556 <= add_ln142_fu_309_p2(95 downto 32);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((last2_empty_n = ap_const_logic_0) or (sigmaDiv1_empty_n = ap_const_logic_0) or (y1_empty_n = ap_const_logic_0) or (x1_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                icmp_ln144_reg_493 <= icmp_ln144_fu_231_p2;
                sigmaDiv1Temp_reg_478 <= sigmaDiv1_dout;
                sub_ln140_reg_483 <= sub_ln140_fu_225_p2;
                y1_read_reg_488 <= y1_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                mul_ln141_reg_540 <= grp_fu_171_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                mul_ln142_reg_530 <= grp_fu_167_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state97)) then
                mul_ln149_reg_637 <= grp_fu_171_p2;
                tmp_2_reg_642 <= grp_fu_187_p2(127 downto 64);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state92)) then
                mul_ln150_reg_617 <= grp_fu_175_p2;
                r_b_reg_611 <= grp_fu_171_p2(95 downto 32);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state88)) then
                r_sigmaB_reg_586 <= r_sigmaB_fu_342_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                sext_ln140_2_reg_497 <= sext_ln140_2_fu_237_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                t_reg_508 <= grp_fu_179_p2(95 downto 32);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_const_logic_0 = SxDivS_empty_n) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                tmp_reg_448 <= grp_nbreadreq_fu_102_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, x1_empty_n, y1_empty_n, sigmaDiv1_empty_n, SDiv1_empty_n, SxDivS_empty_n, SxSquaredDivS_empty_n, SyDivS_empty_n, last2_empty_n, resultStream_full_n, ap_CS_fsm_state2, ap_CS_fsm_state87, ap_CS_fsm_state98, tmp_reg_448, icmp_ln144_reg_493, grp_nbreadreq_fu_102_p3, ap_CS_fsm_state18, ap_predicate_op279_write_state98, ap_predicate_op284_read_state98)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_const_logic_0 = SxDivS_empty_n) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (grp_nbreadreq_fu_102_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                elsif ((not(((ap_const_logic_0 = SxDivS_empty_n) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (grp_nbreadreq_fu_102_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state98;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if ((not(((last2_empty_n = ap_const_logic_0) or (sigmaDiv1_empty_n = ap_const_logic_0) or (y1_empty_n = ap_const_logic_0) or (x1_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                if (((icmp_ln144_reg_493 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state18))) then
                    ap_NS_fsm <= ap_ST_fsm_state98;
                else
                    ap_NS_fsm <= ap_ST_fsm_state19;
                end if;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state57;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when ap_ST_fsm_state58 => 
                ap_NS_fsm <= ap_ST_fsm_state59;
            when ap_ST_fsm_state59 => 
                ap_NS_fsm <= ap_ST_fsm_state60;
            when ap_ST_fsm_state60 => 
                ap_NS_fsm <= ap_ST_fsm_state61;
            when ap_ST_fsm_state61 => 
                ap_NS_fsm <= ap_ST_fsm_state62;
            when ap_ST_fsm_state62 => 
                ap_NS_fsm <= ap_ST_fsm_state63;
            when ap_ST_fsm_state63 => 
                ap_NS_fsm <= ap_ST_fsm_state64;
            when ap_ST_fsm_state64 => 
                ap_NS_fsm <= ap_ST_fsm_state65;
            when ap_ST_fsm_state65 => 
                ap_NS_fsm <= ap_ST_fsm_state66;
            when ap_ST_fsm_state66 => 
                ap_NS_fsm <= ap_ST_fsm_state67;
            when ap_ST_fsm_state67 => 
                ap_NS_fsm <= ap_ST_fsm_state68;
            when ap_ST_fsm_state68 => 
                ap_NS_fsm <= ap_ST_fsm_state69;
            when ap_ST_fsm_state69 => 
                ap_NS_fsm <= ap_ST_fsm_state70;
            when ap_ST_fsm_state70 => 
                ap_NS_fsm <= ap_ST_fsm_state71;
            when ap_ST_fsm_state71 => 
                ap_NS_fsm <= ap_ST_fsm_state72;
            when ap_ST_fsm_state72 => 
                ap_NS_fsm <= ap_ST_fsm_state73;
            when ap_ST_fsm_state73 => 
                ap_NS_fsm <= ap_ST_fsm_state74;
            when ap_ST_fsm_state74 => 
                ap_NS_fsm <= ap_ST_fsm_state75;
            when ap_ST_fsm_state75 => 
                ap_NS_fsm <= ap_ST_fsm_state76;
            when ap_ST_fsm_state76 => 
                ap_NS_fsm <= ap_ST_fsm_state77;
            when ap_ST_fsm_state77 => 
                ap_NS_fsm <= ap_ST_fsm_state78;
            when ap_ST_fsm_state78 => 
                ap_NS_fsm <= ap_ST_fsm_state79;
            when ap_ST_fsm_state79 => 
                ap_NS_fsm <= ap_ST_fsm_state80;
            when ap_ST_fsm_state80 => 
                ap_NS_fsm <= ap_ST_fsm_state81;
            when ap_ST_fsm_state81 => 
                ap_NS_fsm <= ap_ST_fsm_state82;
            when ap_ST_fsm_state82 => 
                ap_NS_fsm <= ap_ST_fsm_state83;
            when ap_ST_fsm_state83 => 
                ap_NS_fsm <= ap_ST_fsm_state84;
            when ap_ST_fsm_state84 => 
                ap_NS_fsm <= ap_ST_fsm_state85;
            when ap_ST_fsm_state85 => 
                ap_NS_fsm <= ap_ST_fsm_state86;
            when ap_ST_fsm_state86 => 
                ap_NS_fsm <= ap_ST_fsm_state87;
            when ap_ST_fsm_state87 => 
                if ((not(((ap_const_logic_0 = SyDivS_empty_n) or (ap_const_logic_0 = SxSquaredDivS_empty_n) or (ap_const_logic_0 = SDiv1_empty_n))) and (ap_const_logic_1 = ap_CS_fsm_state87))) then
                    ap_NS_fsm <= ap_ST_fsm_state88;
                else
                    ap_NS_fsm <= ap_ST_fsm_state87;
                end if;
            when ap_ST_fsm_state88 => 
                ap_NS_fsm <= ap_ST_fsm_state89;
            when ap_ST_fsm_state89 => 
                ap_NS_fsm <= ap_ST_fsm_state90;
            when ap_ST_fsm_state90 => 
                ap_NS_fsm <= ap_ST_fsm_state91;
            when ap_ST_fsm_state91 => 
                ap_NS_fsm <= ap_ST_fsm_state92;
            when ap_ST_fsm_state92 => 
                ap_NS_fsm <= ap_ST_fsm_state93;
            when ap_ST_fsm_state93 => 
                ap_NS_fsm <= ap_ST_fsm_state94;
            when ap_ST_fsm_state94 => 
                ap_NS_fsm <= ap_ST_fsm_state95;
            when ap_ST_fsm_state95 => 
                ap_NS_fsm <= ap_ST_fsm_state96;
            when ap_ST_fsm_state96 => 
                ap_NS_fsm <= ap_ST_fsm_state97;
            when ap_ST_fsm_state97 => 
                ap_NS_fsm <= ap_ST_fsm_state98;
            when ap_ST_fsm_state98 => 
                if ((not((((ap_predicate_op284_read_state98 = ap_const_boolean_1) and (ap_const_logic_0 = SxDivS_empty_n)) or ((ap_predicate_op279_write_state98 = ap_const_boolean_1) and (resultStream_full_n = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state98) and ((grp_nbreadreq_fu_102_p3 = ap_const_lv1_0) or (tmp_reg_448 = ap_const_lv1_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                elsif ((not((((ap_predicate_op284_read_state98 = ap_const_boolean_1) and (ap_const_logic_0 = SxDivS_empty_n)) or ((ap_predicate_op279_write_state98 = ap_const_boolean_1) and (resultStream_full_n = ap_const_logic_0)))) and (grp_nbreadreq_fu_102_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state98) and (tmp_reg_448 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state98;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    SDiv1_blk_n_assign_proc : process(SDiv1_empty_n, ap_CS_fsm_state87)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state87)) then 
            SDiv1_blk_n <= SDiv1_empty_n;
        else 
            SDiv1_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    SDiv1_read_assign_proc : process(SDiv1_empty_n, SxSquaredDivS_empty_n, SyDivS_empty_n, ap_CS_fsm_state87)
    begin
        if ((not(((ap_const_logic_0 = SyDivS_empty_n) or (ap_const_logic_0 = SxSquaredDivS_empty_n) or (ap_const_logic_0 = SDiv1_empty_n))) and (ap_const_logic_1 = ap_CS_fsm_state87))) then 
            SDiv1_read <= ap_const_logic_1;
        else 
            SDiv1_read <= ap_const_logic_0;
        end if; 
    end process;


    SxDivS_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, SxDivS_empty_n, ap_CS_fsm_state98, tmp_reg_448, icmp_ln144_reg_493, tmp_9_nbreadreq_fu_159_p3)
    begin
        if ((((tmp_9_nbreadreq_fu_159_p3 = ap_const_lv1_1) and (icmp_ln144_reg_493 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state98) and (tmp_reg_448 = ap_const_lv1_1)) or (not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            SxDivS_blk_n <= SxDivS_empty_n;
        else 
            SxDivS_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    SxDivS_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, SxDivS_empty_n, resultStream_full_n, ap_CS_fsm_state98, ap_predicate_op279_write_state98, ap_predicate_op284_read_state98)
    begin
        if (((not((((ap_predicate_op284_read_state98 = ap_const_boolean_1) and (ap_const_logic_0 = SxDivS_empty_n)) or ((ap_predicate_op279_write_state98 = ap_const_boolean_1) and (resultStream_full_n = ap_const_logic_0)))) and (ap_predicate_op284_read_state98 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_state98)) or (not(((ap_const_logic_0 = SxDivS_empty_n) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            SxDivS_read <= ap_const_logic_1;
        else 
            SxDivS_read <= ap_const_logic_0;
        end if; 
    end process;


    SxSquaredDivS_blk_n_assign_proc : process(SxSquaredDivS_empty_n, ap_CS_fsm_state87)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state87)) then 
            SxSquaredDivS_blk_n <= SxSquaredDivS_empty_n;
        else 
            SxSquaredDivS_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    SxSquaredDivS_read_assign_proc : process(SDiv1_empty_n, SxSquaredDivS_empty_n, SyDivS_empty_n, ap_CS_fsm_state87)
    begin
        if ((not(((ap_const_logic_0 = SyDivS_empty_n) or (ap_const_logic_0 = SxSquaredDivS_empty_n) or (ap_const_logic_0 = SDiv1_empty_n))) and (ap_const_logic_1 = ap_CS_fsm_state87))) then 
            SxSquaredDivS_read <= ap_const_logic_1;
        else 
            SxSquaredDivS_read <= ap_const_logic_0;
        end if; 
    end process;


    SyDivS_blk_n_assign_proc : process(SyDivS_empty_n, ap_CS_fsm_state87)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state87)) then 
            SyDivS_blk_n <= SyDivS_empty_n;
        else 
            SyDivS_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    SyDivS_read_assign_proc : process(SDiv1_empty_n, SxSquaredDivS_empty_n, SyDivS_empty_n, ap_CS_fsm_state87)
    begin
        if ((not(((ap_const_logic_0 = SyDivS_empty_n) or (ap_const_logic_0 = SxSquaredDivS_empty_n) or (ap_const_logic_0 = SDiv1_empty_n))) and (ap_const_logic_1 = ap_CS_fsm_state87))) then 
            SyDivS_read <= ap_const_logic_1;
        else 
            SyDivS_read <= ap_const_logic_0;
        end if; 
    end process;

    add_ln141_fu_283_p2 <= std_logic_vector(unsigned(mul_ln141_reg_540) + unsigned(shl_ln1_fu_275_p3));
    add_ln142_fu_309_p2 <= std_logic_vector(unsigned(mul_ln142_1_reg_551) + unsigned(shl_ln2_fu_301_p3));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state87 <= ap_CS_fsm(86);
    ap_CS_fsm_state88 <= ap_CS_fsm(87);
    ap_CS_fsm_state89 <= ap_CS_fsm(88);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
    ap_CS_fsm_state90 <= ap_CS_fsm(89);
    ap_CS_fsm_state91 <= ap_CS_fsm(90);
    ap_CS_fsm_state92 <= ap_CS_fsm(91);
    ap_CS_fsm_state93 <= ap_CS_fsm(92);
    ap_CS_fsm_state94 <= ap_CS_fsm(93);
    ap_CS_fsm_state95 <= ap_CS_fsm(94);
    ap_CS_fsm_state96 <= ap_CS_fsm(95);
    ap_CS_fsm_state97 <= ap_CS_fsm(96);
    ap_CS_fsm_state98 <= ap_CS_fsm(97);
    ap_ST_fsm_state10_blk <= ap_const_logic_0;
    ap_ST_fsm_state11_blk <= ap_const_logic_0;
    ap_ST_fsm_state12_blk <= ap_const_logic_0;
    ap_ST_fsm_state13_blk <= ap_const_logic_0;
    ap_ST_fsm_state14_blk <= ap_const_logic_0;
    ap_ST_fsm_state15_blk <= ap_const_logic_0;
    ap_ST_fsm_state16_blk <= ap_const_logic_0;
    ap_ST_fsm_state17_blk <= ap_const_logic_0;
    ap_ST_fsm_state18_blk <= ap_const_logic_0;
    ap_ST_fsm_state19_blk <= ap_const_logic_0;

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start, ap_done_reg, SxDivS_empty_n)
    begin
        if (((ap_const_logic_0 = SxDivS_empty_n) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state20_blk <= ap_const_logic_0;
    ap_ST_fsm_state21_blk <= ap_const_logic_0;
    ap_ST_fsm_state22_blk <= ap_const_logic_0;
    ap_ST_fsm_state23_blk <= ap_const_logic_0;
    ap_ST_fsm_state24_blk <= ap_const_logic_0;
    ap_ST_fsm_state25_blk <= ap_const_logic_0;
    ap_ST_fsm_state26_blk <= ap_const_logic_0;
    ap_ST_fsm_state27_blk <= ap_const_logic_0;
    ap_ST_fsm_state28_blk <= ap_const_logic_0;
    ap_ST_fsm_state29_blk <= ap_const_logic_0;

    ap_ST_fsm_state2_blk_assign_proc : process(x1_empty_n, y1_empty_n, sigmaDiv1_empty_n, last2_empty_n)
    begin
        if (((last2_empty_n = ap_const_logic_0) or (sigmaDiv1_empty_n = ap_const_logic_0) or (y1_empty_n = ap_const_logic_0) or (x1_empty_n = ap_const_logic_0))) then 
            ap_ST_fsm_state2_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state2_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state30_blk <= ap_const_logic_0;
    ap_ST_fsm_state31_blk <= ap_const_logic_0;
    ap_ST_fsm_state32_blk <= ap_const_logic_0;
    ap_ST_fsm_state33_blk <= ap_const_logic_0;
    ap_ST_fsm_state34_blk <= ap_const_logic_0;
    ap_ST_fsm_state35_blk <= ap_const_logic_0;
    ap_ST_fsm_state36_blk <= ap_const_logic_0;
    ap_ST_fsm_state37_blk <= ap_const_logic_0;
    ap_ST_fsm_state38_blk <= ap_const_logic_0;
    ap_ST_fsm_state39_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state40_blk <= ap_const_logic_0;
    ap_ST_fsm_state41_blk <= ap_const_logic_0;
    ap_ST_fsm_state42_blk <= ap_const_logic_0;
    ap_ST_fsm_state43_blk <= ap_const_logic_0;
    ap_ST_fsm_state44_blk <= ap_const_logic_0;
    ap_ST_fsm_state45_blk <= ap_const_logic_0;
    ap_ST_fsm_state46_blk <= ap_const_logic_0;
    ap_ST_fsm_state47_blk <= ap_const_logic_0;
    ap_ST_fsm_state48_blk <= ap_const_logic_0;
    ap_ST_fsm_state49_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state50_blk <= ap_const_logic_0;
    ap_ST_fsm_state51_blk <= ap_const_logic_0;
    ap_ST_fsm_state52_blk <= ap_const_logic_0;
    ap_ST_fsm_state53_blk <= ap_const_logic_0;
    ap_ST_fsm_state54_blk <= ap_const_logic_0;
    ap_ST_fsm_state55_blk <= ap_const_logic_0;
    ap_ST_fsm_state56_blk <= ap_const_logic_0;
    ap_ST_fsm_state57_blk <= ap_const_logic_0;
    ap_ST_fsm_state58_blk <= ap_const_logic_0;
    ap_ST_fsm_state59_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state60_blk <= ap_const_logic_0;
    ap_ST_fsm_state61_blk <= ap_const_logic_0;
    ap_ST_fsm_state62_blk <= ap_const_logic_0;
    ap_ST_fsm_state63_blk <= ap_const_logic_0;
    ap_ST_fsm_state64_blk <= ap_const_logic_0;
    ap_ST_fsm_state65_blk <= ap_const_logic_0;
    ap_ST_fsm_state66_blk <= ap_const_logic_0;
    ap_ST_fsm_state67_blk <= ap_const_logic_0;
    ap_ST_fsm_state68_blk <= ap_const_logic_0;
    ap_ST_fsm_state69_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state70_blk <= ap_const_logic_0;
    ap_ST_fsm_state71_blk <= ap_const_logic_0;
    ap_ST_fsm_state72_blk <= ap_const_logic_0;
    ap_ST_fsm_state73_blk <= ap_const_logic_0;
    ap_ST_fsm_state74_blk <= ap_const_logic_0;
    ap_ST_fsm_state75_blk <= ap_const_logic_0;
    ap_ST_fsm_state76_blk <= ap_const_logic_0;
    ap_ST_fsm_state77_blk <= ap_const_logic_0;
    ap_ST_fsm_state78_blk <= ap_const_logic_0;
    ap_ST_fsm_state79_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state80_blk <= ap_const_logic_0;
    ap_ST_fsm_state81_blk <= ap_const_logic_0;
    ap_ST_fsm_state82_blk <= ap_const_logic_0;
    ap_ST_fsm_state83_blk <= ap_const_logic_0;
    ap_ST_fsm_state84_blk <= ap_const_logic_0;
    ap_ST_fsm_state85_blk <= ap_const_logic_0;
    ap_ST_fsm_state86_blk <= ap_const_logic_0;

    ap_ST_fsm_state87_blk_assign_proc : process(SDiv1_empty_n, SxSquaredDivS_empty_n, SyDivS_empty_n)
    begin
        if (((ap_const_logic_0 = SyDivS_empty_n) or (ap_const_logic_0 = SxSquaredDivS_empty_n) or (ap_const_logic_0 = SDiv1_empty_n))) then 
            ap_ST_fsm_state87_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state87_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state88_blk <= ap_const_logic_0;
    ap_ST_fsm_state89_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state90_blk <= ap_const_logic_0;
    ap_ST_fsm_state91_blk <= ap_const_logic_0;
    ap_ST_fsm_state92_blk <= ap_const_logic_0;
    ap_ST_fsm_state93_blk <= ap_const_logic_0;
    ap_ST_fsm_state94_blk <= ap_const_logic_0;
    ap_ST_fsm_state95_blk <= ap_const_logic_0;
    ap_ST_fsm_state96_blk <= ap_const_logic_0;
    ap_ST_fsm_state97_blk <= ap_const_logic_0;

    ap_ST_fsm_state98_blk_assign_proc : process(SxDivS_empty_n, resultStream_full_n, ap_predicate_op279_write_state98, ap_predicate_op284_read_state98)
    begin
        if ((((ap_predicate_op284_read_state98 = ap_const_boolean_1) and (ap_const_logic_0 = SxDivS_empty_n)) or ((ap_predicate_op279_write_state98 = ap_const_boolean_1) and (resultStream_full_n = ap_const_logic_0)))) then 
            ap_ST_fsm_state98_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state98_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, SxDivS_empty_n)
    begin
                ap_block_state1 <= ((ap_const_logic_0 = SxDivS_empty_n) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0));
    end process;


    ap_block_state2_assign_proc : process(x1_empty_n, y1_empty_n, sigmaDiv1_empty_n, last2_empty_n)
    begin
                ap_block_state2 <= ((last2_empty_n = ap_const_logic_0) or (sigmaDiv1_empty_n = ap_const_logic_0) or (y1_empty_n = ap_const_logic_0) or (x1_empty_n = ap_const_logic_0));
    end process;


    ap_block_state87_assign_proc : process(SDiv1_empty_n, SxSquaredDivS_empty_n, SyDivS_empty_n)
    begin
                ap_block_state87 <= ((ap_const_logic_0 = SyDivS_empty_n) or (ap_const_logic_0 = SxSquaredDivS_empty_n) or (ap_const_logic_0 = SDiv1_empty_n));
    end process;


    ap_block_state98_assign_proc : process(SxDivS_empty_n, resultStream_full_n, ap_predicate_op279_write_state98, ap_predicate_op284_read_state98)
    begin
                ap_block_state98 <= (((ap_predicate_op284_read_state98 = ap_const_boolean_1) and (ap_const_logic_0 = SxDivS_empty_n)) or ((ap_predicate_op279_write_state98 = ap_const_boolean_1) and (resultStream_full_n = ap_const_logic_0)));
    end process;


    ap_done_assign_proc : process(ap_done_reg, SxDivS_empty_n, resultStream_full_n, ap_CS_fsm_state98, tmp_reg_448, grp_nbreadreq_fu_102_p3, ap_predicate_op279_write_state98, ap_predicate_op284_read_state98)
    begin
        if ((not((((ap_predicate_op284_read_state98 = ap_const_boolean_1) and (ap_const_logic_0 = SxDivS_empty_n)) or ((ap_predicate_op279_write_state98 = ap_const_boolean_1) and (resultStream_full_n = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state98) and ((grp_nbreadreq_fu_102_p3 = ap_const_lv1_0) or (tmp_reg_448 = ap_const_lv1_0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_predicate_op279_write_state98_assign_proc : process(tmp_reg_448, icmp_ln144_reg_493)
    begin
                ap_predicate_op279_write_state98 <= ((icmp_ln144_reg_493 = ap_const_lv1_0) and (tmp_reg_448 = ap_const_lv1_1));
    end process;


    ap_predicate_op284_read_state98_assign_proc : process(tmp_reg_448, icmp_ln144_reg_493, tmp_9_nbreadreq_fu_159_p3)
    begin
                ap_predicate_op284_read_state98 <= ((tmp_9_nbreadreq_fu_159_p3 = ap_const_lv1_1) and (icmp_ln144_reg_493 = ap_const_lv1_0) and (tmp_reg_448 = ap_const_lv1_1));
    end process;


    ap_ready_assign_proc : process(SxDivS_empty_n, resultStream_full_n, ap_CS_fsm_state98, tmp_reg_448, grp_nbreadreq_fu_102_p3, ap_predicate_op279_write_state98, ap_predicate_op284_read_state98)
    begin
        if ((not((((ap_predicate_op284_read_state98 = ap_const_boolean_1) and (ap_const_logic_0 = SxDivS_empty_n)) or ((ap_predicate_op279_write_state98 = ap_const_boolean_1) and (resultStream_full_n = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state98) and ((grp_nbreadreq_fu_102_p3 = ap_const_lv1_0) or (tmp_reg_448 = ap_const_lv1_0)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_171_p0_assign_proc : process(sext_ln141_fu_263_p1, ap_CS_fsm_state12, ap_CS_fsm_state88, sext_ln148_1_fu_349_p1, ap_CS_fsm_state93, sext_ln149_1_fu_377_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state93)) then 
            grp_fu_171_p0 <= sext_ln149_1_fu_377_p1(64 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state88)) then 
            grp_fu_171_p0 <= sext_ln148_1_fu_349_p1(64 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_fu_171_p0 <= sext_ln141_fu_263_p1(64 - 1 downto 0);
        else 
            grp_fu_171_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_171_p1_assign_proc : process(sext_ln141_fu_263_p1, ap_CS_fsm_state12, ap_CS_fsm_state88, sext_ln148_fu_345_p1, sext_ln149_fu_373_p1, ap_CS_fsm_state93)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state93)) then 
            grp_fu_171_p1 <= sext_ln149_fu_373_p1(64 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state88)) then 
            grp_fu_171_p1 <= sext_ln148_fu_345_p1(64 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_fu_171_p1 <= sext_ln141_fu_263_p1(64 - 1 downto 0);
        else 
            grp_fu_171_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_183_p1 <= sext_ln140_2_reg_497(64 - 1 downto 0);

    grp_fu_327_ce_assign_proc : process(ap_CS_fsm_state1, SDiv1_empty_n, SxSquaredDivS_empty_n, SyDivS_empty_n, ap_CS_fsm_state2, ap_CS_fsm_state87, ap_CS_fsm_state98, ap_CS_fsm_state3, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state88, ap_CS_fsm_state92, ap_CS_fsm_state93, ap_CS_fsm_state97, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state89, ap_CS_fsm_state90, ap_CS_fsm_state91, ap_CS_fsm_state94, ap_CS_fsm_state95, ap_CS_fsm_state96)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state96) or (ap_const_logic_1 = ap_CS_fsm_state95) or (ap_const_logic_1 = ap_CS_fsm_state94) or (ap_const_logic_1 = ap_CS_fsm_state91) or (ap_const_logic_1 = ap_CS_fsm_state90) or (ap_const_logic_1 = ap_CS_fsm_state89) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state97) or (ap_const_logic_1 = ap_CS_fsm_state93) or (ap_const_logic_1 = ap_CS_fsm_state92) or (ap_const_logic_1 = ap_CS_fsm_state88) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state3) 
    or (ap_const_logic_1 = ap_CS_fsm_state98) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state1) or ((ap_const_logic_1 = ap_CS_fsm_state87) and ((ap_const_logic_0 = SyDivS_empty_n) or (ap_const_logic_0 = SxSquaredDivS_empty_n) or (ap_const_logic_0 = SDiv1_empty_n))))) then 
            grp_fu_327_ce <= ap_const_logic_0;
        else 
            grp_fu_327_ce <= ap_const_logic_1;
        end if; 
    end process;

    grp_nbreadreq_fu_102_p3 <= (0=>(last2_empty_n), others=>'-');
    icmp_ln144_fu_231_p2 <= "1" when (last2_dout = ap_const_lv2_0) else "0";

    last2_blk_n_assign_proc : process(last2_empty_n, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            last2_blk_n <= last2_empty_n;
        else 
            last2_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    last2_read_assign_proc : process(x1_empty_n, y1_empty_n, sigmaDiv1_empty_n, last2_empty_n, ap_CS_fsm_state2)
    begin
        if ((not(((last2_empty_n = ap_const_logic_0) or (sigmaDiv1_empty_n = ap_const_logic_0) or (y1_empty_n = ap_const_logic_0) or (x1_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            last2_read <= ap_const_logic_1;
        else 
            last2_read <= ap_const_logic_0;
        end if; 
    end process;

    or_ln152_5_fu_417_p6 <= ((((r_sigmaB_reg_586 & tmp_2_reg_642) & r_b_reg_611) & tmp_1_fu_407_p4) & ap_const_lv12_0);
    r_sigmaB_fu_342_p1 <= sdiv_ln147_reg_566(64 - 1 downto 0);

    resultStream_blk_n_assign_proc : process(resultStream_full_n, ap_CS_fsm_state98, tmp_reg_448, icmp_ln144_reg_493)
    begin
        if (((icmp_ln144_reg_493 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state98) and (tmp_reg_448 = ap_const_lv1_1))) then 
            resultStream_blk_n <= resultStream_full_n;
        else 
            resultStream_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    resultStream_din <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln152_5_fu_417_p6),332));

    resultStream_write_assign_proc : process(SxDivS_empty_n, resultStream_full_n, ap_CS_fsm_state98, ap_predicate_op279_write_state98, ap_predicate_op284_read_state98)
    begin
        if ((not((((ap_predicate_op284_read_state98 = ap_const_boolean_1) and (ap_const_logic_0 = SxDivS_empty_n)) or ((ap_predicate_op279_write_state98 = ap_const_boolean_1) and (resultStream_full_n = ap_const_logic_0)))) and (ap_predicate_op279_write_state98 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_state98))) then 
            resultStream_write <= ap_const_logic_1;
        else 
            resultStream_write <= ap_const_logic_0;
        end if; 
    end process;

    sext_ln140_1_fu_221_p0 <= SxDivSTemp_1_fu_92;
        sext_ln140_1_fu_221_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln140_1_fu_221_p0),65));

        sext_ln140_2_fu_237_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sigmaDiv1Temp_reg_478),96));

        sext_ln140_fu_217_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln_fu_209_p3),65));

        sext_ln141_fu_263_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(t_reg_508),96));

        sext_ln148_1_fu_349_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_sigmaB_fu_342_p1),96));

        sext_ln148_fu_345_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(bSum_2_reg_556),96));

        sext_ln149_1_fu_377_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_b_reg_611),96));

    sext_ln149_fu_373_p0 <= SxDivSTemp_1_fu_92;
        sext_ln149_fu_373_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln149_fu_373_p0),96));

    shl_ln1_fu_275_p3 <= (Stt_fu_84 & ap_const_lv32_0);
    shl_ln2_fu_301_p3 <= (bSum_fu_88 & ap_const_lv32_0);
    shl_ln3_fu_395_p3 <= (SyDivS_read_reg_571 & ap_const_lv32_0);
    shl_ln_fu_209_p3 <= (x1_dout & ap_const_lv32_0);

    sigmaDiv1_blk_n_assign_proc : process(sigmaDiv1_empty_n, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sigmaDiv1_blk_n <= sigmaDiv1_empty_n;
        else 
            sigmaDiv1_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    sigmaDiv1_read_assign_proc : process(x1_empty_n, y1_empty_n, sigmaDiv1_empty_n, last2_empty_n, ap_CS_fsm_state2)
    begin
        if ((not(((last2_empty_n = ap_const_logic_0) or (sigmaDiv1_empty_n = ap_const_logic_0) or (y1_empty_n = ap_const_logic_0) or (x1_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            sigmaDiv1_read <= ap_const_logic_1;
        else 
            sigmaDiv1_read <= ap_const_logic_0;
        end if; 
    end process;

    sub_ln140_fu_225_p2 <= std_logic_vector(signed(sext_ln140_fu_217_p1) - signed(sext_ln140_1_fu_221_p1));
    sub_ln149_fu_402_p2 <= std_logic_vector(unsigned(shl_ln3_fu_395_p3) - unsigned(mul_ln149_reg_637));
    tmp_1_fu_407_p4 <= sub_ln149_fu_402_p2(95 downto 32);
    tmp_9_nbreadreq_fu_159_p3 <= (0=>(SxDivS_empty_n), others=>'-');

    x1_blk_n_assign_proc : process(x1_empty_n, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            x1_blk_n <= x1_empty_n;
        else 
            x1_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    x1_read_assign_proc : process(x1_empty_n, y1_empty_n, sigmaDiv1_empty_n, last2_empty_n, ap_CS_fsm_state2)
    begin
        if ((not(((last2_empty_n = ap_const_logic_0) or (sigmaDiv1_empty_n = ap_const_logic_0) or (y1_empty_n = ap_const_logic_0) or (x1_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            x1_read <= ap_const_logic_1;
        else 
            x1_read <= ap_const_logic_0;
        end if; 
    end process;


    y1_blk_n_assign_proc : process(y1_empty_n, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            y1_blk_n <= y1_empty_n;
        else 
            y1_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    y1_read_assign_proc : process(x1_empty_n, y1_empty_n, sigmaDiv1_empty_n, last2_empty_n, ap_CS_fsm_state2)
    begin
        if ((not(((last2_empty_n = ap_const_logic_0) or (sigmaDiv1_empty_n = ap_const_logic_0) or (y1_empty_n = ap_const_logic_0) or (x1_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            y1_read <= ap_const_logic_1;
        else 
            y1_read <= ap_const_logic_0;
        end if; 
    end process;

end behav;
