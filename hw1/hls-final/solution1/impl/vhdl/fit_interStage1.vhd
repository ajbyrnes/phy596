-- ==============================================================
-- Generated by Vitis HLS v2023.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity fit_interStage1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    partialS_dout : IN STD_LOGIC_VECTOR (63 downto 0);
    partialS_num_data_valid : IN STD_LOGIC_VECTOR (4 downto 0);
    partialS_fifo_cap : IN STD_LOGIC_VECTOR (4 downto 0);
    partialS_empty_n : IN STD_LOGIC;
    partialS_read : OUT STD_LOGIC;
    partialSx_dout : IN STD_LOGIC_VECTOR (63 downto 0);
    partialSx_num_data_valid : IN STD_LOGIC_VECTOR (4 downto 0);
    partialSx_fifo_cap : IN STD_LOGIC_VECTOR (4 downto 0);
    partialSx_empty_n : IN STD_LOGIC;
    partialSx_read : OUT STD_LOGIC;
    partialSy_dout : IN STD_LOGIC_VECTOR (63 downto 0);
    partialSy_num_data_valid : IN STD_LOGIC_VECTOR (4 downto 0);
    partialSy_fifo_cap : IN STD_LOGIC_VECTOR (4 downto 0);
    partialSy_empty_n : IN STD_LOGIC;
    partialSy_read : OUT STD_LOGIC;
    last1_dout : IN STD_LOGIC_VECTOR (1 downto 0);
    last1_num_data_valid : IN STD_LOGIC_VECTOR (4 downto 0);
    last1_fifo_cap : IN STD_LOGIC_VECTOR (4 downto 0);
    last1_empty_n : IN STD_LOGIC;
    last1_read : OUT STD_LOGIC;
    SDiv1_din : OUT STD_LOGIC_VECTOR (63 downto 0);
    SDiv1_num_data_valid : IN STD_LOGIC_VECTOR (4 downto 0);
    SDiv1_fifo_cap : IN STD_LOGIC_VECTOR (4 downto 0);
    SDiv1_full_n : IN STD_LOGIC;
    SDiv1_write : OUT STD_LOGIC;
    SxDivS_din : OUT STD_LOGIC_VECTOR (63 downto 0);
    SxDivS_num_data_valid : IN STD_LOGIC_VECTOR (4 downto 0);
    SxDivS_fifo_cap : IN STD_LOGIC_VECTOR (4 downto 0);
    SxDivS_full_n : IN STD_LOGIC;
    SxDivS_write : OUT STD_LOGIC;
    SxSquaredDivS_din : OUT STD_LOGIC_VECTOR (63 downto 0);
    SxSquaredDivS_num_data_valid : IN STD_LOGIC_VECTOR (4 downto 0);
    SxSquaredDivS_fifo_cap : IN STD_LOGIC_VECTOR (4 downto 0);
    SxSquaredDivS_full_n : IN STD_LOGIC;
    SxSquaredDivS_write : OUT STD_LOGIC;
    SyDivS_din : OUT STD_LOGIC_VECTOR (63 downto 0);
    SyDivS_num_data_valid : IN STD_LOGIC_VECTOR (4 downto 0);
    SyDivS_fifo_cap : IN STD_LOGIC_VECTOR (4 downto 0);
    SyDivS_full_n : IN STD_LOGIC;
    SyDivS_write : OUT STD_LOGIC );
end;


architecture behav of fit_interStage1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state66 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state67 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state68 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state69 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state70 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state71 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state72 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state73 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state74 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state75 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state76 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state77 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state78 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state79 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state80 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state81 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state82 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state83 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state84 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state85 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state86 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state87 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state88 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state89 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state90 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state91 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state92 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state93 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state94 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state95 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state96 : STD_LOGIC_VECTOR (107 downto 0) := "000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state97 : STD_LOGIC_VECTOR (107 downto 0) := "000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state98 : STD_LOGIC_VECTOR (107 downto 0) := "000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state99 : STD_LOGIC_VECTOR (107 downto 0) := "000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state100 : STD_LOGIC_VECTOR (107 downto 0) := "000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state101 : STD_LOGIC_VECTOR (107 downto 0) := "000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state102 : STD_LOGIC_VECTOR (107 downto 0) := "000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state103 : STD_LOGIC_VECTOR (107 downto 0) := "000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state104 : STD_LOGIC_VECTOR (107 downto 0) := "000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state105 : STD_LOGIC_VECTOR (107 downto 0) := "000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state106 : STD_LOGIC_VECTOR (107 downto 0) := "001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state107 : STD_LOGIC_VECTOR (107 downto 0) := "010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state108 : STD_LOGIC_VECTOR (107 downto 0) := "100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_6B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_65 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100101";
    constant ap_const_lv32_66 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100110";
    constant ap_const_lv32_6A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101010";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv66_10000000000000000 : STD_LOGIC_VECTOR (65 downto 0) := "010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (107 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal partialS_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal partialSx_blk_n : STD_LOGIC;
    signal partialSy_blk_n : STD_LOGIC;
    signal last1_blk_n : STD_LOGIC;
    signal SDiv1_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state108 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state108 : signal is "none";
    signal tmp_reg_202 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln103_reg_223 : STD_LOGIC_VECTOR (0 downto 0);
    signal SxDivS_blk_n : STD_LOGIC;
    signal SxSquaredDivS_blk_n : STD_LOGIC;
    signal SyDivS_blk_n : STD_LOGIC;
    signal grp_nbreadreq_fu_64_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal partialS_read_reg_206 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_state2 : BOOLEAN;
    signal partialSx_read_reg_212 : STD_LOGIC_VECTOR (63 downto 0);
    signal partialSy_read_reg_218 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln103_fu_128_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln105_fu_134_p1 : STD_LOGIC_VECTOR (95 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal grp_fu_144_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal sdiv_ln107_reg_248 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state102 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state102 : signal is "none";
    signal grp_fu_157_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal sdiv_ln111_reg_253 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state103 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state103 : signal is "none";
    signal SxDivSTemp_fu_176_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal SxDivSTemp_reg_263 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_166_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal sdiv_ln105_reg_273 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state107 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state107 : signal is "none";
    signal trunc_ln1_reg_278 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_predicate_op413_write_state108 : BOOLEAN;
    signal ap_predicate_op414_write_state108 : BOOLEAN;
    signal ap_predicate_op415_write_state108 : BOOLEAN;
    signal ap_predicate_op417_write_state108 : BOOLEAN;
    signal ap_block_state108 : BOOLEAN;
    signal grp_fu_144_p0 : STD_LOGIC_VECTOR (95 downto 0);
    signal grp_fu_144_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_157_p0 : STD_LOGIC_VECTOR (95 downto 0);
    signal grp_fu_157_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_124_p2 : STD_LOGIC_VECTOR (95 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (107 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ST_fsm_state14_blk : STD_LOGIC;
    signal ap_ST_fsm_state15_blk : STD_LOGIC;
    signal ap_ST_fsm_state16_blk : STD_LOGIC;
    signal ap_ST_fsm_state17_blk : STD_LOGIC;
    signal ap_ST_fsm_state18_blk : STD_LOGIC;
    signal ap_ST_fsm_state19_blk : STD_LOGIC;
    signal ap_ST_fsm_state20_blk : STD_LOGIC;
    signal ap_ST_fsm_state21_blk : STD_LOGIC;
    signal ap_ST_fsm_state22_blk : STD_LOGIC;
    signal ap_ST_fsm_state23_blk : STD_LOGIC;
    signal ap_ST_fsm_state24_blk : STD_LOGIC;
    signal ap_ST_fsm_state25_blk : STD_LOGIC;
    signal ap_ST_fsm_state26_blk : STD_LOGIC;
    signal ap_ST_fsm_state27_blk : STD_LOGIC;
    signal ap_ST_fsm_state28_blk : STD_LOGIC;
    signal ap_ST_fsm_state29_blk : STD_LOGIC;
    signal ap_ST_fsm_state30_blk : STD_LOGIC;
    signal ap_ST_fsm_state31_blk : STD_LOGIC;
    signal ap_ST_fsm_state32_blk : STD_LOGIC;
    signal ap_ST_fsm_state33_blk : STD_LOGIC;
    signal ap_ST_fsm_state34_blk : STD_LOGIC;
    signal ap_ST_fsm_state35_blk : STD_LOGIC;
    signal ap_ST_fsm_state36_blk : STD_LOGIC;
    signal ap_ST_fsm_state37_blk : STD_LOGIC;
    signal ap_ST_fsm_state38_blk : STD_LOGIC;
    signal ap_ST_fsm_state39_blk : STD_LOGIC;
    signal ap_ST_fsm_state40_blk : STD_LOGIC;
    signal ap_ST_fsm_state41_blk : STD_LOGIC;
    signal ap_ST_fsm_state42_blk : STD_LOGIC;
    signal ap_ST_fsm_state43_blk : STD_LOGIC;
    signal ap_ST_fsm_state44_blk : STD_LOGIC;
    signal ap_ST_fsm_state45_blk : STD_LOGIC;
    signal ap_ST_fsm_state46_blk : STD_LOGIC;
    signal ap_ST_fsm_state47_blk : STD_LOGIC;
    signal ap_ST_fsm_state48_blk : STD_LOGIC;
    signal ap_ST_fsm_state49_blk : STD_LOGIC;
    signal ap_ST_fsm_state50_blk : STD_LOGIC;
    signal ap_ST_fsm_state51_blk : STD_LOGIC;
    signal ap_ST_fsm_state52_blk : STD_LOGIC;
    signal ap_ST_fsm_state53_blk : STD_LOGIC;
    signal ap_ST_fsm_state54_blk : STD_LOGIC;
    signal ap_ST_fsm_state55_blk : STD_LOGIC;
    signal ap_ST_fsm_state56_blk : STD_LOGIC;
    signal ap_ST_fsm_state57_blk : STD_LOGIC;
    signal ap_ST_fsm_state58_blk : STD_LOGIC;
    signal ap_ST_fsm_state59_blk : STD_LOGIC;
    signal ap_ST_fsm_state60_blk : STD_LOGIC;
    signal ap_ST_fsm_state61_blk : STD_LOGIC;
    signal ap_ST_fsm_state62_blk : STD_LOGIC;
    signal ap_ST_fsm_state63_blk : STD_LOGIC;
    signal ap_ST_fsm_state64_blk : STD_LOGIC;
    signal ap_ST_fsm_state65_blk : STD_LOGIC;
    signal ap_ST_fsm_state66_blk : STD_LOGIC;
    signal ap_ST_fsm_state67_blk : STD_LOGIC;
    signal ap_ST_fsm_state68_blk : STD_LOGIC;
    signal ap_ST_fsm_state69_blk : STD_LOGIC;
    signal ap_ST_fsm_state70_blk : STD_LOGIC;
    signal ap_ST_fsm_state71_blk : STD_LOGIC;
    signal ap_ST_fsm_state72_blk : STD_LOGIC;
    signal ap_ST_fsm_state73_blk : STD_LOGIC;
    signal ap_ST_fsm_state74_blk : STD_LOGIC;
    signal ap_ST_fsm_state75_blk : STD_LOGIC;
    signal ap_ST_fsm_state76_blk : STD_LOGIC;
    signal ap_ST_fsm_state77_blk : STD_LOGIC;
    signal ap_ST_fsm_state78_blk : STD_LOGIC;
    signal ap_ST_fsm_state79_blk : STD_LOGIC;
    signal ap_ST_fsm_state80_blk : STD_LOGIC;
    signal ap_ST_fsm_state81_blk : STD_LOGIC;
    signal ap_ST_fsm_state82_blk : STD_LOGIC;
    signal ap_ST_fsm_state83_blk : STD_LOGIC;
    signal ap_ST_fsm_state84_blk : STD_LOGIC;
    signal ap_ST_fsm_state85_blk : STD_LOGIC;
    signal ap_ST_fsm_state86_blk : STD_LOGIC;
    signal ap_ST_fsm_state87_blk : STD_LOGIC;
    signal ap_ST_fsm_state88_blk : STD_LOGIC;
    signal ap_ST_fsm_state89_blk : STD_LOGIC;
    signal ap_ST_fsm_state90_blk : STD_LOGIC;
    signal ap_ST_fsm_state91_blk : STD_LOGIC;
    signal ap_ST_fsm_state92_blk : STD_LOGIC;
    signal ap_ST_fsm_state93_blk : STD_LOGIC;
    signal ap_ST_fsm_state94_blk : STD_LOGIC;
    signal ap_ST_fsm_state95_blk : STD_LOGIC;
    signal ap_ST_fsm_state96_blk : STD_LOGIC;
    signal ap_ST_fsm_state97_blk : STD_LOGIC;
    signal ap_ST_fsm_state98_blk : STD_LOGIC;
    signal ap_ST_fsm_state99_blk : STD_LOGIC;
    signal ap_ST_fsm_state100_blk : STD_LOGIC;
    signal ap_ST_fsm_state101_blk : STD_LOGIC;
    signal ap_ST_fsm_state102_blk : STD_LOGIC;
    signal ap_ST_fsm_state103_blk : STD_LOGIC;
    signal ap_ST_fsm_state104_blk : STD_LOGIC;
    signal ap_ST_fsm_state105_blk : STD_LOGIC;
    signal ap_ST_fsm_state106_blk : STD_LOGIC;
    signal ap_ST_fsm_state107_blk : STD_LOGIC;
    signal ap_ST_fsm_state108_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component fit_mul_64s_64s_96_5_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (95 downto 0) );
    end component;


    component fit_sdiv_96ns_64s_64_100_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (95 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component fit_sdiv_66ns_64s_64_70_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (65 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;



begin
    mul_64s_64s_96_5_1_U22 : component fit_mul_64s_64s_96_5_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 96)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => SxDivSTemp_fu_176_p1,
        din1 => partialSx_read_reg_212,
        ce => ap_const_logic_1,
        dout => grp_fu_124_p2);

    sdiv_96ns_64s_64_100_1_U23 : component fit_sdiv_96ns_64s_64_100_1
    generic map (
        ID => 1,
        NUM_STAGE => 100,
        din0_WIDTH => 96,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_144_p0,
        din1 => grp_fu_144_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_144_p2);

    sdiv_96ns_64s_64_100_1_U24 : component fit_sdiv_96ns_64s_64_100_1
    generic map (
        ID => 1,
        NUM_STAGE => 100,
        din0_WIDTH => 96,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_157_p0,
        din1 => grp_fu_157_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_157_p2);

    sdiv_66ns_64s_64_70_1_U25 : component fit_sdiv_66ns_64s_64_70_1
    generic map (
        ID => 1,
        NUM_STAGE => 70,
        din0_WIDTH => 66,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => ap_const_lv66_10000000000000000,
        din1 => partialS_read_reg_206,
        ce => ap_const_logic_1,
        dout => grp_fu_166_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((not((((ap_const_logic_0 = SyDivS_full_n) and (ap_predicate_op417_write_state108 = ap_const_boolean_1)) or ((ap_const_logic_0 = SxSquaredDivS_full_n) and (ap_predicate_op415_write_state108 = ap_const_boolean_1)) or ((ap_const_logic_0 = SxDivS_full_n) and (ap_predicate_op414_write_state108 = ap_const_boolean_1)) or ((ap_const_logic_0 = SDiv1_full_n) and (ap_predicate_op413_write_state108 = ap_const_boolean_1)))) and (ap_const_logic_1 = ap_CS_fsm_state108) and ((grp_nbreadreq_fu_64_p3 = ap_const_lv1_0) or (tmp_reg_202 = ap_const_lv1_0)))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state103)) then
                SxDivSTemp_reg_263 <= SxDivSTemp_fu_176_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((last1_empty_n = ap_const_logic_0) or (partialSy_empty_n = ap_const_logic_0) or (partialSx_empty_n = ap_const_logic_0) or (partialS_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                icmp_ln103_reg_223 <= icmp_ln103_fu_128_p2;
                partialS_read_reg_206 <= partialS_dout;
                partialSx_read_reg_212 <= partialSx_dout;
                partialSy_read_reg_218 <= partialSy_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state107)) then
                sdiv_ln105_reg_273 <= grp_fu_166_p2;
                trunc_ln1_reg_278 <= grp_fu_124_p2(95 downto 32);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state102)) then
                sdiv_ln107_reg_248 <= grp_fu_144_p2;
                sdiv_ln111_reg_253 <= grp_fu_157_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                tmp_reg_202 <= grp_nbreadreq_fu_64_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, partialS_empty_n, partialSx_empty_n, partialSy_empty_n, last1_empty_n, SDiv1_full_n, SxDivS_full_n, SxSquaredDivS_full_n, SyDivS_full_n, ap_CS_fsm_state2, ap_CS_fsm_state108, tmp_reg_202, grp_nbreadreq_fu_64_p3, icmp_ln103_fu_128_p2, ap_predicate_op413_write_state108, ap_predicate_op414_write_state108, ap_predicate_op415_write_state108, ap_predicate_op417_write_state108)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (grp_nbreadreq_fu_64_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                elsif ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (grp_nbreadreq_fu_64_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state108;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if ((not(((last1_empty_n = ap_const_logic_0) or (partialSy_empty_n = ap_const_logic_0) or (partialSx_empty_n = ap_const_logic_0) or (partialS_empty_n = ap_const_logic_0))) and (icmp_ln103_fu_128_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state108;
                elsif ((not(((last1_empty_n = ap_const_logic_0) or (partialSy_empty_n = ap_const_logic_0) or (partialSx_empty_n = ap_const_logic_0) or (partialS_empty_n = ap_const_logic_0))) and (icmp_ln103_fu_128_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state57;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when ap_ST_fsm_state58 => 
                ap_NS_fsm <= ap_ST_fsm_state59;
            when ap_ST_fsm_state59 => 
                ap_NS_fsm <= ap_ST_fsm_state60;
            when ap_ST_fsm_state60 => 
                ap_NS_fsm <= ap_ST_fsm_state61;
            when ap_ST_fsm_state61 => 
                ap_NS_fsm <= ap_ST_fsm_state62;
            when ap_ST_fsm_state62 => 
                ap_NS_fsm <= ap_ST_fsm_state63;
            when ap_ST_fsm_state63 => 
                ap_NS_fsm <= ap_ST_fsm_state64;
            when ap_ST_fsm_state64 => 
                ap_NS_fsm <= ap_ST_fsm_state65;
            when ap_ST_fsm_state65 => 
                ap_NS_fsm <= ap_ST_fsm_state66;
            when ap_ST_fsm_state66 => 
                ap_NS_fsm <= ap_ST_fsm_state67;
            when ap_ST_fsm_state67 => 
                ap_NS_fsm <= ap_ST_fsm_state68;
            when ap_ST_fsm_state68 => 
                ap_NS_fsm <= ap_ST_fsm_state69;
            when ap_ST_fsm_state69 => 
                ap_NS_fsm <= ap_ST_fsm_state70;
            when ap_ST_fsm_state70 => 
                ap_NS_fsm <= ap_ST_fsm_state71;
            when ap_ST_fsm_state71 => 
                ap_NS_fsm <= ap_ST_fsm_state72;
            when ap_ST_fsm_state72 => 
                ap_NS_fsm <= ap_ST_fsm_state73;
            when ap_ST_fsm_state73 => 
                ap_NS_fsm <= ap_ST_fsm_state74;
            when ap_ST_fsm_state74 => 
                ap_NS_fsm <= ap_ST_fsm_state75;
            when ap_ST_fsm_state75 => 
                ap_NS_fsm <= ap_ST_fsm_state76;
            when ap_ST_fsm_state76 => 
                ap_NS_fsm <= ap_ST_fsm_state77;
            when ap_ST_fsm_state77 => 
                ap_NS_fsm <= ap_ST_fsm_state78;
            when ap_ST_fsm_state78 => 
                ap_NS_fsm <= ap_ST_fsm_state79;
            when ap_ST_fsm_state79 => 
                ap_NS_fsm <= ap_ST_fsm_state80;
            when ap_ST_fsm_state80 => 
                ap_NS_fsm <= ap_ST_fsm_state81;
            when ap_ST_fsm_state81 => 
                ap_NS_fsm <= ap_ST_fsm_state82;
            when ap_ST_fsm_state82 => 
                ap_NS_fsm <= ap_ST_fsm_state83;
            when ap_ST_fsm_state83 => 
                ap_NS_fsm <= ap_ST_fsm_state84;
            when ap_ST_fsm_state84 => 
                ap_NS_fsm <= ap_ST_fsm_state85;
            when ap_ST_fsm_state85 => 
                ap_NS_fsm <= ap_ST_fsm_state86;
            when ap_ST_fsm_state86 => 
                ap_NS_fsm <= ap_ST_fsm_state87;
            when ap_ST_fsm_state87 => 
                ap_NS_fsm <= ap_ST_fsm_state88;
            when ap_ST_fsm_state88 => 
                ap_NS_fsm <= ap_ST_fsm_state89;
            when ap_ST_fsm_state89 => 
                ap_NS_fsm <= ap_ST_fsm_state90;
            when ap_ST_fsm_state90 => 
                ap_NS_fsm <= ap_ST_fsm_state91;
            when ap_ST_fsm_state91 => 
                ap_NS_fsm <= ap_ST_fsm_state92;
            when ap_ST_fsm_state92 => 
                ap_NS_fsm <= ap_ST_fsm_state93;
            when ap_ST_fsm_state93 => 
                ap_NS_fsm <= ap_ST_fsm_state94;
            when ap_ST_fsm_state94 => 
                ap_NS_fsm <= ap_ST_fsm_state95;
            when ap_ST_fsm_state95 => 
                ap_NS_fsm <= ap_ST_fsm_state96;
            when ap_ST_fsm_state96 => 
                ap_NS_fsm <= ap_ST_fsm_state97;
            when ap_ST_fsm_state97 => 
                ap_NS_fsm <= ap_ST_fsm_state98;
            when ap_ST_fsm_state98 => 
                ap_NS_fsm <= ap_ST_fsm_state99;
            when ap_ST_fsm_state99 => 
                ap_NS_fsm <= ap_ST_fsm_state100;
            when ap_ST_fsm_state100 => 
                ap_NS_fsm <= ap_ST_fsm_state101;
            when ap_ST_fsm_state101 => 
                ap_NS_fsm <= ap_ST_fsm_state102;
            when ap_ST_fsm_state102 => 
                ap_NS_fsm <= ap_ST_fsm_state103;
            when ap_ST_fsm_state103 => 
                ap_NS_fsm <= ap_ST_fsm_state104;
            when ap_ST_fsm_state104 => 
                ap_NS_fsm <= ap_ST_fsm_state105;
            when ap_ST_fsm_state105 => 
                ap_NS_fsm <= ap_ST_fsm_state106;
            when ap_ST_fsm_state106 => 
                ap_NS_fsm <= ap_ST_fsm_state107;
            when ap_ST_fsm_state107 => 
                ap_NS_fsm <= ap_ST_fsm_state108;
            when ap_ST_fsm_state108 => 
                if ((not((((ap_const_logic_0 = SyDivS_full_n) and (ap_predicate_op417_write_state108 = ap_const_boolean_1)) or ((ap_const_logic_0 = SxSquaredDivS_full_n) and (ap_predicate_op415_write_state108 = ap_const_boolean_1)) or ((ap_const_logic_0 = SxDivS_full_n) and (ap_predicate_op414_write_state108 = ap_const_boolean_1)) or ((ap_const_logic_0 = SDiv1_full_n) and (ap_predicate_op413_write_state108 = ap_const_boolean_1)))) and (ap_const_logic_1 = ap_CS_fsm_state108) and ((grp_nbreadreq_fu_64_p3 = ap_const_lv1_0) or (tmp_reg_202 = ap_const_lv1_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                elsif ((not((((ap_const_logic_0 = SyDivS_full_n) and (ap_predicate_op417_write_state108 = ap_const_boolean_1)) or ((ap_const_logic_0 = SxSquaredDivS_full_n) and (ap_predicate_op415_write_state108 = ap_const_boolean_1)) or ((ap_const_logic_0 = SxDivS_full_n) and (ap_predicate_op414_write_state108 = ap_const_boolean_1)) or ((ap_const_logic_0 = SDiv1_full_n) and (ap_predicate_op413_write_state108 = ap_const_boolean_1)))) and (grp_nbreadreq_fu_64_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state108) and (tmp_reg_202 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state108;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    SDiv1_blk_n_assign_proc : process(SDiv1_full_n, ap_CS_fsm_state108, tmp_reg_202, icmp_ln103_reg_223)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state108) and (icmp_ln103_reg_223 = ap_const_lv1_0) and (tmp_reg_202 = ap_const_lv1_1))) then 
            SDiv1_blk_n <= SDiv1_full_n;
        else 
            SDiv1_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    SDiv1_din <= sdiv_ln105_reg_273(64 - 1 downto 0);

    SDiv1_write_assign_proc : process(SDiv1_full_n, SxDivS_full_n, SxSquaredDivS_full_n, SyDivS_full_n, ap_CS_fsm_state108, ap_predicate_op413_write_state108, ap_predicate_op414_write_state108, ap_predicate_op415_write_state108, ap_predicate_op417_write_state108)
    begin
        if ((not((((ap_const_logic_0 = SyDivS_full_n) and (ap_predicate_op417_write_state108 = ap_const_boolean_1)) or ((ap_const_logic_0 = SxSquaredDivS_full_n) and (ap_predicate_op415_write_state108 = ap_const_boolean_1)) or ((ap_const_logic_0 = SxDivS_full_n) and (ap_predicate_op414_write_state108 = ap_const_boolean_1)) or ((ap_const_logic_0 = SDiv1_full_n) and (ap_predicate_op413_write_state108 = ap_const_boolean_1)))) and (ap_predicate_op413_write_state108 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_state108))) then 
            SDiv1_write <= ap_const_logic_1;
        else 
            SDiv1_write <= ap_const_logic_0;
        end if; 
    end process;

    SxDivSTemp_fu_176_p1 <= sdiv_ln107_reg_248(64 - 1 downto 0);

    SxDivS_blk_n_assign_proc : process(SxDivS_full_n, ap_CS_fsm_state108, tmp_reg_202, icmp_ln103_reg_223)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state108) and (icmp_ln103_reg_223 = ap_const_lv1_0) and (tmp_reg_202 = ap_const_lv1_1))) then 
            SxDivS_blk_n <= SxDivS_full_n;
        else 
            SxDivS_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    SxDivS_din <= SxDivSTemp_reg_263;

    SxDivS_write_assign_proc : process(SDiv1_full_n, SxDivS_full_n, SxSquaredDivS_full_n, SyDivS_full_n, ap_CS_fsm_state108, ap_predicate_op413_write_state108, ap_predicate_op414_write_state108, ap_predicate_op415_write_state108, ap_predicate_op417_write_state108)
    begin
        if ((not((((ap_const_logic_0 = SyDivS_full_n) and (ap_predicate_op417_write_state108 = ap_const_boolean_1)) or ((ap_const_logic_0 = SxSquaredDivS_full_n) and (ap_predicate_op415_write_state108 = ap_const_boolean_1)) or ((ap_const_logic_0 = SxDivS_full_n) and (ap_predicate_op414_write_state108 = ap_const_boolean_1)) or ((ap_const_logic_0 = SDiv1_full_n) and (ap_predicate_op413_write_state108 = ap_const_boolean_1)))) and (ap_predicate_op414_write_state108 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_state108))) then 
            SxDivS_write <= ap_const_logic_1;
        else 
            SxDivS_write <= ap_const_logic_0;
        end if; 
    end process;


    SxSquaredDivS_blk_n_assign_proc : process(SxSquaredDivS_full_n, ap_CS_fsm_state108, tmp_reg_202, icmp_ln103_reg_223)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state108) and (icmp_ln103_reg_223 = ap_const_lv1_0) and (tmp_reg_202 = ap_const_lv1_1))) then 
            SxSquaredDivS_blk_n <= SxSquaredDivS_full_n;
        else 
            SxSquaredDivS_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    SxSquaredDivS_din <= trunc_ln1_reg_278;

    SxSquaredDivS_write_assign_proc : process(SDiv1_full_n, SxDivS_full_n, SxSquaredDivS_full_n, SyDivS_full_n, ap_CS_fsm_state108, ap_predicate_op413_write_state108, ap_predicate_op414_write_state108, ap_predicate_op415_write_state108, ap_predicate_op417_write_state108)
    begin
        if ((not((((ap_const_logic_0 = SyDivS_full_n) and (ap_predicate_op417_write_state108 = ap_const_boolean_1)) or ((ap_const_logic_0 = SxSquaredDivS_full_n) and (ap_predicate_op415_write_state108 = ap_const_boolean_1)) or ((ap_const_logic_0 = SxDivS_full_n) and (ap_predicate_op414_write_state108 = ap_const_boolean_1)) or ((ap_const_logic_0 = SDiv1_full_n) and (ap_predicate_op413_write_state108 = ap_const_boolean_1)))) and (ap_predicate_op415_write_state108 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_state108))) then 
            SxSquaredDivS_write <= ap_const_logic_1;
        else 
            SxSquaredDivS_write <= ap_const_logic_0;
        end if; 
    end process;


    SyDivS_blk_n_assign_proc : process(SyDivS_full_n, ap_CS_fsm_state108, tmp_reg_202, icmp_ln103_reg_223)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state108) and (icmp_ln103_reg_223 = ap_const_lv1_0) and (tmp_reg_202 = ap_const_lv1_1))) then 
            SyDivS_blk_n <= SyDivS_full_n;
        else 
            SyDivS_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    SyDivS_din <= sdiv_ln111_reg_253(64 - 1 downto 0);

    SyDivS_write_assign_proc : process(SDiv1_full_n, SxDivS_full_n, SxSquaredDivS_full_n, SyDivS_full_n, ap_CS_fsm_state108, ap_predicate_op413_write_state108, ap_predicate_op414_write_state108, ap_predicate_op415_write_state108, ap_predicate_op417_write_state108)
    begin
        if ((not((((ap_const_logic_0 = SyDivS_full_n) and (ap_predicate_op417_write_state108 = ap_const_boolean_1)) or ((ap_const_logic_0 = SxSquaredDivS_full_n) and (ap_predicate_op415_write_state108 = ap_const_boolean_1)) or ((ap_const_logic_0 = SxDivS_full_n) and (ap_predicate_op414_write_state108 = ap_const_boolean_1)) or ((ap_const_logic_0 = SDiv1_full_n) and (ap_predicate_op413_write_state108 = ap_const_boolean_1)))) and (ap_predicate_op417_write_state108 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_state108))) then 
            SyDivS_write <= ap_const_logic_1;
        else 
            SyDivS_write <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state102 <= ap_CS_fsm(101);
    ap_CS_fsm_state103 <= ap_CS_fsm(102);
    ap_CS_fsm_state107 <= ap_CS_fsm(106);
    ap_CS_fsm_state108 <= ap_CS_fsm(107);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state38 <= ap_CS_fsm(37);
    ap_ST_fsm_state100_blk <= ap_const_logic_0;
    ap_ST_fsm_state101_blk <= ap_const_logic_0;
    ap_ST_fsm_state102_blk <= ap_const_logic_0;
    ap_ST_fsm_state103_blk <= ap_const_logic_0;
    ap_ST_fsm_state104_blk <= ap_const_logic_0;
    ap_ST_fsm_state105_blk <= ap_const_logic_0;
    ap_ST_fsm_state106_blk <= ap_const_logic_0;
    ap_ST_fsm_state107_blk <= ap_const_logic_0;

    ap_ST_fsm_state108_blk_assign_proc : process(SDiv1_full_n, SxDivS_full_n, SxSquaredDivS_full_n, SyDivS_full_n, ap_predicate_op413_write_state108, ap_predicate_op414_write_state108, ap_predicate_op415_write_state108, ap_predicate_op417_write_state108)
    begin
        if ((((ap_const_logic_0 = SyDivS_full_n) and (ap_predicate_op417_write_state108 = ap_const_boolean_1)) or ((ap_const_logic_0 = SxSquaredDivS_full_n) and (ap_predicate_op415_write_state108 = ap_const_boolean_1)) or ((ap_const_logic_0 = SxDivS_full_n) and (ap_predicate_op414_write_state108 = ap_const_boolean_1)) or ((ap_const_logic_0 = SDiv1_full_n) and (ap_predicate_op413_write_state108 = ap_const_boolean_1)))) then 
            ap_ST_fsm_state108_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state108_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state10_blk <= ap_const_logic_0;
    ap_ST_fsm_state11_blk <= ap_const_logic_0;
    ap_ST_fsm_state12_blk <= ap_const_logic_0;
    ap_ST_fsm_state13_blk <= ap_const_logic_0;
    ap_ST_fsm_state14_blk <= ap_const_logic_0;
    ap_ST_fsm_state15_blk <= ap_const_logic_0;
    ap_ST_fsm_state16_blk <= ap_const_logic_0;
    ap_ST_fsm_state17_blk <= ap_const_logic_0;
    ap_ST_fsm_state18_blk <= ap_const_logic_0;
    ap_ST_fsm_state19_blk <= ap_const_logic_0;

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start, ap_done_reg)
    begin
        if (((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state20_blk <= ap_const_logic_0;
    ap_ST_fsm_state21_blk <= ap_const_logic_0;
    ap_ST_fsm_state22_blk <= ap_const_logic_0;
    ap_ST_fsm_state23_blk <= ap_const_logic_0;
    ap_ST_fsm_state24_blk <= ap_const_logic_0;
    ap_ST_fsm_state25_blk <= ap_const_logic_0;
    ap_ST_fsm_state26_blk <= ap_const_logic_0;
    ap_ST_fsm_state27_blk <= ap_const_logic_0;
    ap_ST_fsm_state28_blk <= ap_const_logic_0;
    ap_ST_fsm_state29_blk <= ap_const_logic_0;

    ap_ST_fsm_state2_blk_assign_proc : process(partialS_empty_n, partialSx_empty_n, partialSy_empty_n, last1_empty_n)
    begin
        if (((last1_empty_n = ap_const_logic_0) or (partialSy_empty_n = ap_const_logic_0) or (partialSx_empty_n = ap_const_logic_0) or (partialS_empty_n = ap_const_logic_0))) then 
            ap_ST_fsm_state2_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state2_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state30_blk <= ap_const_logic_0;
    ap_ST_fsm_state31_blk <= ap_const_logic_0;
    ap_ST_fsm_state32_blk <= ap_const_logic_0;
    ap_ST_fsm_state33_blk <= ap_const_logic_0;
    ap_ST_fsm_state34_blk <= ap_const_logic_0;
    ap_ST_fsm_state35_blk <= ap_const_logic_0;
    ap_ST_fsm_state36_blk <= ap_const_logic_0;
    ap_ST_fsm_state37_blk <= ap_const_logic_0;
    ap_ST_fsm_state38_blk <= ap_const_logic_0;
    ap_ST_fsm_state39_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state40_blk <= ap_const_logic_0;
    ap_ST_fsm_state41_blk <= ap_const_logic_0;
    ap_ST_fsm_state42_blk <= ap_const_logic_0;
    ap_ST_fsm_state43_blk <= ap_const_logic_0;
    ap_ST_fsm_state44_blk <= ap_const_logic_0;
    ap_ST_fsm_state45_blk <= ap_const_logic_0;
    ap_ST_fsm_state46_blk <= ap_const_logic_0;
    ap_ST_fsm_state47_blk <= ap_const_logic_0;
    ap_ST_fsm_state48_blk <= ap_const_logic_0;
    ap_ST_fsm_state49_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state50_blk <= ap_const_logic_0;
    ap_ST_fsm_state51_blk <= ap_const_logic_0;
    ap_ST_fsm_state52_blk <= ap_const_logic_0;
    ap_ST_fsm_state53_blk <= ap_const_logic_0;
    ap_ST_fsm_state54_blk <= ap_const_logic_0;
    ap_ST_fsm_state55_blk <= ap_const_logic_0;
    ap_ST_fsm_state56_blk <= ap_const_logic_0;
    ap_ST_fsm_state57_blk <= ap_const_logic_0;
    ap_ST_fsm_state58_blk <= ap_const_logic_0;
    ap_ST_fsm_state59_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state60_blk <= ap_const_logic_0;
    ap_ST_fsm_state61_blk <= ap_const_logic_0;
    ap_ST_fsm_state62_blk <= ap_const_logic_0;
    ap_ST_fsm_state63_blk <= ap_const_logic_0;
    ap_ST_fsm_state64_blk <= ap_const_logic_0;
    ap_ST_fsm_state65_blk <= ap_const_logic_0;
    ap_ST_fsm_state66_blk <= ap_const_logic_0;
    ap_ST_fsm_state67_blk <= ap_const_logic_0;
    ap_ST_fsm_state68_blk <= ap_const_logic_0;
    ap_ST_fsm_state69_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state70_blk <= ap_const_logic_0;
    ap_ST_fsm_state71_blk <= ap_const_logic_0;
    ap_ST_fsm_state72_blk <= ap_const_logic_0;
    ap_ST_fsm_state73_blk <= ap_const_logic_0;
    ap_ST_fsm_state74_blk <= ap_const_logic_0;
    ap_ST_fsm_state75_blk <= ap_const_logic_0;
    ap_ST_fsm_state76_blk <= ap_const_logic_0;
    ap_ST_fsm_state77_blk <= ap_const_logic_0;
    ap_ST_fsm_state78_blk <= ap_const_logic_0;
    ap_ST_fsm_state79_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state80_blk <= ap_const_logic_0;
    ap_ST_fsm_state81_blk <= ap_const_logic_0;
    ap_ST_fsm_state82_blk <= ap_const_logic_0;
    ap_ST_fsm_state83_blk <= ap_const_logic_0;
    ap_ST_fsm_state84_blk <= ap_const_logic_0;
    ap_ST_fsm_state85_blk <= ap_const_logic_0;
    ap_ST_fsm_state86_blk <= ap_const_logic_0;
    ap_ST_fsm_state87_blk <= ap_const_logic_0;
    ap_ST_fsm_state88_blk <= ap_const_logic_0;
    ap_ST_fsm_state89_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state90_blk <= ap_const_logic_0;
    ap_ST_fsm_state91_blk <= ap_const_logic_0;
    ap_ST_fsm_state92_blk <= ap_const_logic_0;
    ap_ST_fsm_state93_blk <= ap_const_logic_0;
    ap_ST_fsm_state94_blk <= ap_const_logic_0;
    ap_ST_fsm_state95_blk <= ap_const_logic_0;
    ap_ST_fsm_state96_blk <= ap_const_logic_0;
    ap_ST_fsm_state97_blk <= ap_const_logic_0;
    ap_ST_fsm_state98_blk <= ap_const_logic_0;
    ap_ST_fsm_state99_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0));
    end process;


    ap_block_state108_assign_proc : process(SDiv1_full_n, SxDivS_full_n, SxSquaredDivS_full_n, SyDivS_full_n, ap_predicate_op413_write_state108, ap_predicate_op414_write_state108, ap_predicate_op415_write_state108, ap_predicate_op417_write_state108)
    begin
                ap_block_state108 <= (((ap_const_logic_0 = SyDivS_full_n) and (ap_predicate_op417_write_state108 = ap_const_boolean_1)) or ((ap_const_logic_0 = SxSquaredDivS_full_n) and (ap_predicate_op415_write_state108 = ap_const_boolean_1)) or ((ap_const_logic_0 = SxDivS_full_n) and (ap_predicate_op414_write_state108 = ap_const_boolean_1)) or ((ap_const_logic_0 = SDiv1_full_n) and (ap_predicate_op413_write_state108 = ap_const_boolean_1)));
    end process;


    ap_block_state2_assign_proc : process(partialS_empty_n, partialSx_empty_n, partialSy_empty_n, last1_empty_n)
    begin
                ap_block_state2 <= ((last1_empty_n = ap_const_logic_0) or (partialSy_empty_n = ap_const_logic_0) or (partialSx_empty_n = ap_const_logic_0) or (partialS_empty_n = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_done_reg, SDiv1_full_n, SxDivS_full_n, SxSquaredDivS_full_n, SyDivS_full_n, ap_CS_fsm_state108, tmp_reg_202, grp_nbreadreq_fu_64_p3, ap_predicate_op413_write_state108, ap_predicate_op414_write_state108, ap_predicate_op415_write_state108, ap_predicate_op417_write_state108)
    begin
        if ((not((((ap_const_logic_0 = SyDivS_full_n) and (ap_predicate_op417_write_state108 = ap_const_boolean_1)) or ((ap_const_logic_0 = SxSquaredDivS_full_n) and (ap_predicate_op415_write_state108 = ap_const_boolean_1)) or ((ap_const_logic_0 = SxDivS_full_n) and (ap_predicate_op414_write_state108 = ap_const_boolean_1)) or ((ap_const_logic_0 = SDiv1_full_n) and (ap_predicate_op413_write_state108 = ap_const_boolean_1)))) and (ap_const_logic_1 = ap_CS_fsm_state108) and ((grp_nbreadreq_fu_64_p3 = ap_const_lv1_0) or (tmp_reg_202 = ap_const_lv1_0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_predicate_op413_write_state108_assign_proc : process(tmp_reg_202, icmp_ln103_reg_223)
    begin
                ap_predicate_op413_write_state108 <= ((icmp_ln103_reg_223 = ap_const_lv1_0) and (tmp_reg_202 = ap_const_lv1_1));
    end process;


    ap_predicate_op414_write_state108_assign_proc : process(tmp_reg_202, icmp_ln103_reg_223)
    begin
                ap_predicate_op414_write_state108 <= ((icmp_ln103_reg_223 = ap_const_lv1_0) and (tmp_reg_202 = ap_const_lv1_1));
    end process;


    ap_predicate_op415_write_state108_assign_proc : process(tmp_reg_202, icmp_ln103_reg_223)
    begin
                ap_predicate_op415_write_state108 <= ((icmp_ln103_reg_223 = ap_const_lv1_0) and (tmp_reg_202 = ap_const_lv1_1));
    end process;


    ap_predicate_op417_write_state108_assign_proc : process(tmp_reg_202, icmp_ln103_reg_223)
    begin
                ap_predicate_op417_write_state108 <= ((icmp_ln103_reg_223 = ap_const_lv1_0) and (tmp_reg_202 = ap_const_lv1_1));
    end process;


    ap_ready_assign_proc : process(SDiv1_full_n, SxDivS_full_n, SxSquaredDivS_full_n, SyDivS_full_n, ap_CS_fsm_state108, tmp_reg_202, grp_nbreadreq_fu_64_p3, ap_predicate_op413_write_state108, ap_predicate_op414_write_state108, ap_predicate_op415_write_state108, ap_predicate_op417_write_state108)
    begin
        if ((not((((ap_const_logic_0 = SyDivS_full_n) and (ap_predicate_op417_write_state108 = ap_const_boolean_1)) or ((ap_const_logic_0 = SxSquaredDivS_full_n) and (ap_predicate_op415_write_state108 = ap_const_boolean_1)) or ((ap_const_logic_0 = SxDivS_full_n) and (ap_predicate_op414_write_state108 = ap_const_boolean_1)) or ((ap_const_logic_0 = SDiv1_full_n) and (ap_predicate_op413_write_state108 = ap_const_boolean_1)))) and (ap_const_logic_1 = ap_CS_fsm_state108) and ((grp_nbreadreq_fu_64_p3 = ap_const_lv1_0) or (tmp_reg_202 = ap_const_lv1_0)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_144_p0 <= (partialSx_read_reg_212 & ap_const_lv32_0);
    grp_fu_144_p1 <= sext_ln105_fu_134_p1(64 - 1 downto 0);
    grp_fu_157_p0 <= (partialSy_read_reg_218 & ap_const_lv32_0);
    grp_fu_157_p1 <= sext_ln105_fu_134_p1(64 - 1 downto 0);
    grp_nbreadreq_fu_64_p3 <= (0=>(last1_empty_n), others=>'-');
    icmp_ln103_fu_128_p2 <= "1" when (last1_dout = ap_const_lv2_0) else "0";

    last1_blk_n_assign_proc : process(last1_empty_n, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            last1_blk_n <= last1_empty_n;
        else 
            last1_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    last1_read_assign_proc : process(partialS_empty_n, partialSx_empty_n, partialSy_empty_n, last1_empty_n, ap_CS_fsm_state2)
    begin
        if ((not(((last1_empty_n = ap_const_logic_0) or (partialSy_empty_n = ap_const_logic_0) or (partialSx_empty_n = ap_const_logic_0) or (partialS_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            last1_read <= ap_const_logic_1;
        else 
            last1_read <= ap_const_logic_0;
        end if; 
    end process;


    partialS_blk_n_assign_proc : process(partialS_empty_n, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            partialS_blk_n <= partialS_empty_n;
        else 
            partialS_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    partialS_read_assign_proc : process(partialS_empty_n, partialSx_empty_n, partialSy_empty_n, last1_empty_n, ap_CS_fsm_state2)
    begin
        if ((not(((last1_empty_n = ap_const_logic_0) or (partialSy_empty_n = ap_const_logic_0) or (partialSx_empty_n = ap_const_logic_0) or (partialS_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            partialS_read <= ap_const_logic_1;
        else 
            partialS_read <= ap_const_logic_0;
        end if; 
    end process;


    partialSx_blk_n_assign_proc : process(partialSx_empty_n, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            partialSx_blk_n <= partialSx_empty_n;
        else 
            partialSx_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    partialSx_read_assign_proc : process(partialS_empty_n, partialSx_empty_n, partialSy_empty_n, last1_empty_n, ap_CS_fsm_state2)
    begin
        if ((not(((last1_empty_n = ap_const_logic_0) or (partialSy_empty_n = ap_const_logic_0) or (partialSx_empty_n = ap_const_logic_0) or (partialS_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            partialSx_read <= ap_const_logic_1;
        else 
            partialSx_read <= ap_const_logic_0;
        end if; 
    end process;


    partialSy_blk_n_assign_proc : process(partialSy_empty_n, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            partialSy_blk_n <= partialSy_empty_n;
        else 
            partialSy_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    partialSy_read_assign_proc : process(partialS_empty_n, partialSx_empty_n, partialSy_empty_n, last1_empty_n, ap_CS_fsm_state2)
    begin
        if ((not(((last1_empty_n = ap_const_logic_0) or (partialSy_empty_n = ap_const_logic_0) or (partialSx_empty_n = ap_const_logic_0) or (partialS_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            partialSy_read <= ap_const_logic_1;
        else 
            partialSy_read <= ap_const_logic_0;
        end if; 
    end process;

        sext_ln105_fu_134_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(partialS_read_reg_206),96));

end behav;
