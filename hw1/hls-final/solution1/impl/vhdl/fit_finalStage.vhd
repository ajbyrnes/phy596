-- ==============================================================
-- Generated by Vitis HLS v2023.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity fit_finalStage is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    resultStream_dout : IN STD_LOGIC_VECTOR (331 downto 0);
    resultStream_num_data_valid : IN STD_LOGIC_VECTOR (4 downto 0);
    resultStream_fifo_cap : IN STD_LOGIC_VECTOR (4 downto 0);
    resultStream_empty_n : IN STD_LOGIC;
    resultStream_read : OUT STD_LOGIC;
    x2_dout : IN STD_LOGIC_VECTOR (11 downto 0);
    x2_num_data_valid : IN STD_LOGIC_VECTOR (4 downto 0);
    x2_fifo_cap : IN STD_LOGIC_VECTOR (4 downto 0);
    x2_empty_n : IN STD_LOGIC;
    x2_read : OUT STD_LOGIC;
    y2_dout : IN STD_LOGIC_VECTOR (11 downto 0);
    y2_num_data_valid : IN STD_LOGIC_VECTOR (4 downto 0);
    y2_fifo_cap : IN STD_LOGIC_VECTOR (4 downto 0);
    y2_empty_n : IN STD_LOGIC;
    y2_read : OUT STD_LOGIC;
    sigmaSquaredDiv1_dout : IN STD_LOGIC_VECTOR (63 downto 0);
    sigmaSquaredDiv1_num_data_valid : IN STD_LOGIC_VECTOR (4 downto 0);
    sigmaSquaredDiv1_fifo_cap : IN STD_LOGIC_VECTOR (4 downto 0);
    sigmaSquaredDiv1_empty_n : IN STD_LOGIC;
    sigmaSquaredDiv1_read : OUT STD_LOGIC;
    last3_dout : IN STD_LOGIC_VECTOR (1 downto 0);
    last3_num_data_valid : IN STD_LOGIC_VECTOR (4 downto 0);
    last3_fifo_cap : IN STD_LOGIC_VECTOR (4 downto 0);
    last3_empty_n : IN STD_LOGIC;
    last3_read : OUT STD_LOGIC;
    output_r_TDATA : OUT STD_LOGIC_VECTOR (383 downto 0);
    output_r_TVALID : OUT STD_LOGIC;
    output_r_TREADY : IN STD_LOGIC );
end;


architecture behav of fit_finalStage is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state66 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state67 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state68 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state69 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state70 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000001000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state71 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000010000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state72 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000100000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state73 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000001000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state74 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000010000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state75 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000100000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state76 : STD_LOGIC_VECTOR (86 downto 0) := "000000000001000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state77 : STD_LOGIC_VECTOR (86 downto 0) := "000000000010000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state78 : STD_LOGIC_VECTOR (86 downto 0) := "000000000100000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state79 : STD_LOGIC_VECTOR (86 downto 0) := "000000001000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state80 : STD_LOGIC_VECTOR (86 downto 0) := "000000010000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state81 : STD_LOGIC_VECTOR (86 downto 0) := "000000100000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state82 : STD_LOGIC_VECTOR (86 downto 0) := "000001000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state83 : STD_LOGIC_VECTOR (86 downto 0) := "000010000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state84 : STD_LOGIC_VECTOR (86 downto 0) := "000100000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state85 : STD_LOGIC_VECTOR (86 downto 0) := "001000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state86 : STD_LOGIC_VECTOR (86 downto 0) := "010000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state87 : STD_LOGIC_VECTOR (86 downto 0) := "100000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv32_56 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010110";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_55 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010101";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_CC : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011001100";
    constant ap_const_lv32_10B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100001011";
    constant ap_const_lv32_4B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001011";
    constant ap_const_lv32_4C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001100";
    constant ap_const_lv32_8B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001011";
    constant ap_const_lv32_8C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001100";
    constant ap_const_lv32_CB : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011001011";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";
    constant ap_const_lv12_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_const_lv13_1FFE : STD_LOGIC_VECTOR (12 downto 0) := "1111111111110";
    constant ap_const_lv52_0 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_80 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000000";
    constant ap_const_lv32_BF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010111111";
    constant ap_const_lv32_C0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011000000";
    constant ap_const_lv32_FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011111111";
    constant ap_const_lv32_100 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100000000";
    constant ap_const_lv32_13F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100111111";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal n : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    signal resultStream_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state87 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state87 : signal is "none";
    signal tmp_reg_527 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln186_reg_582 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_nbreadreq_fu_191_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal x2_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal y2_blk_n : STD_LOGIC;
    signal sigmaSquaredDiv1_blk_n : STD_LOGIC;
    signal last3_blk_n : STD_LOGIC;
    signal output_r_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state86 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state86 : signal is "none";
    signal grp_nbreadreq_fu_152_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal y2_read_reg_567 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_block_state2 : BOOLEAN;
    signal x2_read_reg_572 : STD_LOGIC_VECTOR (11 downto 0);
    signal sigmaSquaredDiv1_read_reg_577 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln186_fu_293_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal grp_fu_209_p2 : STD_LOGIC_VECTOR (95 downto 0);
    signal mul_ln181_reg_599 : STD_LOGIC_VECTOR (95 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal trunc_ln_reg_607 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal sext_ln182_fu_362_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal sext_ln182_reg_612 : STD_LOGIC_VECTOR (127 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal grp_fu_213_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal mul_ln182_reg_623 : STD_LOGIC_VECTOR (127 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal trunc_ln3_reg_628 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal r_n_fu_380_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal r_n_reg_633 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal tmp_3_fu_445_p4 : STD_LOGIC_VECTOR (319 downto 0);
    signal ap_predicate_op230_write_state87 : BOOLEAN;
    signal ap_predicate_op233_read_state87 : BOOLEAN;
    signal regslice_both_output_r_U_apdone_blk : STD_LOGIC;
    signal ap_block_state87 : BOOLEAN;
    signal ap_block_state87_io : BOOLEAN;
    signal grp_load_fu_221_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal r_n_1_fu_126 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_sig_allocacmp_r_n_1_load_1 : STD_LOGIC_VECTOR (11 downto 0);
    signal r_a_1_fu_130 : STD_LOGIC_VECTOR (63 downto 0);
    signal r_b_1_fu_134 : STD_LOGIC_VECTOR (63 downto 0);
    signal r_sigmaA_1_fu_138 : STD_LOGIC_VECTOR (63 downto 0);
    signal r_sigmaB_1_fu_142 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_217_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal shl_ln181_1_fu_302_p3 : STD_LOGIC_VECTOR (43 downto 0);
    signal shl_ln_fu_322_p3 : STD_LOGIC_VECTOR (43 downto 0);
    signal sext_ln181_fu_329_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sub_ln181_fu_333_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln181_2_fu_339_p3 : STD_LOGIC_VECTOR (95 downto 0);
    signal sub_ln181_1_fu_347_p2 : STD_LOGIC_VECTOR (95 downto 0);
    signal grp_fu_217_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal sext_ln188_fu_391_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln188_fu_394_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_404_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_ln190_4_fu_415_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_5_fu_435_p4 : STD_LOGIC_VECTOR (255 downto 0);
    signal trunc_ln196_fu_431_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_404_ce : STD_LOGIC;
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (86 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ST_fsm_state14_blk : STD_LOGIC;
    signal ap_ST_fsm_state15_blk : STD_LOGIC;
    signal ap_ST_fsm_state16_blk : STD_LOGIC;
    signal ap_ST_fsm_state17_blk : STD_LOGIC;
    signal ap_ST_fsm_state18_blk : STD_LOGIC;
    signal ap_ST_fsm_state19_blk : STD_LOGIC;
    signal ap_ST_fsm_state20_blk : STD_LOGIC;
    signal ap_ST_fsm_state21_blk : STD_LOGIC;
    signal ap_ST_fsm_state22_blk : STD_LOGIC;
    signal ap_ST_fsm_state23_blk : STD_LOGIC;
    signal ap_ST_fsm_state24_blk : STD_LOGIC;
    signal ap_ST_fsm_state25_blk : STD_LOGIC;
    signal ap_ST_fsm_state26_blk : STD_LOGIC;
    signal ap_ST_fsm_state27_blk : STD_LOGIC;
    signal ap_ST_fsm_state28_blk : STD_LOGIC;
    signal ap_ST_fsm_state29_blk : STD_LOGIC;
    signal ap_ST_fsm_state30_blk : STD_LOGIC;
    signal ap_ST_fsm_state31_blk : STD_LOGIC;
    signal ap_ST_fsm_state32_blk : STD_LOGIC;
    signal ap_ST_fsm_state33_blk : STD_LOGIC;
    signal ap_ST_fsm_state34_blk : STD_LOGIC;
    signal ap_ST_fsm_state35_blk : STD_LOGIC;
    signal ap_ST_fsm_state36_blk : STD_LOGIC;
    signal ap_ST_fsm_state37_blk : STD_LOGIC;
    signal ap_ST_fsm_state38_blk : STD_LOGIC;
    signal ap_ST_fsm_state39_blk : STD_LOGIC;
    signal ap_ST_fsm_state40_blk : STD_LOGIC;
    signal ap_ST_fsm_state41_blk : STD_LOGIC;
    signal ap_ST_fsm_state42_blk : STD_LOGIC;
    signal ap_ST_fsm_state43_blk : STD_LOGIC;
    signal ap_ST_fsm_state44_blk : STD_LOGIC;
    signal ap_ST_fsm_state45_blk : STD_LOGIC;
    signal ap_ST_fsm_state46_blk : STD_LOGIC;
    signal ap_ST_fsm_state47_blk : STD_LOGIC;
    signal ap_ST_fsm_state48_blk : STD_LOGIC;
    signal ap_ST_fsm_state49_blk : STD_LOGIC;
    signal ap_ST_fsm_state50_blk : STD_LOGIC;
    signal ap_ST_fsm_state51_blk : STD_LOGIC;
    signal ap_ST_fsm_state52_blk : STD_LOGIC;
    signal ap_ST_fsm_state53_blk : STD_LOGIC;
    signal ap_ST_fsm_state54_blk : STD_LOGIC;
    signal ap_ST_fsm_state55_blk : STD_LOGIC;
    signal ap_ST_fsm_state56_blk : STD_LOGIC;
    signal ap_ST_fsm_state57_blk : STD_LOGIC;
    signal ap_ST_fsm_state58_blk : STD_LOGIC;
    signal ap_ST_fsm_state59_blk : STD_LOGIC;
    signal ap_ST_fsm_state60_blk : STD_LOGIC;
    signal ap_ST_fsm_state61_blk : STD_LOGIC;
    signal ap_ST_fsm_state62_blk : STD_LOGIC;
    signal ap_ST_fsm_state63_blk : STD_LOGIC;
    signal ap_ST_fsm_state64_blk : STD_LOGIC;
    signal ap_ST_fsm_state65_blk : STD_LOGIC;
    signal ap_ST_fsm_state66_blk : STD_LOGIC;
    signal ap_ST_fsm_state67_blk : STD_LOGIC;
    signal ap_ST_fsm_state68_blk : STD_LOGIC;
    signal ap_ST_fsm_state69_blk : STD_LOGIC;
    signal ap_ST_fsm_state70_blk : STD_LOGIC;
    signal ap_ST_fsm_state71_blk : STD_LOGIC;
    signal ap_ST_fsm_state72_blk : STD_LOGIC;
    signal ap_ST_fsm_state73_blk : STD_LOGIC;
    signal ap_ST_fsm_state74_blk : STD_LOGIC;
    signal ap_ST_fsm_state75_blk : STD_LOGIC;
    signal ap_ST_fsm_state76_blk : STD_LOGIC;
    signal ap_ST_fsm_state77_blk : STD_LOGIC;
    signal ap_ST_fsm_state78_blk : STD_LOGIC;
    signal ap_ST_fsm_state79_blk : STD_LOGIC;
    signal ap_ST_fsm_state80_blk : STD_LOGIC;
    signal ap_ST_fsm_state81_blk : STD_LOGIC;
    signal ap_ST_fsm_state82_blk : STD_LOGIC;
    signal ap_ST_fsm_state83_blk : STD_LOGIC;
    signal ap_ST_fsm_state84_blk : STD_LOGIC;
    signal ap_ST_fsm_state85_blk : STD_LOGIC;
    signal ap_ST_fsm_state86_blk : STD_LOGIC;
    signal ap_ST_fsm_state87_blk : STD_LOGIC;
    signal output_r_TDATA_int_regslice : STD_LOGIC_VECTOR (383 downto 0);
    signal output_r_TVALID_int_regslice : STD_LOGIC;
    signal output_r_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_output_r_U_vld_out : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component fit_mul_64s_44s_96_5_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (43 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (95 downto 0) );
    end component;


    component fit_mul_64s_64s_128_5_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (127 downto 0) );
    end component;


    component fit_mul_128s_64s_128_5_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (127 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (127 downto 0) );
    end component;


    component fit_sdiv_64ns_13s_64_68_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (12 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component fit_regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    mul_64s_44s_96_5_1_U58 : component fit_mul_64s_44s_96_5_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 44,
        dout_WIDTH => 96)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => r_b_1_fu_134,
        din1 => shl_ln181_1_fu_302_p3,
        ce => ap_const_logic_1,
        dout => grp_fu_209_p2);

    mul_64s_64s_128_5_1_U59 : component fit_mul_64s_64s_128_5_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 128)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => trunc_ln_reg_607,
        din1 => sigmaSquaredDiv1_read_reg_577,
        ce => ap_const_logic_1,
        dout => grp_fu_213_p2);

    mul_128s_64s_128_5_1_U60 : component fit_mul_128s_64s_128_5_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 128,
        din1_WIDTH => 64,
        dout_WIDTH => 128)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => mul_ln182_reg_623,
        din1 => grp_fu_217_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_217_p2);

    sdiv_64ns_13s_64_68_1_U61 : component fit_sdiv_64ns_13s_64_68_1
    generic map (
        ID => 1,
        NUM_STAGE => 68,
        din0_WIDTH => 64,
        din1_WIDTH => 13,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => trunc_ln3_reg_628,
        din1 => add_ln188_fu_394_p2,
        ce => grp_fu_404_ce,
        dout => grp_fu_404_p2);

    regslice_both_output_r_U : component fit_regslice_both
    generic map (
        DataWidth => 384)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => output_r_TDATA_int_regslice,
        vld_in => output_r_TVALID_int_regslice,
        ack_in => output_r_TREADY_int_regslice,
        data_out => output_r_TDATA,
        vld_out => regslice_both_output_r_U_vld_out,
        ack_out => output_r_TREADY,
        apdone_blk => regslice_both_output_r_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((not(((regslice_both_output_r_U_apdone_blk = ap_const_logic_1) or (ap_const_boolean_1 = ap_block_state87_io) or ((ap_predicate_op233_read_state87 = ap_const_boolean_1) and (resultStream_empty_n = ap_const_logic_0)) or ((ap_predicate_op230_write_state87 = ap_const_boolean_1) and (output_r_TREADY_int_regslice = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state87) and ((grp_nbreadreq_fu_152_p3 = ap_const_lv1_0) or (tmp_reg_527 = ap_const_lv1_0)))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    r_a_1_fu_130_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (resultStream_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1) and (grp_nbreadreq_fu_152_p3 = ap_const_lv1_1))) then 
                r_a_1_fu_130 <= resultStream_dout(75 downto 12);
            elsif ((not(((regslice_both_output_r_U_apdone_blk = ap_const_logic_1) or (ap_const_boolean_1 = ap_block_state87_io) or ((ap_predicate_op233_read_state87 = ap_const_boolean_1) and (resultStream_empty_n = ap_const_logic_0)) or ((ap_predicate_op230_write_state87 = ap_const_boolean_1) and (output_r_TREADY_int_regslice = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state87) and (icmp_ln186_reg_582 = ap_const_lv1_0) and (tmp_reg_527 = ap_const_lv1_1))) then 
                r_a_1_fu_130 <= tmp_3_fu_445_p4(127 downto 64);
            end if; 
        end if;
    end process;

    r_b_1_fu_134_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (resultStream_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1) and (grp_nbreadreq_fu_152_p3 = ap_const_lv1_1))) then 
                r_b_1_fu_134 <= resultStream_dout(139 downto 76);
            elsif ((not(((regslice_both_output_r_U_apdone_blk = ap_const_logic_1) or (ap_const_boolean_1 = ap_block_state87_io) or ((ap_predicate_op233_read_state87 = ap_const_boolean_1) and (resultStream_empty_n = ap_const_logic_0)) or ((ap_predicate_op230_write_state87 = ap_const_boolean_1) and (output_r_TREADY_int_regslice = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state87) and (icmp_ln186_reg_582 = ap_const_lv1_0) and (tmp_reg_527 = ap_const_lv1_1))) then 
                r_b_1_fu_134 <= tmp_3_fu_445_p4(191 downto 128);
            end if; 
        end if;
    end process;

    r_n_1_fu_126_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (resultStream_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1) and (grp_nbreadreq_fu_152_p3 = ap_const_lv1_1))) then 
                r_n_1_fu_126 <= n;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state18) and (icmp_ln186_reg_582 = ap_const_lv1_1))) then 
                r_n_1_fu_126 <= r_n_fu_380_p2;
            elsif ((not(((regslice_both_output_r_U_apdone_blk = ap_const_logic_1) or (ap_const_boolean_1 = ap_block_state87_io) or ((ap_predicate_op233_read_state87 = ap_const_boolean_1) and (resultStream_empty_n = ap_const_logic_0)) or ((ap_predicate_op230_write_state87 = ap_const_boolean_1) and (output_r_TREADY_int_regslice = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state87) and (icmp_ln186_reg_582 = ap_const_lv1_0) and (tmp_reg_527 = ap_const_lv1_1))) then 
                r_n_1_fu_126 <= ap_const_lv12_0;
            end if; 
        end if;
    end process;

    r_sigmaA_1_fu_138_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (resultStream_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1) and (grp_nbreadreq_fu_152_p3 = ap_const_lv1_1))) then 
                r_sigmaA_1_fu_138 <= resultStream_dout(203 downto 140);
            elsif ((not(((regslice_both_output_r_U_apdone_blk = ap_const_logic_1) or (ap_const_boolean_1 = ap_block_state87_io) or ((ap_predicate_op233_read_state87 = ap_const_boolean_1) and (resultStream_empty_n = ap_const_logic_0)) or ((ap_predicate_op230_write_state87 = ap_const_boolean_1) and (output_r_TREADY_int_regslice = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state87) and (icmp_ln186_reg_582 = ap_const_lv1_0) and (tmp_reg_527 = ap_const_lv1_1))) then 
                r_sigmaA_1_fu_138 <= tmp_3_fu_445_p4(255 downto 192);
            end if; 
        end if;
    end process;

    r_sigmaB_1_fu_142_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (resultStream_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1) and (grp_nbreadreq_fu_152_p3 = ap_const_lv1_1))) then 
                r_sigmaB_1_fu_142 <= resultStream_dout(267 downto 204);
            elsif ((not(((regslice_both_output_r_U_apdone_blk = ap_const_logic_1) or (ap_const_boolean_1 = ap_block_state87_io) or ((ap_predicate_op233_read_state87 = ap_const_boolean_1) and (resultStream_empty_n = ap_const_logic_0)) or ((ap_predicate_op230_write_state87 = ap_const_boolean_1) and (output_r_TREADY_int_regslice = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state87) and (icmp_ln186_reg_582 = ap_const_lv1_0) and (tmp_reg_527 = ap_const_lv1_1))) then 
                r_sigmaB_1_fu_142 <= tmp_3_fu_445_p4(319 downto 256);
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((last3_empty_n = ap_const_logic_0) or (sigmaSquaredDiv1_empty_n = ap_const_logic_0) or (y2_empty_n = ap_const_logic_0) or (x2_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                icmp_ln186_reg_582 <= icmp_ln186_fu_293_p2;
                sigmaSquaredDiv1_read_reg_577 <= sigmaSquaredDiv1_dout;
                x2_read_reg_572 <= x2_dout;
                y2_read_reg_567 <= y2_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                mul_ln181_reg_599 <= grp_fu_209_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                mul_ln182_reg_623 <= grp_fu_213_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((regslice_both_output_r_U_apdone_blk = ap_const_logic_1) or (ap_const_boolean_1 = ap_block_state87_io) or ((ap_predicate_op233_read_state87 = ap_const_boolean_1) and (resultStream_empty_n = ap_const_logic_0)) or ((ap_predicate_op230_write_state87 = ap_const_boolean_1) and (output_r_TREADY_int_regslice = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state87) and (grp_nbreadreq_fu_152_p3 = ap_const_lv1_0) and (tmp_reg_527 = ap_const_lv1_1))) then
                n <= grp_load_fu_221_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then
                r_n_reg_633 <= r_n_fu_380_p2;
                trunc_ln3_reg_628 <= grp_fu_217_p2(127 downto 64);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                sext_ln182_reg_612 <= sext_ln182_fu_362_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (resultStream_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                tmp_reg_527 <= grp_nbreadreq_fu_152_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                trunc_ln_reg_607 <= sub_ln181_1_fu_347_p2(95 downto 32);
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, resultStream_empty_n, x2_empty_n, y2_empty_n, sigmaSquaredDiv1_empty_n, last3_empty_n, ap_CS_fsm_state87, tmp_reg_527, icmp_ln186_reg_582, ap_CS_fsm_state2, ap_CS_fsm_state86, grp_nbreadreq_fu_152_p3, ap_CS_fsm_state18, ap_predicate_op230_write_state87, ap_predicate_op233_read_state87, regslice_both_output_r_U_apdone_blk, ap_block_state87_io, output_r_TREADY_int_regslice)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (resultStream_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1) and (grp_nbreadreq_fu_152_p3 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                elsif ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (resultStream_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1) and (grp_nbreadreq_fu_152_p3 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state87;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if ((not(((last3_empty_n = ap_const_logic_0) or (sigmaSquaredDiv1_empty_n = ap_const_logic_0) or (y2_empty_n = ap_const_logic_0) or (x2_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state18) and (icmp_ln186_reg_582 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state87;
                else
                    ap_NS_fsm <= ap_ST_fsm_state19;
                end if;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state57;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when ap_ST_fsm_state58 => 
                ap_NS_fsm <= ap_ST_fsm_state59;
            when ap_ST_fsm_state59 => 
                ap_NS_fsm <= ap_ST_fsm_state60;
            when ap_ST_fsm_state60 => 
                ap_NS_fsm <= ap_ST_fsm_state61;
            when ap_ST_fsm_state61 => 
                ap_NS_fsm <= ap_ST_fsm_state62;
            when ap_ST_fsm_state62 => 
                ap_NS_fsm <= ap_ST_fsm_state63;
            when ap_ST_fsm_state63 => 
                ap_NS_fsm <= ap_ST_fsm_state64;
            when ap_ST_fsm_state64 => 
                ap_NS_fsm <= ap_ST_fsm_state65;
            when ap_ST_fsm_state65 => 
                ap_NS_fsm <= ap_ST_fsm_state66;
            when ap_ST_fsm_state66 => 
                ap_NS_fsm <= ap_ST_fsm_state67;
            when ap_ST_fsm_state67 => 
                ap_NS_fsm <= ap_ST_fsm_state68;
            when ap_ST_fsm_state68 => 
                ap_NS_fsm <= ap_ST_fsm_state69;
            when ap_ST_fsm_state69 => 
                ap_NS_fsm <= ap_ST_fsm_state70;
            when ap_ST_fsm_state70 => 
                ap_NS_fsm <= ap_ST_fsm_state71;
            when ap_ST_fsm_state71 => 
                ap_NS_fsm <= ap_ST_fsm_state72;
            when ap_ST_fsm_state72 => 
                ap_NS_fsm <= ap_ST_fsm_state73;
            when ap_ST_fsm_state73 => 
                ap_NS_fsm <= ap_ST_fsm_state74;
            when ap_ST_fsm_state74 => 
                ap_NS_fsm <= ap_ST_fsm_state75;
            when ap_ST_fsm_state75 => 
                ap_NS_fsm <= ap_ST_fsm_state76;
            when ap_ST_fsm_state76 => 
                ap_NS_fsm <= ap_ST_fsm_state77;
            when ap_ST_fsm_state77 => 
                ap_NS_fsm <= ap_ST_fsm_state78;
            when ap_ST_fsm_state78 => 
                ap_NS_fsm <= ap_ST_fsm_state79;
            when ap_ST_fsm_state79 => 
                ap_NS_fsm <= ap_ST_fsm_state80;
            when ap_ST_fsm_state80 => 
                ap_NS_fsm <= ap_ST_fsm_state81;
            when ap_ST_fsm_state81 => 
                ap_NS_fsm <= ap_ST_fsm_state82;
            when ap_ST_fsm_state82 => 
                ap_NS_fsm <= ap_ST_fsm_state83;
            when ap_ST_fsm_state83 => 
                ap_NS_fsm <= ap_ST_fsm_state84;
            when ap_ST_fsm_state84 => 
                ap_NS_fsm <= ap_ST_fsm_state85;
            when ap_ST_fsm_state85 => 
                ap_NS_fsm <= ap_ST_fsm_state86;
            when ap_ST_fsm_state86 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state86) and (output_r_TREADY_int_regslice = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state87;
                else
                    ap_NS_fsm <= ap_ST_fsm_state86;
                end if;
            when ap_ST_fsm_state87 => 
                if ((not(((regslice_both_output_r_U_apdone_blk = ap_const_logic_1) or (ap_const_boolean_1 = ap_block_state87_io) or ((ap_predicate_op233_read_state87 = ap_const_boolean_1) and (resultStream_empty_n = ap_const_logic_0)) or ((ap_predicate_op230_write_state87 = ap_const_boolean_1) and (output_r_TREADY_int_regslice = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state87) and ((grp_nbreadreq_fu_152_p3 = ap_const_lv1_0) or (tmp_reg_527 = ap_const_lv1_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                elsif ((not(((regslice_both_output_r_U_apdone_blk = ap_const_logic_1) or (ap_const_boolean_1 = ap_block_state87_io) or ((ap_predicate_op233_read_state87 = ap_const_boolean_1) and (resultStream_empty_n = ap_const_logic_0)) or ((ap_predicate_op230_write_state87 = ap_const_boolean_1) and (output_r_TREADY_int_regslice = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state87) and (grp_nbreadreq_fu_152_p3 = ap_const_lv1_1) and (tmp_reg_527 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state87;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln188_fu_394_p2 <= std_logic_vector(signed(sext_ln188_fu_391_p1) + signed(ap_const_lv13_1FFE));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state86 <= ap_CS_fsm(85);
    ap_CS_fsm_state87 <= ap_CS_fsm(86);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
    ap_ST_fsm_state10_blk <= ap_const_logic_0;
    ap_ST_fsm_state11_blk <= ap_const_logic_0;
    ap_ST_fsm_state12_blk <= ap_const_logic_0;
    ap_ST_fsm_state13_blk <= ap_const_logic_0;
    ap_ST_fsm_state14_blk <= ap_const_logic_0;
    ap_ST_fsm_state15_blk <= ap_const_logic_0;
    ap_ST_fsm_state16_blk <= ap_const_logic_0;
    ap_ST_fsm_state17_blk <= ap_const_logic_0;
    ap_ST_fsm_state18_blk <= ap_const_logic_0;
    ap_ST_fsm_state19_blk <= ap_const_logic_0;

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start, ap_done_reg, resultStream_empty_n)
    begin
        if (((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (resultStream_empty_n = ap_const_logic_0))) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state20_blk <= ap_const_logic_0;
    ap_ST_fsm_state21_blk <= ap_const_logic_0;
    ap_ST_fsm_state22_blk <= ap_const_logic_0;
    ap_ST_fsm_state23_blk <= ap_const_logic_0;
    ap_ST_fsm_state24_blk <= ap_const_logic_0;
    ap_ST_fsm_state25_blk <= ap_const_logic_0;
    ap_ST_fsm_state26_blk <= ap_const_logic_0;
    ap_ST_fsm_state27_blk <= ap_const_logic_0;
    ap_ST_fsm_state28_blk <= ap_const_logic_0;
    ap_ST_fsm_state29_blk <= ap_const_logic_0;

    ap_ST_fsm_state2_blk_assign_proc : process(x2_empty_n, y2_empty_n, sigmaSquaredDiv1_empty_n, last3_empty_n)
    begin
        if (((last3_empty_n = ap_const_logic_0) or (sigmaSquaredDiv1_empty_n = ap_const_logic_0) or (y2_empty_n = ap_const_logic_0) or (x2_empty_n = ap_const_logic_0))) then 
            ap_ST_fsm_state2_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state2_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state30_blk <= ap_const_logic_0;
    ap_ST_fsm_state31_blk <= ap_const_logic_0;
    ap_ST_fsm_state32_blk <= ap_const_logic_0;
    ap_ST_fsm_state33_blk <= ap_const_logic_0;
    ap_ST_fsm_state34_blk <= ap_const_logic_0;
    ap_ST_fsm_state35_blk <= ap_const_logic_0;
    ap_ST_fsm_state36_blk <= ap_const_logic_0;
    ap_ST_fsm_state37_blk <= ap_const_logic_0;
    ap_ST_fsm_state38_blk <= ap_const_logic_0;
    ap_ST_fsm_state39_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state40_blk <= ap_const_logic_0;
    ap_ST_fsm_state41_blk <= ap_const_logic_0;
    ap_ST_fsm_state42_blk <= ap_const_logic_0;
    ap_ST_fsm_state43_blk <= ap_const_logic_0;
    ap_ST_fsm_state44_blk <= ap_const_logic_0;
    ap_ST_fsm_state45_blk <= ap_const_logic_0;
    ap_ST_fsm_state46_blk <= ap_const_logic_0;
    ap_ST_fsm_state47_blk <= ap_const_logic_0;
    ap_ST_fsm_state48_blk <= ap_const_logic_0;
    ap_ST_fsm_state49_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state50_blk <= ap_const_logic_0;
    ap_ST_fsm_state51_blk <= ap_const_logic_0;
    ap_ST_fsm_state52_blk <= ap_const_logic_0;
    ap_ST_fsm_state53_blk <= ap_const_logic_0;
    ap_ST_fsm_state54_blk <= ap_const_logic_0;
    ap_ST_fsm_state55_blk <= ap_const_logic_0;
    ap_ST_fsm_state56_blk <= ap_const_logic_0;
    ap_ST_fsm_state57_blk <= ap_const_logic_0;
    ap_ST_fsm_state58_blk <= ap_const_logic_0;
    ap_ST_fsm_state59_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state60_blk <= ap_const_logic_0;
    ap_ST_fsm_state61_blk <= ap_const_logic_0;
    ap_ST_fsm_state62_blk <= ap_const_logic_0;
    ap_ST_fsm_state63_blk <= ap_const_logic_0;
    ap_ST_fsm_state64_blk <= ap_const_logic_0;
    ap_ST_fsm_state65_blk <= ap_const_logic_0;
    ap_ST_fsm_state66_blk <= ap_const_logic_0;
    ap_ST_fsm_state67_blk <= ap_const_logic_0;
    ap_ST_fsm_state68_blk <= ap_const_logic_0;
    ap_ST_fsm_state69_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state70_blk <= ap_const_logic_0;
    ap_ST_fsm_state71_blk <= ap_const_logic_0;
    ap_ST_fsm_state72_blk <= ap_const_logic_0;
    ap_ST_fsm_state73_blk <= ap_const_logic_0;
    ap_ST_fsm_state74_blk <= ap_const_logic_0;
    ap_ST_fsm_state75_blk <= ap_const_logic_0;
    ap_ST_fsm_state76_blk <= ap_const_logic_0;
    ap_ST_fsm_state77_blk <= ap_const_logic_0;
    ap_ST_fsm_state78_blk <= ap_const_logic_0;
    ap_ST_fsm_state79_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state80_blk <= ap_const_logic_0;
    ap_ST_fsm_state81_blk <= ap_const_logic_0;
    ap_ST_fsm_state82_blk <= ap_const_logic_0;
    ap_ST_fsm_state83_blk <= ap_const_logic_0;
    ap_ST_fsm_state84_blk <= ap_const_logic_0;
    ap_ST_fsm_state85_blk <= ap_const_logic_0;

    ap_ST_fsm_state86_blk_assign_proc : process(output_r_TREADY_int_regslice)
    begin
        if ((output_r_TREADY_int_regslice = ap_const_logic_0)) then 
            ap_ST_fsm_state86_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state86_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state87_blk_assign_proc : process(resultStream_empty_n, ap_predicate_op230_write_state87, ap_predicate_op233_read_state87, regslice_both_output_r_U_apdone_blk, ap_block_state87_io, output_r_TREADY_int_regslice)
    begin
        if (((regslice_both_output_r_U_apdone_blk = ap_const_logic_1) or (ap_const_boolean_1 = ap_block_state87_io) or ((ap_predicate_op233_read_state87 = ap_const_boolean_1) and (resultStream_empty_n = ap_const_logic_0)) or ((ap_predicate_op230_write_state87 = ap_const_boolean_1) and (output_r_TREADY_int_regslice = ap_const_logic_0)))) then 
            ap_ST_fsm_state87_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state87_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, resultStream_empty_n)
    begin
                ap_block_state1 <= ((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (resultStream_empty_n = ap_const_logic_0));
    end process;


    ap_block_state2_assign_proc : process(x2_empty_n, y2_empty_n, sigmaSquaredDiv1_empty_n, last3_empty_n)
    begin
                ap_block_state2 <= ((last3_empty_n = ap_const_logic_0) or (sigmaSquaredDiv1_empty_n = ap_const_logic_0) or (y2_empty_n = ap_const_logic_0) or (x2_empty_n = ap_const_logic_0));
    end process;


    ap_block_state87_assign_proc : process(resultStream_empty_n, ap_predicate_op230_write_state87, ap_predicate_op233_read_state87, regslice_both_output_r_U_apdone_blk, output_r_TREADY_int_regslice)
    begin
                ap_block_state87 <= ((regslice_both_output_r_U_apdone_blk = ap_const_logic_1) or ((ap_predicate_op233_read_state87 = ap_const_boolean_1) and (resultStream_empty_n = ap_const_logic_0)) or ((ap_predicate_op230_write_state87 = ap_const_boolean_1) and (output_r_TREADY_int_regslice = ap_const_logic_0)));
    end process;


    ap_block_state87_io_assign_proc : process(ap_predicate_op230_write_state87, output_r_TREADY_int_regslice)
    begin
                ap_block_state87_io <= ((ap_predicate_op230_write_state87 = ap_const_boolean_1) and (output_r_TREADY_int_regslice = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_done_reg, resultStream_empty_n, ap_CS_fsm_state87, tmp_reg_527, grp_nbreadreq_fu_152_p3, ap_predicate_op230_write_state87, ap_predicate_op233_read_state87, regslice_both_output_r_U_apdone_blk, ap_block_state87_io, output_r_TREADY_int_regslice)
    begin
        if ((not(((regslice_both_output_r_U_apdone_blk = ap_const_logic_1) or (ap_const_boolean_1 = ap_block_state87_io) or ((ap_predicate_op233_read_state87 = ap_const_boolean_1) and (resultStream_empty_n = ap_const_logic_0)) or ((ap_predicate_op230_write_state87 = ap_const_boolean_1) and (output_r_TREADY_int_regslice = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state87) and ((grp_nbreadreq_fu_152_p3 = ap_const_lv1_0) or (tmp_reg_527 = ap_const_lv1_0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_predicate_op230_write_state87_assign_proc : process(tmp_reg_527, icmp_ln186_reg_582)
    begin
                ap_predicate_op230_write_state87 <= ((icmp_ln186_reg_582 = ap_const_lv1_0) and (tmp_reg_527 = ap_const_lv1_1));
    end process;


    ap_predicate_op233_read_state87_assign_proc : process(tmp_reg_527, icmp_ln186_reg_582, tmp_s_nbreadreq_fu_191_p3)
    begin
                ap_predicate_op233_read_state87 <= ((tmp_s_nbreadreq_fu_191_p3 = ap_const_lv1_1) and (icmp_ln186_reg_582 = ap_const_lv1_0) and (tmp_reg_527 = ap_const_lv1_1));
    end process;


    ap_ready_assign_proc : process(resultStream_empty_n, ap_CS_fsm_state87, tmp_reg_527, grp_nbreadreq_fu_152_p3, ap_predicate_op230_write_state87, ap_predicate_op233_read_state87, regslice_both_output_r_U_apdone_blk, ap_block_state87_io, output_r_TREADY_int_regslice)
    begin
        if ((not(((regslice_both_output_r_U_apdone_blk = ap_const_logic_1) or (ap_const_boolean_1 = ap_block_state87_io) or ((ap_predicate_op233_read_state87 = ap_const_boolean_1) and (resultStream_empty_n = ap_const_logic_0)) or ((ap_predicate_op230_write_state87 = ap_const_boolean_1) and (output_r_TREADY_int_regslice = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state87) and ((grp_nbreadreq_fu_152_p3 = ap_const_lv1_0) or (tmp_reg_527 = ap_const_lv1_0)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_r_n_1_load_1_assign_proc : process(ap_CS_fsm_state87, tmp_reg_527, icmp_ln186_reg_582, r_n_1_fu_126)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state87) and (icmp_ln186_reg_582 = ap_const_lv1_0) and (tmp_reg_527 = ap_const_lv1_1))) then 
            ap_sig_allocacmp_r_n_1_load_1 <= ap_const_lv12_0;
        else 
            ap_sig_allocacmp_r_n_1_load_1 <= r_n_1_fu_126;
        end if; 
    end process;

    grp_fu_217_p1 <= sext_ln182_reg_612(64 - 1 downto 0);

    grp_fu_404_ce_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state87, ap_CS_fsm_state2, ap_CS_fsm_state86, ap_CS_fsm_state3, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state13, ap_CS_fsm_state18, ap_CS_fsm_state14, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, output_r_TREADY_int_regslice)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state87) or (ap_const_logic_1 = ap_CS_fsm_state1) or ((ap_const_logic_1 = ap_CS_fsm_state86) and (output_r_TREADY_int_regslice = ap_const_logic_0)))) then 
            grp_fu_404_ce <= ap_const_logic_0;
        else 
            grp_fu_404_ce <= ap_const_logic_1;
        end if; 
    end process;


    grp_load_fu_221_p1_assign_proc : process(ap_CS_fsm_state87, tmp_reg_527, grp_nbreadreq_fu_152_p3, ap_CS_fsm_state18, r_n_1_fu_126, ap_sig_allocacmp_r_n_1_load_1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state87) and (grp_nbreadreq_fu_152_p3 = ap_const_lv1_0) and (tmp_reg_527 = ap_const_lv1_1))) then 
            grp_load_fu_221_p1 <= ap_sig_allocacmp_r_n_1_load_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            grp_load_fu_221_p1 <= r_n_1_fu_126;
        else 
            grp_load_fu_221_p1 <= "XXXXXXXXXXXX";
        end if; 
    end process;

    grp_nbreadreq_fu_152_p3 <= (0=>(last3_empty_n), others=>'-');
    icmp_ln186_fu_293_p2 <= "1" when (last3_dout = ap_const_lv2_0) else "0";

    last3_blk_n_assign_proc : process(last3_empty_n, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            last3_blk_n <= last3_empty_n;
        else 
            last3_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    last3_read_assign_proc : process(x2_empty_n, y2_empty_n, sigmaSquaredDiv1_empty_n, last3_empty_n, ap_CS_fsm_state2)
    begin
        if ((not(((last3_empty_n = ap_const_logic_0) or (sigmaSquaredDiv1_empty_n = ap_const_logic_0) or (y2_empty_n = ap_const_logic_0) or (x2_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            last3_read <= ap_const_logic_1;
        else 
            last3_read <= ap_const_logic_0;
        end if; 
    end process;

    or_ln190_4_fu_415_p4 <= r_b_1_fu_134;

    output_r_TDATA_blk_n_assign_proc : process(ap_CS_fsm_state87, tmp_reg_527, icmp_ln186_reg_582, ap_CS_fsm_state86, output_r_TREADY_int_regslice)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state86) or ((ap_const_logic_1 = ap_CS_fsm_state87) and (icmp_ln186_reg_582 = ap_const_lv1_0) and (tmp_reg_527 = ap_const_lv1_1)))) then 
            output_r_TDATA_blk_n <= output_r_TREADY_int_regslice;
        else 
            output_r_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    output_r_TDATA_int_regslice <= ((((((grp_fu_404_p2 & r_sigmaB_1_fu_142) & r_sigmaA_1_fu_138) & or_ln190_4_fu_415_p4) & r_a_1_fu_130) & ap_const_lv52_0) & r_n_reg_633);
    output_r_TVALID <= regslice_both_output_r_U_vld_out;

    output_r_TVALID_int_regslice_assign_proc : process(ap_CS_fsm_state86, output_r_TREADY_int_regslice)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state86) and (output_r_TREADY_int_regslice = ap_const_logic_1))) then 
            output_r_TVALID_int_regslice <= ap_const_logic_1;
        else 
            output_r_TVALID_int_regslice <= ap_const_logic_0;
        end if; 
    end process;

    r_n_fu_380_p2 <= std_logic_vector(unsigned(grp_load_fu_221_p1) + unsigned(ap_const_lv12_1));

    resultStream_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, resultStream_empty_n, ap_CS_fsm_state87, tmp_reg_527, icmp_ln186_reg_582, tmp_s_nbreadreq_fu_191_p3)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state87) and (tmp_s_nbreadreq_fu_191_p3 = ap_const_lv1_1) and (icmp_ln186_reg_582 = ap_const_lv1_0) and (tmp_reg_527 = ap_const_lv1_1)) or (not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            resultStream_blk_n <= resultStream_empty_n;
        else 
            resultStream_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    resultStream_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, resultStream_empty_n, ap_CS_fsm_state87, ap_predicate_op230_write_state87, ap_predicate_op233_read_state87, regslice_both_output_r_U_apdone_blk, ap_block_state87_io, output_r_TREADY_int_regslice)
    begin
        if (((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (resultStream_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1)) or (not(((regslice_both_output_r_U_apdone_blk = ap_const_logic_1) or (ap_const_boolean_1 = ap_block_state87_io) or ((ap_predicate_op233_read_state87 = ap_const_boolean_1) and (resultStream_empty_n = ap_const_logic_0)) or ((ap_predicate_op230_write_state87 = ap_const_boolean_1) and (output_r_TREADY_int_regslice = ap_const_logic_0)))) and (ap_predicate_op233_read_state87 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_state87)))) then 
            resultStream_read <= ap_const_logic_1;
        else 
            resultStream_read <= ap_const_logic_0;
        end if; 
    end process;

        sext_ln181_fu_329_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln_fu_322_p3),64));

        sext_ln182_fu_362_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln_reg_607),128));

        sext_ln188_fu_391_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_n_reg_633),13));

    shl_ln181_1_fu_302_p3 <= (x2_read_reg_572 & ap_const_lv32_0);
    shl_ln181_2_fu_339_p3 <= (sub_ln181_fu_333_p2 & ap_const_lv32_0);
    shl_ln_fu_322_p3 <= (y2_read_reg_567 & ap_const_lv32_0);

    sigmaSquaredDiv1_blk_n_assign_proc : process(sigmaSquaredDiv1_empty_n, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sigmaSquaredDiv1_blk_n <= sigmaSquaredDiv1_empty_n;
        else 
            sigmaSquaredDiv1_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    sigmaSquaredDiv1_read_assign_proc : process(x2_empty_n, y2_empty_n, sigmaSquaredDiv1_empty_n, last3_empty_n, ap_CS_fsm_state2)
    begin
        if ((not(((last3_empty_n = ap_const_logic_0) or (sigmaSquaredDiv1_empty_n = ap_const_logic_0) or (y2_empty_n = ap_const_logic_0) or (x2_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            sigmaSquaredDiv1_read <= ap_const_logic_1;
        else 
            sigmaSquaredDiv1_read <= ap_const_logic_0;
        end if; 
    end process;

    sub_ln181_1_fu_347_p2 <= std_logic_vector(unsigned(shl_ln181_2_fu_339_p3) - unsigned(mul_ln181_reg_599));
    sub_ln181_fu_333_p2 <= std_logic_vector(signed(sext_ln181_fu_329_p1) - signed(r_a_1_fu_130));
    tmp_3_fu_445_p4 <= ((tmp_5_fu_435_p4 & ap_const_lv52_0) & trunc_ln196_fu_431_p1);
    tmp_5_fu_435_p4 <= resultStream_dout(267 downto 12);
    tmp_s_nbreadreq_fu_191_p3 <= (0=>(resultStream_empty_n), others=>'-');
    trunc_ln196_fu_431_p1 <= resultStream_dout(12 - 1 downto 0);

    x2_blk_n_assign_proc : process(x2_empty_n, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            x2_blk_n <= x2_empty_n;
        else 
            x2_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    x2_read_assign_proc : process(x2_empty_n, y2_empty_n, sigmaSquaredDiv1_empty_n, last3_empty_n, ap_CS_fsm_state2)
    begin
        if ((not(((last3_empty_n = ap_const_logic_0) or (sigmaSquaredDiv1_empty_n = ap_const_logic_0) or (y2_empty_n = ap_const_logic_0) or (x2_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            x2_read <= ap_const_logic_1;
        else 
            x2_read <= ap_const_logic_0;
        end if; 
    end process;


    y2_blk_n_assign_proc : process(y2_empty_n, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            y2_blk_n <= y2_empty_n;
        else 
            y2_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    y2_read_assign_proc : process(x2_empty_n, y2_empty_n, sigmaSquaredDiv1_empty_n, last3_empty_n, ap_CS_fsm_state2)
    begin
        if ((not(((last3_empty_n = ap_const_logic_0) or (sigmaSquaredDiv1_empty_n = ap_const_logic_0) or (y2_empty_n = ap_const_logic_0) or (x2_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            y2_read <= ap_const_logic_1;
        else 
            y2_read <= ap_const_logic_0;
        end if; 
    end process;

end behav;
