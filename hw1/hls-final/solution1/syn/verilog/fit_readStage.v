// ==============================================================
// Generated by Vitis HLS v2023.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module fit_readStage (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        input_r_TVALID,
        x1_din,
        x1_num_data_valid,
        x1_fifo_cap,
        x1_full_n,
        x1_write,
        x2_din,
        x2_num_data_valid,
        x2_fifo_cap,
        x2_full_n,
        x2_write,
        y1_din,
        y1_num_data_valid,
        y1_fifo_cap,
        y1_full_n,
        y1_write,
        y2_din,
        y2_num_data_valid,
        y2_fifo_cap,
        y2_full_n,
        y2_write,
        sigmaDiv1_din,
        sigmaDiv1_num_data_valid,
        sigmaDiv1_fifo_cap,
        sigmaDiv1_full_n,
        sigmaDiv1_write,
        sigmaSquaredDiv1_din,
        sigmaSquaredDiv1_num_data_valid,
        sigmaSquaredDiv1_fifo_cap,
        sigmaSquaredDiv1_full_n,
        sigmaSquaredDiv1_write,
        last1_din,
        last1_num_data_valid,
        last1_fifo_cap,
        last1_full_n,
        last1_write,
        last2_din,
        last2_num_data_valid,
        last2_fifo_cap,
        last2_full_n,
        last2_write,
        last3_din,
        last3_num_data_valid,
        last3_fifo_cap,
        last3_full_n,
        last3_write,
        partialS_din,
        partialS_num_data_valid,
        partialS_fifo_cap,
        partialS_full_n,
        partialS_write,
        partialSx_din,
        partialSx_num_data_valid,
        partialSx_fifo_cap,
        partialSx_full_n,
        partialSx_write,
        partialSy_din,
        partialSy_num_data_valid,
        partialSy_fifo_cap,
        partialSy_full_n,
        partialSy_write,
        start_out,
        start_write,
        input_r_TDATA,
        input_r_TREADY
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input   input_r_TVALID;
output  [11:0] x1_din;
input  [4:0] x1_num_data_valid;
input  [4:0] x1_fifo_cap;
input   x1_full_n;
output   x1_write;
output  [11:0] x2_din;
input  [4:0] x2_num_data_valid;
input  [4:0] x2_fifo_cap;
input   x2_full_n;
output   x2_write;
output  [11:0] y1_din;
input  [4:0] y1_num_data_valid;
input  [4:0] y1_fifo_cap;
input   y1_full_n;
output   y1_write;
output  [11:0] y2_din;
input  [4:0] y2_num_data_valid;
input  [4:0] y2_fifo_cap;
input   y2_full_n;
output   y2_write;
output  [63:0] sigmaDiv1_din;
input  [4:0] sigmaDiv1_num_data_valid;
input  [4:0] sigmaDiv1_fifo_cap;
input   sigmaDiv1_full_n;
output   sigmaDiv1_write;
output  [63:0] sigmaSquaredDiv1_din;
input  [4:0] sigmaSquaredDiv1_num_data_valid;
input  [4:0] sigmaSquaredDiv1_fifo_cap;
input   sigmaSquaredDiv1_full_n;
output   sigmaSquaredDiv1_write;
output  [1:0] last1_din;
input  [4:0] last1_num_data_valid;
input  [4:0] last1_fifo_cap;
input   last1_full_n;
output   last1_write;
output  [1:0] last2_din;
input  [4:0] last2_num_data_valid;
input  [4:0] last2_fifo_cap;
input   last2_full_n;
output   last2_write;
output  [1:0] last3_din;
input  [4:0] last3_num_data_valid;
input  [4:0] last3_fifo_cap;
input   last3_full_n;
output   last3_write;
output  [63:0] partialS_din;
input  [4:0] partialS_num_data_valid;
input  [4:0] partialS_fifo_cap;
input   partialS_full_n;
output   partialS_write;
output  [63:0] partialSx_din;
input  [4:0] partialSx_num_data_valid;
input  [4:0] partialSx_fifo_cap;
input   partialSx_full_n;
output   partialSx_write;
output  [63:0] partialSy_din;
input  [4:0] partialSy_num_data_valid;
input  [4:0] partialSy_fifo_cap;
input   partialSy_full_n;
output   partialSy_write;
output   start_out;
output   start_write;
input  [63:0] input_r_TDATA;
output   input_r_TREADY;

reg ap_idle;
reg x1_write;
reg x2_write;
reg y1_write;
reg y2_write;
reg sigmaDiv1_write;
reg sigmaSquaredDiv1_write;
reg last1_write;
reg last2_write;
reg last3_write;
reg partialS_write;
reg partialSx_write;
reg partialSy_write;
reg start_write;

reg    real_start;
reg    start_once_reg;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter11;
reg    ap_enable_reg_pp0_iter12;
reg    ap_enable_reg_pp0_iter13;
reg    ap_enable_reg_pp0_iter14;
reg    ap_enable_reg_pp0_iter15;
reg    ap_enable_reg_pp0_iter16;
reg    ap_enable_reg_pp0_iter17;
reg    ap_enable_reg_pp0_iter18;
reg    ap_enable_reg_pp0_iter19;
reg    ap_enable_reg_pp0_iter20;
reg    ap_enable_reg_pp0_iter21;
reg    ap_enable_reg_pp0_iter22;
reg    ap_enable_reg_pp0_iter23;
reg    ap_enable_reg_pp0_iter24;
reg    ap_enable_reg_pp0_iter25;
reg    ap_enable_reg_pp0_iter26;
reg    ap_enable_reg_pp0_iter27;
reg    ap_enable_reg_pp0_iter28;
reg    ap_enable_reg_pp0_iter29;
reg    ap_enable_reg_pp0_iter30;
reg    ap_enable_reg_pp0_iter31;
reg    ap_enable_reg_pp0_iter32;
reg    ap_enable_reg_pp0_iter33;
reg    ap_enable_reg_pp0_iter34;
reg    ap_enable_reg_pp0_iter35;
reg    ap_enable_reg_pp0_iter36;
reg    ap_enable_reg_pp0_iter37;
reg    ap_enable_reg_pp0_iter38;
reg    ap_enable_reg_pp0_iter39;
reg    ap_enable_reg_pp0_iter40;
reg    ap_idle_pp0;
wire    internal_ap_ready;
wire   [0:0] tmp_nbreadreq_fu_82_p3;
reg    ap_done_reg;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
wire    ap_block_state6_pp0_stage0_iter5;
wire    ap_block_state7_pp0_stage0_iter6;
wire    ap_block_state8_pp0_stage0_iter7;
wire    ap_block_state9_pp0_stage0_iter8;
wire    ap_block_state10_pp0_stage0_iter9;
wire    ap_block_state11_pp0_stage0_iter10;
wire    ap_block_state12_pp0_stage0_iter11;
wire    ap_block_state13_pp0_stage0_iter12;
wire    ap_block_state14_pp0_stage0_iter13;
wire    ap_block_state15_pp0_stage0_iter14;
wire    ap_block_state16_pp0_stage0_iter15;
wire    ap_block_state17_pp0_stage0_iter16;
wire    ap_block_state18_pp0_stage0_iter17;
wire    ap_block_state19_pp0_stage0_iter18;
wire    ap_block_state20_pp0_stage0_iter19;
wire    ap_block_state21_pp0_stage0_iter20;
wire    ap_block_state22_pp0_stage0_iter21;
wire    ap_block_state23_pp0_stage0_iter22;
wire    ap_block_state24_pp0_stage0_iter23;
wire    ap_block_state25_pp0_stage0_iter24;
wire    ap_block_state26_pp0_stage0_iter25;
wire    ap_block_state27_pp0_stage0_iter26;
wire    ap_block_state28_pp0_stage0_iter27;
wire    ap_block_state29_pp0_stage0_iter28;
wire    ap_block_state30_pp0_stage0_iter29;
wire    ap_block_state31_pp0_stage0_iter30;
wire    ap_block_state32_pp0_stage0_iter31;
wire    ap_block_state33_pp0_stage0_iter32;
wire    ap_block_state34_pp0_stage0_iter33;
wire    ap_block_state35_pp0_stage0_iter34;
wire    ap_block_state36_pp0_stage0_iter35;
wire    ap_block_state37_pp0_stage0_iter36;
wire    ap_block_state38_pp0_stage0_iter37;
wire    ap_block_state39_pp0_stage0_iter38;
wire    ap_block_state40_pp0_stage0_iter39;
reg    ap_block_state41_pp0_stage0_iter40;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    input_r_TDATA_blk_n;
wire    ap_block_pp0_stage0;
reg    partialS_blk_n;
reg    partialSx_blk_n;
reg    partialSy_blk_n;
reg    x1_blk_n;
reg    x2_blk_n;
reg    y1_blk_n;
reg    y2_blk_n;
reg    sigmaDiv1_blk_n;
reg    sigmaSquaredDiv1_blk_n;
reg    last1_blk_n;
reg    last2_blk_n;
reg    last3_blk_n;
reg    ap_block_pp0_stage0_11001;
wire  signed [11:0] obs_x_fu_192_p1;
reg  signed [11:0] obs_x_reg_285;
reg  signed [11:0] obs_x_reg_285_pp0_iter1_reg;
reg  signed [11:0] obs_x_reg_285_pp0_iter2_reg;
reg  signed [11:0] obs_x_reg_285_pp0_iter3_reg;
reg  signed [11:0] obs_x_reg_285_pp0_iter4_reg;
reg  signed [11:0] obs_x_reg_285_pp0_iter5_reg;
reg  signed [11:0] obs_x_reg_285_pp0_iter6_reg;
reg  signed [11:0] obs_x_reg_285_pp0_iter7_reg;
reg  signed [11:0] obs_x_reg_285_pp0_iter8_reg;
reg  signed [11:0] obs_x_reg_285_pp0_iter9_reg;
reg  signed [11:0] obs_x_reg_285_pp0_iter10_reg;
reg  signed [11:0] obs_x_reg_285_pp0_iter11_reg;
reg  signed [11:0] obs_x_reg_285_pp0_iter12_reg;
reg  signed [11:0] obs_x_reg_285_pp0_iter13_reg;
reg  signed [11:0] obs_x_reg_285_pp0_iter14_reg;
reg  signed [11:0] obs_x_reg_285_pp0_iter15_reg;
reg  signed [11:0] obs_x_reg_285_pp0_iter16_reg;
reg  signed [11:0] obs_x_reg_285_pp0_iter17_reg;
reg  signed [11:0] obs_x_reg_285_pp0_iter18_reg;
reg  signed [11:0] obs_x_reg_285_pp0_iter19_reg;
reg  signed [11:0] obs_x_reg_285_pp0_iter20_reg;
reg  signed [11:0] obs_x_reg_285_pp0_iter21_reg;
reg  signed [11:0] obs_x_reg_285_pp0_iter22_reg;
reg  signed [11:0] obs_x_reg_285_pp0_iter23_reg;
reg  signed [11:0] obs_x_reg_285_pp0_iter24_reg;
reg  signed [11:0] obs_x_reg_285_pp0_iter25_reg;
reg  signed [11:0] obs_x_reg_285_pp0_iter26_reg;
reg  signed [11:0] obs_x_reg_285_pp0_iter27_reg;
reg  signed [11:0] obs_x_reg_285_pp0_iter28_reg;
reg  signed [11:0] obs_x_reg_285_pp0_iter29_reg;
reg  signed [11:0] obs_x_reg_285_pp0_iter30_reg;
reg  signed [11:0] obs_x_reg_285_pp0_iter31_reg;
reg  signed [11:0] obs_x_reg_285_pp0_iter32_reg;
reg  signed [11:0] obs_x_reg_285_pp0_iter33_reg;
reg  signed [11:0] obs_x_reg_285_pp0_iter34_reg;
reg  signed [11:0] obs_x_reg_285_pp0_iter35_reg;
reg  signed [11:0] obs_x_reg_285_pp0_iter36_reg;
reg  signed [11:0] obs_x_reg_285_pp0_iter37_reg;
reg  signed [11:0] obs_x_reg_285_pp0_iter38_reg;
reg  signed [11:0] obs_x_reg_285_pp0_iter39_reg;
reg  signed [11:0] obs_y_reg_292;
reg  signed [11:0] obs_y_reg_292_pp0_iter1_reg;
reg  signed [11:0] obs_y_reg_292_pp0_iter2_reg;
reg  signed [11:0] obs_y_reg_292_pp0_iter3_reg;
reg  signed [11:0] obs_y_reg_292_pp0_iter4_reg;
reg  signed [11:0] obs_y_reg_292_pp0_iter5_reg;
reg  signed [11:0] obs_y_reg_292_pp0_iter6_reg;
reg  signed [11:0] obs_y_reg_292_pp0_iter7_reg;
reg  signed [11:0] obs_y_reg_292_pp0_iter8_reg;
reg  signed [11:0] obs_y_reg_292_pp0_iter9_reg;
reg  signed [11:0] obs_y_reg_292_pp0_iter10_reg;
reg  signed [11:0] obs_y_reg_292_pp0_iter11_reg;
reg  signed [11:0] obs_y_reg_292_pp0_iter12_reg;
reg  signed [11:0] obs_y_reg_292_pp0_iter13_reg;
reg  signed [11:0] obs_y_reg_292_pp0_iter14_reg;
reg  signed [11:0] obs_y_reg_292_pp0_iter15_reg;
reg  signed [11:0] obs_y_reg_292_pp0_iter16_reg;
reg  signed [11:0] obs_y_reg_292_pp0_iter17_reg;
reg  signed [11:0] obs_y_reg_292_pp0_iter18_reg;
reg  signed [11:0] obs_y_reg_292_pp0_iter19_reg;
reg  signed [11:0] obs_y_reg_292_pp0_iter20_reg;
reg  signed [11:0] obs_y_reg_292_pp0_iter21_reg;
reg  signed [11:0] obs_y_reg_292_pp0_iter22_reg;
reg  signed [11:0] obs_y_reg_292_pp0_iter23_reg;
reg  signed [11:0] obs_y_reg_292_pp0_iter24_reg;
reg  signed [11:0] obs_y_reg_292_pp0_iter25_reg;
reg  signed [11:0] obs_y_reg_292_pp0_iter26_reg;
reg  signed [11:0] obs_y_reg_292_pp0_iter27_reg;
reg  signed [11:0] obs_y_reg_292_pp0_iter28_reg;
reg  signed [11:0] obs_y_reg_292_pp0_iter29_reg;
reg  signed [11:0] obs_y_reg_292_pp0_iter30_reg;
reg  signed [11:0] obs_y_reg_292_pp0_iter31_reg;
reg  signed [11:0] obs_y_reg_292_pp0_iter32_reg;
reg  signed [11:0] obs_y_reg_292_pp0_iter33_reg;
reg  signed [11:0] obs_y_reg_292_pp0_iter34_reg;
reg  signed [11:0] obs_y_reg_292_pp0_iter35_reg;
reg  signed [11:0] obs_y_reg_292_pp0_iter36_reg;
reg  signed [11:0] obs_y_reg_292_pp0_iter37_reg;
reg  signed [11:0] obs_y_reg_292_pp0_iter38_reg;
reg  signed [11:0] obs_y_reg_292_pp0_iter39_reg;
reg   [1:0] obs_last_reg_299;
reg   [1:0] obs_last_reg_299_pp0_iter1_reg;
reg   [1:0] obs_last_reg_299_pp0_iter2_reg;
reg   [1:0] obs_last_reg_299_pp0_iter3_reg;
reg   [1:0] obs_last_reg_299_pp0_iter4_reg;
reg   [1:0] obs_last_reg_299_pp0_iter5_reg;
reg   [1:0] obs_last_reg_299_pp0_iter6_reg;
reg   [1:0] obs_last_reg_299_pp0_iter7_reg;
reg   [1:0] obs_last_reg_299_pp0_iter8_reg;
reg   [1:0] obs_last_reg_299_pp0_iter9_reg;
reg   [1:0] obs_last_reg_299_pp0_iter10_reg;
reg   [1:0] obs_last_reg_299_pp0_iter11_reg;
reg   [1:0] obs_last_reg_299_pp0_iter12_reg;
reg   [1:0] obs_last_reg_299_pp0_iter13_reg;
reg   [1:0] obs_last_reg_299_pp0_iter14_reg;
reg   [1:0] obs_last_reg_299_pp0_iter15_reg;
reg   [1:0] obs_last_reg_299_pp0_iter16_reg;
reg   [1:0] obs_last_reg_299_pp0_iter17_reg;
reg   [1:0] obs_last_reg_299_pp0_iter18_reg;
reg   [1:0] obs_last_reg_299_pp0_iter19_reg;
reg   [1:0] obs_last_reg_299_pp0_iter20_reg;
reg   [1:0] obs_last_reg_299_pp0_iter21_reg;
reg   [1:0] obs_last_reg_299_pp0_iter22_reg;
reg   [1:0] obs_last_reg_299_pp0_iter23_reg;
reg   [1:0] obs_last_reg_299_pp0_iter24_reg;
reg   [1:0] obs_last_reg_299_pp0_iter25_reg;
reg   [1:0] obs_last_reg_299_pp0_iter26_reg;
reg   [1:0] obs_last_reg_299_pp0_iter27_reg;
reg   [1:0] obs_last_reg_299_pp0_iter28_reg;
reg   [1:0] obs_last_reg_299_pp0_iter29_reg;
reg   [1:0] obs_last_reg_299_pp0_iter30_reg;
reg   [1:0] obs_last_reg_299_pp0_iter31_reg;
reg   [1:0] obs_last_reg_299_pp0_iter32_reg;
reg   [1:0] obs_last_reg_299_pp0_iter33_reg;
reg   [1:0] obs_last_reg_299_pp0_iter34_reg;
reg   [1:0] obs_last_reg_299_pp0_iter35_reg;
reg   [1:0] obs_last_reg_299_pp0_iter36_reg;
reg   [1:0] obs_last_reg_299_pp0_iter37_reg;
reg   [1:0] obs_last_reg_299_pp0_iter38_reg;
reg   [1:0] obs_last_reg_299_pp0_iter39_reg;
wire  signed [33:0] grp_fu_230_p2;
reg  signed [33:0] sigmaInv_reg_311;
reg  signed [33:0] sigmaInv_reg_311_pp0_iter38_reg;
reg  signed [33:0] sigmaInv_reg_311_pp0_iter39_reg;
reg  signed [35:0] sigmaSquaredInv_reg_317;
reg  signed [35:0] sigmaSquaredInv_reg_317_pp0_iter39_reg;
wire   [47:0] mul_ln45_fu_184_p2;
reg   [47:0] mul_ln45_reg_323;
wire   [47:0] mul_ln46_fu_188_p2;
reg   [47:0] mul_ln46_reg_328;
reg    ap_block_pp0_stage0_01001;
wire  signed [63:0] sext_ln38_1_fu_268_p1;
wire  signed [33:0] mul_ln38_fu_180_p0;
wire  signed [67:0] sext_ln38_fu_236_p1;
wire  signed [33:0] mul_ln38_fu_180_p1;
wire  signed [35:0] mul_ln45_fu_184_p0;
wire  signed [47:0] sext_ln38_2_fu_251_p1;
wire  signed [35:0] mul_ln46_fu_188_p0;
wire  signed [11:0] obs_sigma_fu_206_p4;
wire   [67:0] mul_ln38_fu_180_p2;
reg    grp_fu_230_ce;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg    ap_loop_exit_ready_pp0_iter6_reg;
reg    ap_loop_exit_ready_pp0_iter7_reg;
reg    ap_loop_exit_ready_pp0_iter8_reg;
reg    ap_loop_exit_ready_pp0_iter9_reg;
reg    ap_loop_exit_ready_pp0_iter10_reg;
reg    ap_loop_exit_ready_pp0_iter11_reg;
reg    ap_loop_exit_ready_pp0_iter12_reg;
reg    ap_loop_exit_ready_pp0_iter13_reg;
reg    ap_loop_exit_ready_pp0_iter14_reg;
reg    ap_loop_exit_ready_pp0_iter15_reg;
reg    ap_loop_exit_ready_pp0_iter16_reg;
reg    ap_loop_exit_ready_pp0_iter17_reg;
reg    ap_loop_exit_ready_pp0_iter18_reg;
reg    ap_loop_exit_ready_pp0_iter19_reg;
reg    ap_loop_exit_ready_pp0_iter20_reg;
reg    ap_loop_exit_ready_pp0_iter21_reg;
reg    ap_loop_exit_ready_pp0_iter22_reg;
reg    ap_loop_exit_ready_pp0_iter23_reg;
reg    ap_loop_exit_ready_pp0_iter24_reg;
reg    ap_loop_exit_ready_pp0_iter25_reg;
reg    ap_loop_exit_ready_pp0_iter26_reg;
reg    ap_loop_exit_ready_pp0_iter27_reg;
reg    ap_loop_exit_ready_pp0_iter28_reg;
reg    ap_loop_exit_ready_pp0_iter29_reg;
reg    ap_loop_exit_ready_pp0_iter30_reg;
reg    ap_loop_exit_ready_pp0_iter31_reg;
reg    ap_loop_exit_ready_pp0_iter32_reg;
reg    ap_loop_exit_ready_pp0_iter33_reg;
reg    ap_loop_exit_ready_pp0_iter34_reg;
reg    ap_loop_exit_ready_pp0_iter35_reg;
reg    ap_loop_exit_ready_pp0_iter36_reg;
reg    ap_loop_exit_ready_pp0_iter37_reg;
reg    ap_loop_exit_ready_pp0_iter38_reg;
reg    ap_loop_exit_ready_pp0_iter39_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_loop_init;
wire    regslice_both_input_r_U_apdone_blk;
wire   [63:0] input_r_TDATA_int_regslice;
wire    input_r_TVALID_int_regslice;
reg    input_r_TREADY_int_regslice;
wire    regslice_both_input_r_U_ack_in;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_enable_reg_pp0_iter12 = 1'b0;
#0 ap_enable_reg_pp0_iter13 = 1'b0;
#0 ap_enable_reg_pp0_iter14 = 1'b0;
#0 ap_enable_reg_pp0_iter15 = 1'b0;
#0 ap_enable_reg_pp0_iter16 = 1'b0;
#0 ap_enable_reg_pp0_iter17 = 1'b0;
#0 ap_enable_reg_pp0_iter18 = 1'b0;
#0 ap_enable_reg_pp0_iter19 = 1'b0;
#0 ap_enable_reg_pp0_iter20 = 1'b0;
#0 ap_enable_reg_pp0_iter21 = 1'b0;
#0 ap_enable_reg_pp0_iter22 = 1'b0;
#0 ap_enable_reg_pp0_iter23 = 1'b0;
#0 ap_enable_reg_pp0_iter24 = 1'b0;
#0 ap_enable_reg_pp0_iter25 = 1'b0;
#0 ap_enable_reg_pp0_iter26 = 1'b0;
#0 ap_enable_reg_pp0_iter27 = 1'b0;
#0 ap_enable_reg_pp0_iter28 = 1'b0;
#0 ap_enable_reg_pp0_iter29 = 1'b0;
#0 ap_enable_reg_pp0_iter30 = 1'b0;
#0 ap_enable_reg_pp0_iter31 = 1'b0;
#0 ap_enable_reg_pp0_iter32 = 1'b0;
#0 ap_enable_reg_pp0_iter33 = 1'b0;
#0 ap_enable_reg_pp0_iter34 = 1'b0;
#0 ap_enable_reg_pp0_iter35 = 1'b0;
#0 ap_enable_reg_pp0_iter36 = 1'b0;
#0 ap_enable_reg_pp0_iter37 = 1'b0;
#0 ap_enable_reg_pp0_iter38 = 1'b0;
#0 ap_enable_reg_pp0_iter39 = 1'b0;
#0 ap_enable_reg_pp0_iter40 = 1'b0;
#0 ap_done_reg = 1'b0;
end

fit_mul_34s_34s_68_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 34 ),
    .din1_WIDTH( 34 ),
    .dout_WIDTH( 68 ))
mul_34s_34s_68_1_1_U1(
    .din0(mul_ln38_fu_180_p0),
    .din1(mul_ln38_fu_180_p1),
    .dout(mul_ln38_fu_180_p2)
);

fit_mul_36s_12s_48_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 36 ),
    .din1_WIDTH( 12 ),
    .dout_WIDTH( 48 ))
mul_36s_12s_48_1_1_U2(
    .din0(mul_ln45_fu_184_p0),
    .din1(obs_x_reg_285_pp0_iter38_reg),
    .dout(mul_ln45_fu_184_p2)
);

fit_mul_36s_12s_48_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 36 ),
    .din1_WIDTH( 12 ),
    .dout_WIDTH( 48 ))
mul_36s_12s_48_1_1_U3(
    .din0(mul_ln46_fu_188_p0),
    .din1(obs_y_reg_292_pp0_iter38_reg),
    .dout(mul_ln46_fu_188_p2)
);

fit_sdiv_34ns_12s_34_38_1 #(
    .ID( 1 ),
    .NUM_STAGE( 38 ),
    .din0_WIDTH( 34 ),
    .din1_WIDTH( 12 ),
    .dout_WIDTH( 34 ))
sdiv_34ns_12s_34_38_1_U4(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(34'd4294967296),
    .din1(obs_sigma_fu_206_p4),
    .ce(grp_fu_230_ce),
    .dout(grp_fu_230_p2)
);

fit_flow_control_loop_pipe flow_control_loop_pipe_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(real_start),
    .ap_ready(internal_ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int),
    .ap_continue(ap_continue)
);

fit_regslice_both #(
    .DataWidth( 64 ))
regslice_both_input_r_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(input_r_TDATA),
    .vld_in(input_r_TVALID),
    .ack_in(regslice_both_input_r_U_ack_in),
    .data_out(input_r_TDATA_int_regslice),
    .vld_out(input_r_TVALID_int_regslice),
    .ack_out(input_r_TREADY_int_regslice),
    .apdone_blk(regslice_both_input_r_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter39_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter13 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter14 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter15 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter16 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter17 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter18 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter19 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter20 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter20 <= ap_enable_reg_pp0_iter19;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter21 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter21 <= ap_enable_reg_pp0_iter20;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter22 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter22 <= ap_enable_reg_pp0_iter21;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter23 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter23 <= ap_enable_reg_pp0_iter22;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter24 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter24 <= ap_enable_reg_pp0_iter23;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter25 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter25 <= ap_enable_reg_pp0_iter24;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter26 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter26 <= ap_enable_reg_pp0_iter25;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter27 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter27 <= ap_enable_reg_pp0_iter26;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter28 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter28 <= ap_enable_reg_pp0_iter27;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter29 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter29 <= ap_enable_reg_pp0_iter28;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter30 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter30 <= ap_enable_reg_pp0_iter29;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter31 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter31 <= ap_enable_reg_pp0_iter30;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter32 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter32 <= ap_enable_reg_pp0_iter31;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter33 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter33 <= ap_enable_reg_pp0_iter32;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter34 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter34 <= ap_enable_reg_pp0_iter33;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter35 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter35 <= ap_enable_reg_pp0_iter34;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter36 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter36 <= ap_enable_reg_pp0_iter35;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter37 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter37 <= ap_enable_reg_pp0_iter36;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter38 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter38 <= ap_enable_reg_pp0_iter37;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter39 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter39 <= ap_enable_reg_pp0_iter38;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter40 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter40 <= ap_enable_reg_pp0_iter39;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((real_start == 1'b1) & (internal_ap_ready == 1'b0))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
        ap_loop_exit_ready_pp0_iter11_reg <= ap_loop_exit_ready_pp0_iter10_reg;
        ap_loop_exit_ready_pp0_iter12_reg <= ap_loop_exit_ready_pp0_iter11_reg;
        ap_loop_exit_ready_pp0_iter13_reg <= ap_loop_exit_ready_pp0_iter12_reg;
        ap_loop_exit_ready_pp0_iter14_reg <= ap_loop_exit_ready_pp0_iter13_reg;
        ap_loop_exit_ready_pp0_iter15_reg <= ap_loop_exit_ready_pp0_iter14_reg;
        ap_loop_exit_ready_pp0_iter16_reg <= ap_loop_exit_ready_pp0_iter15_reg;
        ap_loop_exit_ready_pp0_iter17_reg <= ap_loop_exit_ready_pp0_iter16_reg;
        ap_loop_exit_ready_pp0_iter18_reg <= ap_loop_exit_ready_pp0_iter17_reg;
        ap_loop_exit_ready_pp0_iter19_reg <= ap_loop_exit_ready_pp0_iter18_reg;
        ap_loop_exit_ready_pp0_iter20_reg <= ap_loop_exit_ready_pp0_iter19_reg;
        ap_loop_exit_ready_pp0_iter21_reg <= ap_loop_exit_ready_pp0_iter20_reg;
        ap_loop_exit_ready_pp0_iter22_reg <= ap_loop_exit_ready_pp0_iter21_reg;
        ap_loop_exit_ready_pp0_iter23_reg <= ap_loop_exit_ready_pp0_iter22_reg;
        ap_loop_exit_ready_pp0_iter24_reg <= ap_loop_exit_ready_pp0_iter23_reg;
        ap_loop_exit_ready_pp0_iter25_reg <= ap_loop_exit_ready_pp0_iter24_reg;
        ap_loop_exit_ready_pp0_iter26_reg <= ap_loop_exit_ready_pp0_iter25_reg;
        ap_loop_exit_ready_pp0_iter27_reg <= ap_loop_exit_ready_pp0_iter26_reg;
        ap_loop_exit_ready_pp0_iter28_reg <= ap_loop_exit_ready_pp0_iter27_reg;
        ap_loop_exit_ready_pp0_iter29_reg <= ap_loop_exit_ready_pp0_iter28_reg;
        ap_loop_exit_ready_pp0_iter30_reg <= ap_loop_exit_ready_pp0_iter29_reg;
        ap_loop_exit_ready_pp0_iter31_reg <= ap_loop_exit_ready_pp0_iter30_reg;
        ap_loop_exit_ready_pp0_iter32_reg <= ap_loop_exit_ready_pp0_iter31_reg;
        ap_loop_exit_ready_pp0_iter33_reg <= ap_loop_exit_ready_pp0_iter32_reg;
        ap_loop_exit_ready_pp0_iter34_reg <= ap_loop_exit_ready_pp0_iter33_reg;
        ap_loop_exit_ready_pp0_iter35_reg <= ap_loop_exit_ready_pp0_iter34_reg;
        ap_loop_exit_ready_pp0_iter36_reg <= ap_loop_exit_ready_pp0_iter35_reg;
        ap_loop_exit_ready_pp0_iter37_reg <= ap_loop_exit_ready_pp0_iter36_reg;
        ap_loop_exit_ready_pp0_iter38_reg <= ap_loop_exit_ready_pp0_iter37_reg;
        ap_loop_exit_ready_pp0_iter39_reg <= ap_loop_exit_ready_pp0_iter38_reg;
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
        ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
        ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
        ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
        ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
        mul_ln45_reg_323 <= mul_ln45_fu_184_p2;
        mul_ln46_reg_328 <= mul_ln46_fu_188_p2;
        obs_last_reg_299_pp0_iter10_reg <= obs_last_reg_299_pp0_iter9_reg;
        obs_last_reg_299_pp0_iter11_reg <= obs_last_reg_299_pp0_iter10_reg;
        obs_last_reg_299_pp0_iter12_reg <= obs_last_reg_299_pp0_iter11_reg;
        obs_last_reg_299_pp0_iter13_reg <= obs_last_reg_299_pp0_iter12_reg;
        obs_last_reg_299_pp0_iter14_reg <= obs_last_reg_299_pp0_iter13_reg;
        obs_last_reg_299_pp0_iter15_reg <= obs_last_reg_299_pp0_iter14_reg;
        obs_last_reg_299_pp0_iter16_reg <= obs_last_reg_299_pp0_iter15_reg;
        obs_last_reg_299_pp0_iter17_reg <= obs_last_reg_299_pp0_iter16_reg;
        obs_last_reg_299_pp0_iter18_reg <= obs_last_reg_299_pp0_iter17_reg;
        obs_last_reg_299_pp0_iter19_reg <= obs_last_reg_299_pp0_iter18_reg;
        obs_last_reg_299_pp0_iter20_reg <= obs_last_reg_299_pp0_iter19_reg;
        obs_last_reg_299_pp0_iter21_reg <= obs_last_reg_299_pp0_iter20_reg;
        obs_last_reg_299_pp0_iter22_reg <= obs_last_reg_299_pp0_iter21_reg;
        obs_last_reg_299_pp0_iter23_reg <= obs_last_reg_299_pp0_iter22_reg;
        obs_last_reg_299_pp0_iter24_reg <= obs_last_reg_299_pp0_iter23_reg;
        obs_last_reg_299_pp0_iter25_reg <= obs_last_reg_299_pp0_iter24_reg;
        obs_last_reg_299_pp0_iter26_reg <= obs_last_reg_299_pp0_iter25_reg;
        obs_last_reg_299_pp0_iter27_reg <= obs_last_reg_299_pp0_iter26_reg;
        obs_last_reg_299_pp0_iter28_reg <= obs_last_reg_299_pp0_iter27_reg;
        obs_last_reg_299_pp0_iter29_reg <= obs_last_reg_299_pp0_iter28_reg;
        obs_last_reg_299_pp0_iter2_reg <= obs_last_reg_299_pp0_iter1_reg;
        obs_last_reg_299_pp0_iter30_reg <= obs_last_reg_299_pp0_iter29_reg;
        obs_last_reg_299_pp0_iter31_reg <= obs_last_reg_299_pp0_iter30_reg;
        obs_last_reg_299_pp0_iter32_reg <= obs_last_reg_299_pp0_iter31_reg;
        obs_last_reg_299_pp0_iter33_reg <= obs_last_reg_299_pp0_iter32_reg;
        obs_last_reg_299_pp0_iter34_reg <= obs_last_reg_299_pp0_iter33_reg;
        obs_last_reg_299_pp0_iter35_reg <= obs_last_reg_299_pp0_iter34_reg;
        obs_last_reg_299_pp0_iter36_reg <= obs_last_reg_299_pp0_iter35_reg;
        obs_last_reg_299_pp0_iter37_reg <= obs_last_reg_299_pp0_iter36_reg;
        obs_last_reg_299_pp0_iter38_reg <= obs_last_reg_299_pp0_iter37_reg;
        obs_last_reg_299_pp0_iter39_reg <= obs_last_reg_299_pp0_iter38_reg;
        obs_last_reg_299_pp0_iter3_reg <= obs_last_reg_299_pp0_iter2_reg;
        obs_last_reg_299_pp0_iter4_reg <= obs_last_reg_299_pp0_iter3_reg;
        obs_last_reg_299_pp0_iter5_reg <= obs_last_reg_299_pp0_iter4_reg;
        obs_last_reg_299_pp0_iter6_reg <= obs_last_reg_299_pp0_iter5_reg;
        obs_last_reg_299_pp0_iter7_reg <= obs_last_reg_299_pp0_iter6_reg;
        obs_last_reg_299_pp0_iter8_reg <= obs_last_reg_299_pp0_iter7_reg;
        obs_last_reg_299_pp0_iter9_reg <= obs_last_reg_299_pp0_iter8_reg;
        obs_x_reg_285_pp0_iter10_reg <= obs_x_reg_285_pp0_iter9_reg;
        obs_x_reg_285_pp0_iter11_reg <= obs_x_reg_285_pp0_iter10_reg;
        obs_x_reg_285_pp0_iter12_reg <= obs_x_reg_285_pp0_iter11_reg;
        obs_x_reg_285_pp0_iter13_reg <= obs_x_reg_285_pp0_iter12_reg;
        obs_x_reg_285_pp0_iter14_reg <= obs_x_reg_285_pp0_iter13_reg;
        obs_x_reg_285_pp0_iter15_reg <= obs_x_reg_285_pp0_iter14_reg;
        obs_x_reg_285_pp0_iter16_reg <= obs_x_reg_285_pp0_iter15_reg;
        obs_x_reg_285_pp0_iter17_reg <= obs_x_reg_285_pp0_iter16_reg;
        obs_x_reg_285_pp0_iter18_reg <= obs_x_reg_285_pp0_iter17_reg;
        obs_x_reg_285_pp0_iter19_reg <= obs_x_reg_285_pp0_iter18_reg;
        obs_x_reg_285_pp0_iter20_reg <= obs_x_reg_285_pp0_iter19_reg;
        obs_x_reg_285_pp0_iter21_reg <= obs_x_reg_285_pp0_iter20_reg;
        obs_x_reg_285_pp0_iter22_reg <= obs_x_reg_285_pp0_iter21_reg;
        obs_x_reg_285_pp0_iter23_reg <= obs_x_reg_285_pp0_iter22_reg;
        obs_x_reg_285_pp0_iter24_reg <= obs_x_reg_285_pp0_iter23_reg;
        obs_x_reg_285_pp0_iter25_reg <= obs_x_reg_285_pp0_iter24_reg;
        obs_x_reg_285_pp0_iter26_reg <= obs_x_reg_285_pp0_iter25_reg;
        obs_x_reg_285_pp0_iter27_reg <= obs_x_reg_285_pp0_iter26_reg;
        obs_x_reg_285_pp0_iter28_reg <= obs_x_reg_285_pp0_iter27_reg;
        obs_x_reg_285_pp0_iter29_reg <= obs_x_reg_285_pp0_iter28_reg;
        obs_x_reg_285_pp0_iter2_reg <= obs_x_reg_285_pp0_iter1_reg;
        obs_x_reg_285_pp0_iter30_reg <= obs_x_reg_285_pp0_iter29_reg;
        obs_x_reg_285_pp0_iter31_reg <= obs_x_reg_285_pp0_iter30_reg;
        obs_x_reg_285_pp0_iter32_reg <= obs_x_reg_285_pp0_iter31_reg;
        obs_x_reg_285_pp0_iter33_reg <= obs_x_reg_285_pp0_iter32_reg;
        obs_x_reg_285_pp0_iter34_reg <= obs_x_reg_285_pp0_iter33_reg;
        obs_x_reg_285_pp0_iter35_reg <= obs_x_reg_285_pp0_iter34_reg;
        obs_x_reg_285_pp0_iter36_reg <= obs_x_reg_285_pp0_iter35_reg;
        obs_x_reg_285_pp0_iter37_reg <= obs_x_reg_285_pp0_iter36_reg;
        obs_x_reg_285_pp0_iter38_reg <= obs_x_reg_285_pp0_iter37_reg;
        obs_x_reg_285_pp0_iter39_reg <= obs_x_reg_285_pp0_iter38_reg;
        obs_x_reg_285_pp0_iter3_reg <= obs_x_reg_285_pp0_iter2_reg;
        obs_x_reg_285_pp0_iter4_reg <= obs_x_reg_285_pp0_iter3_reg;
        obs_x_reg_285_pp0_iter5_reg <= obs_x_reg_285_pp0_iter4_reg;
        obs_x_reg_285_pp0_iter6_reg <= obs_x_reg_285_pp0_iter5_reg;
        obs_x_reg_285_pp0_iter7_reg <= obs_x_reg_285_pp0_iter6_reg;
        obs_x_reg_285_pp0_iter8_reg <= obs_x_reg_285_pp0_iter7_reg;
        obs_x_reg_285_pp0_iter9_reg <= obs_x_reg_285_pp0_iter8_reg;
        obs_y_reg_292_pp0_iter10_reg <= obs_y_reg_292_pp0_iter9_reg;
        obs_y_reg_292_pp0_iter11_reg <= obs_y_reg_292_pp0_iter10_reg;
        obs_y_reg_292_pp0_iter12_reg <= obs_y_reg_292_pp0_iter11_reg;
        obs_y_reg_292_pp0_iter13_reg <= obs_y_reg_292_pp0_iter12_reg;
        obs_y_reg_292_pp0_iter14_reg <= obs_y_reg_292_pp0_iter13_reg;
        obs_y_reg_292_pp0_iter15_reg <= obs_y_reg_292_pp0_iter14_reg;
        obs_y_reg_292_pp0_iter16_reg <= obs_y_reg_292_pp0_iter15_reg;
        obs_y_reg_292_pp0_iter17_reg <= obs_y_reg_292_pp0_iter16_reg;
        obs_y_reg_292_pp0_iter18_reg <= obs_y_reg_292_pp0_iter17_reg;
        obs_y_reg_292_pp0_iter19_reg <= obs_y_reg_292_pp0_iter18_reg;
        obs_y_reg_292_pp0_iter20_reg <= obs_y_reg_292_pp0_iter19_reg;
        obs_y_reg_292_pp0_iter21_reg <= obs_y_reg_292_pp0_iter20_reg;
        obs_y_reg_292_pp0_iter22_reg <= obs_y_reg_292_pp0_iter21_reg;
        obs_y_reg_292_pp0_iter23_reg <= obs_y_reg_292_pp0_iter22_reg;
        obs_y_reg_292_pp0_iter24_reg <= obs_y_reg_292_pp0_iter23_reg;
        obs_y_reg_292_pp0_iter25_reg <= obs_y_reg_292_pp0_iter24_reg;
        obs_y_reg_292_pp0_iter26_reg <= obs_y_reg_292_pp0_iter25_reg;
        obs_y_reg_292_pp0_iter27_reg <= obs_y_reg_292_pp0_iter26_reg;
        obs_y_reg_292_pp0_iter28_reg <= obs_y_reg_292_pp0_iter27_reg;
        obs_y_reg_292_pp0_iter29_reg <= obs_y_reg_292_pp0_iter28_reg;
        obs_y_reg_292_pp0_iter2_reg <= obs_y_reg_292_pp0_iter1_reg;
        obs_y_reg_292_pp0_iter30_reg <= obs_y_reg_292_pp0_iter29_reg;
        obs_y_reg_292_pp0_iter31_reg <= obs_y_reg_292_pp0_iter30_reg;
        obs_y_reg_292_pp0_iter32_reg <= obs_y_reg_292_pp0_iter31_reg;
        obs_y_reg_292_pp0_iter33_reg <= obs_y_reg_292_pp0_iter32_reg;
        obs_y_reg_292_pp0_iter34_reg <= obs_y_reg_292_pp0_iter33_reg;
        obs_y_reg_292_pp0_iter35_reg <= obs_y_reg_292_pp0_iter34_reg;
        obs_y_reg_292_pp0_iter36_reg <= obs_y_reg_292_pp0_iter35_reg;
        obs_y_reg_292_pp0_iter37_reg <= obs_y_reg_292_pp0_iter36_reg;
        obs_y_reg_292_pp0_iter38_reg <= obs_y_reg_292_pp0_iter37_reg;
        obs_y_reg_292_pp0_iter39_reg <= obs_y_reg_292_pp0_iter38_reg;
        obs_y_reg_292_pp0_iter3_reg <= obs_y_reg_292_pp0_iter2_reg;
        obs_y_reg_292_pp0_iter4_reg <= obs_y_reg_292_pp0_iter3_reg;
        obs_y_reg_292_pp0_iter5_reg <= obs_y_reg_292_pp0_iter4_reg;
        obs_y_reg_292_pp0_iter6_reg <= obs_y_reg_292_pp0_iter5_reg;
        obs_y_reg_292_pp0_iter7_reg <= obs_y_reg_292_pp0_iter6_reg;
        obs_y_reg_292_pp0_iter8_reg <= obs_y_reg_292_pp0_iter7_reg;
        obs_y_reg_292_pp0_iter9_reg <= obs_y_reg_292_pp0_iter8_reg;
        sigmaInv_reg_311 <= grp_fu_230_p2;
        sigmaInv_reg_311_pp0_iter38_reg <= sigmaInv_reg_311;
        sigmaInv_reg_311_pp0_iter39_reg <= sigmaInv_reg_311_pp0_iter38_reg;
        sigmaSquaredInv_reg_317 <= {{mul_ln38_fu_180_p2[67:32]}};
        sigmaSquaredInv_reg_317_pp0_iter39_reg <= sigmaSquaredInv_reg_317;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        obs_last_reg_299_pp0_iter1_reg <= obs_last_reg_299;
        obs_x_reg_285_pp0_iter1_reg <= obs_x_reg_285;
        obs_y_reg_292_pp0_iter1_reg <= obs_y_reg_292;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_nbreadreq_fu_82_p3 == 1'd1))) begin
        obs_last_reg_299 <= {{input_r_TDATA_int_regslice[49:48]}};
        obs_x_reg_285 <= obs_x_fu_192_p1;
        obs_y_reg_292 <= {{input_r_TDATA_int_regslice[27:16]}};
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_nbreadreq_fu_82_p3 == 1'd0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter39_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_idle_pp0 == 1'b1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter24 == 1'b0) & (ap_enable_reg_pp0_iter23 == 1'b0) & (ap_enable_reg_pp0_iter22 == 1'b0) & (ap_enable_reg_pp0_iter21 == 1'b0) & (ap_enable_reg_pp0_iter20 == 1'b0) & (ap_enable_reg_pp0_iter19 == 1'b0) & (ap_enable_reg_pp0_iter18 == 1'b0) & (ap_enable_reg_pp0_iter17 == 1'b0) & (ap_enable_reg_pp0_iter16 == 1'b0) & (ap_enable_reg_pp0_iter15 == 1'b0) & (ap_enable_reg_pp0_iter14 == 1'b0) & (ap_enable_reg_pp0_iter13 == 1'b0) & (ap_enable_reg_pp0_iter12 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter40 == 1'b0) & (ap_enable_reg_pp0_iter39 == 1'b0) & (ap_enable_reg_pp0_iter38 == 1'b0) 
    & (ap_enable_reg_pp0_iter37 == 1'b0) & (ap_enable_reg_pp0_iter36 == 1'b0) & (ap_enable_reg_pp0_iter35 == 1'b0) & (ap_enable_reg_pp0_iter34 == 1'b0) & (ap_enable_reg_pp0_iter33 == 1'b0) & (ap_enable_reg_pp0_iter32 == 1'b0) & (ap_enable_reg_pp0_iter31 == 1'b0) & (ap_enable_reg_pp0_iter30 == 1'b0) & (ap_enable_reg_pp0_iter29 == 1'b0) & (ap_enable_reg_pp0_iter28 == 1'b0) & (ap_enable_reg_pp0_iter27 == 1'b0) & (ap_enable_reg_pp0_iter26 == 1'b0) & (ap_enable_reg_pp0_iter25 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_230_ce = 1'b1;
    end else begin
        grp_fu_230_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_done_reg == 1'b0) & (tmp_nbreadreq_fu_82_p3 == 1'd1))) begin
        input_r_TDATA_blk_n = input_r_TVALID_int_regslice;
    end else begin
        input_r_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_nbreadreq_fu_82_p3 == 1'd1))) begin
        input_r_TREADY_int_regslice = 1'b1;
    end else begin
        input_r_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter40 == 1'b1))) begin
        last1_blk_n = last1_full_n;
    end else begin
        last1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter40 == 1'b1))) begin
        last1_write = 1'b1;
    end else begin
        last1_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter40 == 1'b1))) begin
        last2_blk_n = last2_full_n;
    end else begin
        last2_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter40 == 1'b1))) begin
        last2_write = 1'b1;
    end else begin
        last2_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter40 == 1'b1))) begin
        last3_blk_n = last3_full_n;
    end else begin
        last3_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter40 == 1'b1))) begin
        last3_write = 1'b1;
    end else begin
        last3_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter40 == 1'b1))) begin
        partialS_blk_n = partialS_full_n;
    end else begin
        partialS_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter40 == 1'b1))) begin
        partialS_write = 1'b1;
    end else begin
        partialS_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter40 == 1'b1))) begin
        partialSx_blk_n = partialSx_full_n;
    end else begin
        partialSx_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter40 == 1'b1))) begin
        partialSx_write = 1'b1;
    end else begin
        partialSx_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter40 == 1'b1))) begin
        partialSy_blk_n = partialSy_full_n;
    end else begin
        partialSy_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter40 == 1'b1))) begin
        partialSy_write = 1'b1;
    end else begin
        partialSy_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_full_n == 1'b0) & (start_once_reg == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter40 == 1'b1))) begin
        sigmaDiv1_blk_n = sigmaDiv1_full_n;
    end else begin
        sigmaDiv1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter40 == 1'b1))) begin
        sigmaDiv1_write = 1'b1;
    end else begin
        sigmaDiv1_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter40 == 1'b1))) begin
        sigmaSquaredDiv1_blk_n = sigmaSquaredDiv1_full_n;
    end else begin
        sigmaSquaredDiv1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter40 == 1'b1))) begin
        sigmaSquaredDiv1_write = 1'b1;
    end else begin
        sigmaSquaredDiv1_write = 1'b0;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (start_once_reg == 1'b0))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter40 == 1'b1))) begin
        x1_blk_n = x1_full_n;
    end else begin
        x1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter40 == 1'b1))) begin
        x1_write = 1'b1;
    end else begin
        x1_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter40 == 1'b1))) begin
        x2_blk_n = x2_full_n;
    end else begin
        x2_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter40 == 1'b1))) begin
        x2_write = 1'b1;
    end else begin
        x2_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter40 == 1'b1))) begin
        y1_blk_n = y1_full_n;
    end else begin
        y1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter40 == 1'b1))) begin
        y1_write = 1'b1;
    end else begin
        y1_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter40 == 1'b1))) begin
        y2_blk_n = y2_full_n;
    end else begin
        y2_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter40 == 1'b1))) begin
        y2_write = 1'b1;
    end else begin
        y2_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter40 == 1'b1) & ((partialSy_full_n == 1'b0) | (partialSx_full_n == 1'b0) | (partialS_full_n == 1'b0) | (last3_full_n == 1'b0) | (last2_full_n == 1'b0) | (last1_full_n == 1'b0) | (sigmaSquaredDiv1_full_n == 1'b0) | (sigmaDiv1_full_n == 1'b0) | (y2_full_n == 1'b0) | (y1_full_n == 1'b0) | (x2_full_n == 1'b0) | (x1_full_n == 1'b0))) | ((ap_start_int == 1'b1) & ((ap_done_reg == 1'b1) | ((input_r_TVALID_int_regslice == 1'b0) & (tmp_nbreadreq_fu_82_p3 == 1'd1)))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter40 == 1'b1) & ((partialSy_full_n == 1'b0) | (partialSx_full_n == 1'b0) | (partialS_full_n == 1'b0) | (last3_full_n == 1'b0) | (last2_full_n == 1'b0) | (last1_full_n == 1'b0) | (sigmaSquaredDiv1_full_n == 1'b0) | (sigmaDiv1_full_n == 1'b0) | (y2_full_n == 1'b0) | (y1_full_n == 1'b0) | (x2_full_n == 1'b0) | (x1_full_n == 1'b0))) | ((ap_start_int == 1'b1) & ((ap_done_reg == 1'b1) | ((input_r_TVALID_int_regslice == 1'b0) & (tmp_nbreadreq_fu_82_p3 == 1'd1)))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter40 == 1'b1) & ((partialSy_full_n == 1'b0) | (partialSx_full_n == 1'b0) | (partialS_full_n == 1'b0) | (last3_full_n == 1'b0) | (last2_full_n == 1'b0) | (last1_full_n == 1'b0) | (sigmaSquaredDiv1_full_n == 1'b0) | (sigmaDiv1_full_n == 1'b0) | (y2_full_n == 1'b0) | (y1_full_n == 1'b0) | (x2_full_n == 1'b0) | (x1_full_n == 1'b0))) | ((ap_start_int == 1'b1) & ((ap_done_reg == 1'b1) | ((input_r_TVALID_int_regslice == 1'b0) & (tmp_nbreadreq_fu_82_p3 == 1'd1)))));
end

assign ap_block_state10_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage0_iter13 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage0_iter14 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage0_iter15 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage0_iter16 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage0_iter17 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp0_stage0_iter18 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((ap_done_reg == 1'b1) | ((input_r_TVALID_int_regslice == 1'b0) & (tmp_nbreadreq_fu_82_p3 == 1'd1)));
end

assign ap_block_state20_pp0_stage0_iter19 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp0_stage0_iter20 = ~(1'b1 == 1'b1);

assign ap_block_state22_pp0_stage0_iter21 = ~(1'b1 == 1'b1);

assign ap_block_state23_pp0_stage0_iter22 = ~(1'b1 == 1'b1);

assign ap_block_state24_pp0_stage0_iter23 = ~(1'b1 == 1'b1);

assign ap_block_state25_pp0_stage0_iter24 = ~(1'b1 == 1'b1);

assign ap_block_state26_pp0_stage0_iter25 = ~(1'b1 == 1'b1);

assign ap_block_state27_pp0_stage0_iter26 = ~(1'b1 == 1'b1);

assign ap_block_state28_pp0_stage0_iter27 = ~(1'b1 == 1'b1);

assign ap_block_state29_pp0_stage0_iter28 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state30_pp0_stage0_iter29 = ~(1'b1 == 1'b1);

assign ap_block_state31_pp0_stage0_iter30 = ~(1'b1 == 1'b1);

assign ap_block_state32_pp0_stage0_iter31 = ~(1'b1 == 1'b1);

assign ap_block_state33_pp0_stage0_iter32 = ~(1'b1 == 1'b1);

assign ap_block_state34_pp0_stage0_iter33 = ~(1'b1 == 1'b1);

assign ap_block_state35_pp0_stage0_iter34 = ~(1'b1 == 1'b1);

assign ap_block_state36_pp0_stage0_iter35 = ~(1'b1 == 1'b1);

assign ap_block_state37_pp0_stage0_iter36 = ~(1'b1 == 1'b1);

assign ap_block_state38_pp0_stage0_iter37 = ~(1'b1 == 1'b1);

assign ap_block_state39_pp0_stage0_iter38 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state40_pp0_stage0_iter39 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state41_pp0_stage0_iter40 = ((partialSy_full_n == 1'b0) | (partialSx_full_n == 1'b0) | (partialS_full_n == 1'b0) | (last3_full_n == 1'b0) | (last2_full_n == 1'b0) | (last1_full_n == 1'b0) | (sigmaSquaredDiv1_full_n == 1'b0) | (sigmaDiv1_full_n == 1'b0) | (y2_full_n == 1'b0) | (y1_full_n == 1'b0) | (x2_full_n == 1'b0) | (x1_full_n == 1'b0));
end

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_ready = internal_ap_ready;

assign input_r_TREADY = regslice_both_input_r_U_ack_in;

assign last1_din = obs_last_reg_299_pp0_iter39_reg;

assign last2_din = obs_last_reg_299_pp0_iter39_reg;

assign last3_din = obs_last_reg_299_pp0_iter39_reg;

assign mul_ln38_fu_180_p0 = sext_ln38_fu_236_p1;

assign mul_ln38_fu_180_p1 = sext_ln38_fu_236_p1;

assign mul_ln45_fu_184_p0 = sext_ln38_2_fu_251_p1;

assign mul_ln46_fu_188_p0 = sext_ln38_2_fu_251_p1;

assign obs_sigma_fu_206_p4 = {{input_r_TDATA_int_regslice[43:32]}};

assign obs_x_fu_192_p1 = input_r_TDATA_int_regslice[11:0];

assign partialS_din = sext_ln38_1_fu_268_p1;

assign partialSx_din = $signed(mul_ln45_reg_323);

assign partialSy_din = $signed(mul_ln46_reg_328);

assign sext_ln38_1_fu_268_p1 = sigmaSquaredInv_reg_317_pp0_iter39_reg;

assign sext_ln38_2_fu_251_p1 = sigmaSquaredInv_reg_317;

assign sext_ln38_fu_236_p1 = sigmaInv_reg_311;

assign sigmaDiv1_din = $signed(sigmaInv_reg_311_pp0_iter39_reg);

assign sigmaSquaredDiv1_din = sext_ln38_1_fu_268_p1;

assign start_out = real_start;

assign tmp_nbreadreq_fu_82_p3 = input_r_TVALID_int_regslice;

assign x1_din = obs_x_reg_285_pp0_iter39_reg;

assign x2_din = obs_x_reg_285_pp0_iter39_reg;

assign y1_din = obs_y_reg_292_pp0_iter39_reg;

assign y2_din = obs_y_reg_292_pp0_iter39_reg;

endmodule //fit_readStage
