// ==============================================================
// Generated by Vitis HLS v2023.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module fit_interStage1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        partialS_dout,
        partialS_num_data_valid,
        partialS_fifo_cap,
        partialS_empty_n,
        partialS_read,
        partialSx_dout,
        partialSx_num_data_valid,
        partialSx_fifo_cap,
        partialSx_empty_n,
        partialSx_read,
        partialSy_dout,
        partialSy_num_data_valid,
        partialSy_fifo_cap,
        partialSy_empty_n,
        partialSy_read,
        last1_dout,
        last1_num_data_valid,
        last1_fifo_cap,
        last1_empty_n,
        last1_read,
        SDiv1_din,
        SDiv1_num_data_valid,
        SDiv1_fifo_cap,
        SDiv1_full_n,
        SDiv1_write,
        SxDivS_din,
        SxDivS_num_data_valid,
        SxDivS_fifo_cap,
        SxDivS_full_n,
        SxDivS_write,
        SxSquaredDivS_din,
        SxSquaredDivS_num_data_valid,
        SxSquaredDivS_fifo_cap,
        SxSquaredDivS_full_n,
        SxSquaredDivS_write,
        SyDivS_din,
        SyDivS_num_data_valid,
        SyDivS_fifo_cap,
        SyDivS_full_n,
        SyDivS_write
);

parameter    ap_ST_fsm_state1 = 108'd1;
parameter    ap_ST_fsm_state2 = 108'd2;
parameter    ap_ST_fsm_state3 = 108'd4;
parameter    ap_ST_fsm_state4 = 108'd8;
parameter    ap_ST_fsm_state5 = 108'd16;
parameter    ap_ST_fsm_state6 = 108'd32;
parameter    ap_ST_fsm_state7 = 108'd64;
parameter    ap_ST_fsm_state8 = 108'd128;
parameter    ap_ST_fsm_state9 = 108'd256;
parameter    ap_ST_fsm_state10 = 108'd512;
parameter    ap_ST_fsm_state11 = 108'd1024;
parameter    ap_ST_fsm_state12 = 108'd2048;
parameter    ap_ST_fsm_state13 = 108'd4096;
parameter    ap_ST_fsm_state14 = 108'd8192;
parameter    ap_ST_fsm_state15 = 108'd16384;
parameter    ap_ST_fsm_state16 = 108'd32768;
parameter    ap_ST_fsm_state17 = 108'd65536;
parameter    ap_ST_fsm_state18 = 108'd131072;
parameter    ap_ST_fsm_state19 = 108'd262144;
parameter    ap_ST_fsm_state20 = 108'd524288;
parameter    ap_ST_fsm_state21 = 108'd1048576;
parameter    ap_ST_fsm_state22 = 108'd2097152;
parameter    ap_ST_fsm_state23 = 108'd4194304;
parameter    ap_ST_fsm_state24 = 108'd8388608;
parameter    ap_ST_fsm_state25 = 108'd16777216;
parameter    ap_ST_fsm_state26 = 108'd33554432;
parameter    ap_ST_fsm_state27 = 108'd67108864;
parameter    ap_ST_fsm_state28 = 108'd134217728;
parameter    ap_ST_fsm_state29 = 108'd268435456;
parameter    ap_ST_fsm_state30 = 108'd536870912;
parameter    ap_ST_fsm_state31 = 108'd1073741824;
parameter    ap_ST_fsm_state32 = 108'd2147483648;
parameter    ap_ST_fsm_state33 = 108'd4294967296;
parameter    ap_ST_fsm_state34 = 108'd8589934592;
parameter    ap_ST_fsm_state35 = 108'd17179869184;
parameter    ap_ST_fsm_state36 = 108'd34359738368;
parameter    ap_ST_fsm_state37 = 108'd68719476736;
parameter    ap_ST_fsm_state38 = 108'd137438953472;
parameter    ap_ST_fsm_state39 = 108'd274877906944;
parameter    ap_ST_fsm_state40 = 108'd549755813888;
parameter    ap_ST_fsm_state41 = 108'd1099511627776;
parameter    ap_ST_fsm_state42 = 108'd2199023255552;
parameter    ap_ST_fsm_state43 = 108'd4398046511104;
parameter    ap_ST_fsm_state44 = 108'd8796093022208;
parameter    ap_ST_fsm_state45 = 108'd17592186044416;
parameter    ap_ST_fsm_state46 = 108'd35184372088832;
parameter    ap_ST_fsm_state47 = 108'd70368744177664;
parameter    ap_ST_fsm_state48 = 108'd140737488355328;
parameter    ap_ST_fsm_state49 = 108'd281474976710656;
parameter    ap_ST_fsm_state50 = 108'd562949953421312;
parameter    ap_ST_fsm_state51 = 108'd1125899906842624;
parameter    ap_ST_fsm_state52 = 108'd2251799813685248;
parameter    ap_ST_fsm_state53 = 108'd4503599627370496;
parameter    ap_ST_fsm_state54 = 108'd9007199254740992;
parameter    ap_ST_fsm_state55 = 108'd18014398509481984;
parameter    ap_ST_fsm_state56 = 108'd36028797018963968;
parameter    ap_ST_fsm_state57 = 108'd72057594037927936;
parameter    ap_ST_fsm_state58 = 108'd144115188075855872;
parameter    ap_ST_fsm_state59 = 108'd288230376151711744;
parameter    ap_ST_fsm_state60 = 108'd576460752303423488;
parameter    ap_ST_fsm_state61 = 108'd1152921504606846976;
parameter    ap_ST_fsm_state62 = 108'd2305843009213693952;
parameter    ap_ST_fsm_state63 = 108'd4611686018427387904;
parameter    ap_ST_fsm_state64 = 108'd9223372036854775808;
parameter    ap_ST_fsm_state65 = 108'd18446744073709551616;
parameter    ap_ST_fsm_state66 = 108'd36893488147419103232;
parameter    ap_ST_fsm_state67 = 108'd73786976294838206464;
parameter    ap_ST_fsm_state68 = 108'd147573952589676412928;
parameter    ap_ST_fsm_state69 = 108'd295147905179352825856;
parameter    ap_ST_fsm_state70 = 108'd590295810358705651712;
parameter    ap_ST_fsm_state71 = 108'd1180591620717411303424;
parameter    ap_ST_fsm_state72 = 108'd2361183241434822606848;
parameter    ap_ST_fsm_state73 = 108'd4722366482869645213696;
parameter    ap_ST_fsm_state74 = 108'd9444732965739290427392;
parameter    ap_ST_fsm_state75 = 108'd18889465931478580854784;
parameter    ap_ST_fsm_state76 = 108'd37778931862957161709568;
parameter    ap_ST_fsm_state77 = 108'd75557863725914323419136;
parameter    ap_ST_fsm_state78 = 108'd151115727451828646838272;
parameter    ap_ST_fsm_state79 = 108'd302231454903657293676544;
parameter    ap_ST_fsm_state80 = 108'd604462909807314587353088;
parameter    ap_ST_fsm_state81 = 108'd1208925819614629174706176;
parameter    ap_ST_fsm_state82 = 108'd2417851639229258349412352;
parameter    ap_ST_fsm_state83 = 108'd4835703278458516698824704;
parameter    ap_ST_fsm_state84 = 108'd9671406556917033397649408;
parameter    ap_ST_fsm_state85 = 108'd19342813113834066795298816;
parameter    ap_ST_fsm_state86 = 108'd38685626227668133590597632;
parameter    ap_ST_fsm_state87 = 108'd77371252455336267181195264;
parameter    ap_ST_fsm_state88 = 108'd154742504910672534362390528;
parameter    ap_ST_fsm_state89 = 108'd309485009821345068724781056;
parameter    ap_ST_fsm_state90 = 108'd618970019642690137449562112;
parameter    ap_ST_fsm_state91 = 108'd1237940039285380274899124224;
parameter    ap_ST_fsm_state92 = 108'd2475880078570760549798248448;
parameter    ap_ST_fsm_state93 = 108'd4951760157141521099596496896;
parameter    ap_ST_fsm_state94 = 108'd9903520314283042199192993792;
parameter    ap_ST_fsm_state95 = 108'd19807040628566084398385987584;
parameter    ap_ST_fsm_state96 = 108'd39614081257132168796771975168;
parameter    ap_ST_fsm_state97 = 108'd79228162514264337593543950336;
parameter    ap_ST_fsm_state98 = 108'd158456325028528675187087900672;
parameter    ap_ST_fsm_state99 = 108'd316912650057057350374175801344;
parameter    ap_ST_fsm_state100 = 108'd633825300114114700748351602688;
parameter    ap_ST_fsm_state101 = 108'd1267650600228229401496703205376;
parameter    ap_ST_fsm_state102 = 108'd2535301200456458802993406410752;
parameter    ap_ST_fsm_state103 = 108'd5070602400912917605986812821504;
parameter    ap_ST_fsm_state104 = 108'd10141204801825835211973625643008;
parameter    ap_ST_fsm_state105 = 108'd20282409603651670423947251286016;
parameter    ap_ST_fsm_state106 = 108'd40564819207303340847894502572032;
parameter    ap_ST_fsm_state107 = 108'd81129638414606681695789005144064;
parameter    ap_ST_fsm_state108 = 108'd162259276829213363391578010288128;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [63:0] partialS_dout;
input  [4:0] partialS_num_data_valid;
input  [4:0] partialS_fifo_cap;
input   partialS_empty_n;
output   partialS_read;
input  [63:0] partialSx_dout;
input  [4:0] partialSx_num_data_valid;
input  [4:0] partialSx_fifo_cap;
input   partialSx_empty_n;
output   partialSx_read;
input  [63:0] partialSy_dout;
input  [4:0] partialSy_num_data_valid;
input  [4:0] partialSy_fifo_cap;
input   partialSy_empty_n;
output   partialSy_read;
input  [1:0] last1_dout;
input  [4:0] last1_num_data_valid;
input  [4:0] last1_fifo_cap;
input   last1_empty_n;
output   last1_read;
output  [63:0] SDiv1_din;
input  [4:0] SDiv1_num_data_valid;
input  [4:0] SDiv1_fifo_cap;
input   SDiv1_full_n;
output   SDiv1_write;
output  [63:0] SxDivS_din;
input  [4:0] SxDivS_num_data_valid;
input  [4:0] SxDivS_fifo_cap;
input   SxDivS_full_n;
output   SxDivS_write;
output  [63:0] SxSquaredDivS_din;
input  [4:0] SxSquaredDivS_num_data_valid;
input  [4:0] SxSquaredDivS_fifo_cap;
input   SxSquaredDivS_full_n;
output   SxSquaredDivS_write;
output  [63:0] SyDivS_din;
input  [4:0] SyDivS_num_data_valid;
input  [4:0] SyDivS_fifo_cap;
input   SyDivS_full_n;
output   SyDivS_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg partialS_read;
reg partialSx_read;
reg partialSy_read;
reg last1_read;
reg SDiv1_write;
reg SxDivS_write;
reg SxSquaredDivS_write;
reg SyDivS_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [107:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    partialS_blk_n;
wire    ap_CS_fsm_state2;
reg    partialSx_blk_n;
reg    partialSy_blk_n;
reg    last1_blk_n;
reg    SDiv1_blk_n;
wire    ap_CS_fsm_state108;
reg   [0:0] tmp_reg_202;
reg   [0:0] icmp_ln103_reg_223;
reg    SxDivS_blk_n;
reg    SxSquaredDivS_blk_n;
reg    SyDivS_blk_n;
wire   [0:0] grp_nbreadreq_fu_64_p3;
reg    ap_block_state1;
reg  signed [63:0] partialS_read_reg_206;
reg    ap_block_state2;
reg  signed [63:0] partialSx_read_reg_212;
reg   [63:0] partialSy_read_reg_218;
wire   [0:0] icmp_ln103_fu_128_p2;
wire  signed [95:0] sext_ln105_fu_134_p1;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state38;
wire   [63:0] grp_fu_144_p2;
reg   [63:0] sdiv_ln107_reg_248;
wire    ap_CS_fsm_state102;
wire   [63:0] grp_fu_157_p2;
reg   [63:0] sdiv_ln111_reg_253;
wire    ap_CS_fsm_state103;
wire  signed [63:0] SxDivSTemp_fu_176_p1;
reg  signed [63:0] SxDivSTemp_reg_263;
wire   [63:0] grp_fu_166_p2;
reg   [63:0] sdiv_ln105_reg_273;
wire    ap_CS_fsm_state107;
reg   [63:0] trunc_ln1_reg_278;
reg    ap_predicate_op413_write_state108;
reg    ap_predicate_op414_write_state108;
reg    ap_predicate_op415_write_state108;
reg    ap_predicate_op417_write_state108;
reg    ap_block_state108;
wire   [95:0] grp_fu_144_p0;
wire  signed [63:0] grp_fu_144_p1;
wire   [95:0] grp_fu_157_p0;
wire  signed [63:0] grp_fu_157_p1;
wire   [95:0] grp_fu_124_p2;
reg   [107:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
reg    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
wire    ap_ST_fsm_state9_blk;
wire    ap_ST_fsm_state10_blk;
wire    ap_ST_fsm_state11_blk;
wire    ap_ST_fsm_state12_blk;
wire    ap_ST_fsm_state13_blk;
wire    ap_ST_fsm_state14_blk;
wire    ap_ST_fsm_state15_blk;
wire    ap_ST_fsm_state16_blk;
wire    ap_ST_fsm_state17_blk;
wire    ap_ST_fsm_state18_blk;
wire    ap_ST_fsm_state19_blk;
wire    ap_ST_fsm_state20_blk;
wire    ap_ST_fsm_state21_blk;
wire    ap_ST_fsm_state22_blk;
wire    ap_ST_fsm_state23_blk;
wire    ap_ST_fsm_state24_blk;
wire    ap_ST_fsm_state25_blk;
wire    ap_ST_fsm_state26_blk;
wire    ap_ST_fsm_state27_blk;
wire    ap_ST_fsm_state28_blk;
wire    ap_ST_fsm_state29_blk;
wire    ap_ST_fsm_state30_blk;
wire    ap_ST_fsm_state31_blk;
wire    ap_ST_fsm_state32_blk;
wire    ap_ST_fsm_state33_blk;
wire    ap_ST_fsm_state34_blk;
wire    ap_ST_fsm_state35_blk;
wire    ap_ST_fsm_state36_blk;
wire    ap_ST_fsm_state37_blk;
wire    ap_ST_fsm_state38_blk;
wire    ap_ST_fsm_state39_blk;
wire    ap_ST_fsm_state40_blk;
wire    ap_ST_fsm_state41_blk;
wire    ap_ST_fsm_state42_blk;
wire    ap_ST_fsm_state43_blk;
wire    ap_ST_fsm_state44_blk;
wire    ap_ST_fsm_state45_blk;
wire    ap_ST_fsm_state46_blk;
wire    ap_ST_fsm_state47_blk;
wire    ap_ST_fsm_state48_blk;
wire    ap_ST_fsm_state49_blk;
wire    ap_ST_fsm_state50_blk;
wire    ap_ST_fsm_state51_blk;
wire    ap_ST_fsm_state52_blk;
wire    ap_ST_fsm_state53_blk;
wire    ap_ST_fsm_state54_blk;
wire    ap_ST_fsm_state55_blk;
wire    ap_ST_fsm_state56_blk;
wire    ap_ST_fsm_state57_blk;
wire    ap_ST_fsm_state58_blk;
wire    ap_ST_fsm_state59_blk;
wire    ap_ST_fsm_state60_blk;
wire    ap_ST_fsm_state61_blk;
wire    ap_ST_fsm_state62_blk;
wire    ap_ST_fsm_state63_blk;
wire    ap_ST_fsm_state64_blk;
wire    ap_ST_fsm_state65_blk;
wire    ap_ST_fsm_state66_blk;
wire    ap_ST_fsm_state67_blk;
wire    ap_ST_fsm_state68_blk;
wire    ap_ST_fsm_state69_blk;
wire    ap_ST_fsm_state70_blk;
wire    ap_ST_fsm_state71_blk;
wire    ap_ST_fsm_state72_blk;
wire    ap_ST_fsm_state73_blk;
wire    ap_ST_fsm_state74_blk;
wire    ap_ST_fsm_state75_blk;
wire    ap_ST_fsm_state76_blk;
wire    ap_ST_fsm_state77_blk;
wire    ap_ST_fsm_state78_blk;
wire    ap_ST_fsm_state79_blk;
wire    ap_ST_fsm_state80_blk;
wire    ap_ST_fsm_state81_blk;
wire    ap_ST_fsm_state82_blk;
wire    ap_ST_fsm_state83_blk;
wire    ap_ST_fsm_state84_blk;
wire    ap_ST_fsm_state85_blk;
wire    ap_ST_fsm_state86_blk;
wire    ap_ST_fsm_state87_blk;
wire    ap_ST_fsm_state88_blk;
wire    ap_ST_fsm_state89_blk;
wire    ap_ST_fsm_state90_blk;
wire    ap_ST_fsm_state91_blk;
wire    ap_ST_fsm_state92_blk;
wire    ap_ST_fsm_state93_blk;
wire    ap_ST_fsm_state94_blk;
wire    ap_ST_fsm_state95_blk;
wire    ap_ST_fsm_state96_blk;
wire    ap_ST_fsm_state97_blk;
wire    ap_ST_fsm_state98_blk;
wire    ap_ST_fsm_state99_blk;
wire    ap_ST_fsm_state100_blk;
wire    ap_ST_fsm_state101_blk;
wire    ap_ST_fsm_state102_blk;
wire    ap_ST_fsm_state103_blk;
wire    ap_ST_fsm_state104_blk;
wire    ap_ST_fsm_state105_blk;
wire    ap_ST_fsm_state106_blk;
wire    ap_ST_fsm_state107_blk;
reg    ap_ST_fsm_state108_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 108'd1;
end

fit_mul_64s_64s_96_5_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 96 ))
mul_64s_64s_96_5_1_U22(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(SxDivSTemp_fu_176_p1),
    .din1(partialSx_read_reg_212),
    .ce(1'b1),
    .dout(grp_fu_124_p2)
);

fit_sdiv_96ns_64s_64_100_1 #(
    .ID( 1 ),
    .NUM_STAGE( 100 ),
    .din0_WIDTH( 96 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
sdiv_96ns_64s_64_100_1_U23(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_144_p0),
    .din1(grp_fu_144_p1),
    .ce(1'b1),
    .dout(grp_fu_144_p2)
);

fit_sdiv_96ns_64s_64_100_1 #(
    .ID( 1 ),
    .NUM_STAGE( 100 ),
    .din0_WIDTH( 96 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
sdiv_96ns_64s_64_100_1_U24(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_157_p0),
    .din1(grp_fu_157_p1),
    .ce(1'b1),
    .dout(grp_fu_157_p2)
);

fit_sdiv_66ns_64s_64_70_1 #(
    .ID( 1 ),
    .NUM_STAGE( 70 ),
    .din0_WIDTH( 66 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
sdiv_66ns_64s_64_70_1_U25(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(66'd18446744073709551616),
    .din1(partialS_read_reg_206),
    .ce(1'b1),
    .dout(grp_fu_166_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~(((1'b0 == SyDivS_full_n) & (ap_predicate_op417_write_state108 == 1'b1)) | ((1'b0 == SxSquaredDivS_full_n) & (ap_predicate_op415_write_state108 == 1'b1)) | ((1'b0 == SxDivS_full_n) & (ap_predicate_op414_write_state108 == 1'b1)) | ((1'b0 == SDiv1_full_n) & (ap_predicate_op413_write_state108 == 1'b1))) & (1'b1 == ap_CS_fsm_state108) & ((grp_nbreadreq_fu_64_p3 == 1'd0) | (tmp_reg_202 == 1'd0)))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state103)) begin
        SxDivSTemp_reg_263 <= SxDivSTemp_fu_176_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((~((last1_empty_n == 1'b0) | (partialSy_empty_n == 1'b0) | (partialSx_empty_n == 1'b0) | (partialS_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state2))) begin
        icmp_ln103_reg_223 <= icmp_ln103_fu_128_p2;
        partialS_read_reg_206 <= partialS_dout;
        partialSx_read_reg_212 <= partialSx_dout;
        partialSy_read_reg_218 <= partialSy_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state107)) begin
        sdiv_ln105_reg_273 <= grp_fu_166_p2;
        trunc_ln1_reg_278 <= {{grp_fu_124_p2[95:32]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state102)) begin
        sdiv_ln107_reg_248 <= grp_fu_144_p2;
        sdiv_ln111_reg_253 <= grp_fu_157_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        tmp_reg_202 <= grp_nbreadreq_fu_64_p3;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state108) & (icmp_ln103_reg_223 == 1'd0) & (tmp_reg_202 == 1'd1))) begin
        SDiv1_blk_n = SDiv1_full_n;
    end else begin
        SDiv1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~(((1'b0 == SyDivS_full_n) & (ap_predicate_op417_write_state108 == 1'b1)) | ((1'b0 == SxSquaredDivS_full_n) & (ap_predicate_op415_write_state108 == 1'b1)) | ((1'b0 == SxDivS_full_n) & (ap_predicate_op414_write_state108 == 1'b1)) | ((1'b0 == SDiv1_full_n) & (ap_predicate_op413_write_state108 == 1'b1))) & (ap_predicate_op413_write_state108 == 1'b1) & (1'b1 == ap_CS_fsm_state108))) begin
        SDiv1_write = 1'b1;
    end else begin
        SDiv1_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state108) & (icmp_ln103_reg_223 == 1'd0) & (tmp_reg_202 == 1'd1))) begin
        SxDivS_blk_n = SxDivS_full_n;
    end else begin
        SxDivS_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~(((1'b0 == SyDivS_full_n) & (ap_predicate_op417_write_state108 == 1'b1)) | ((1'b0 == SxSquaredDivS_full_n) & (ap_predicate_op415_write_state108 == 1'b1)) | ((1'b0 == SxDivS_full_n) & (ap_predicate_op414_write_state108 == 1'b1)) | ((1'b0 == SDiv1_full_n) & (ap_predicate_op413_write_state108 == 1'b1))) & (ap_predicate_op414_write_state108 == 1'b1) & (1'b1 == ap_CS_fsm_state108))) begin
        SxDivS_write = 1'b1;
    end else begin
        SxDivS_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state108) & (icmp_ln103_reg_223 == 1'd0) & (tmp_reg_202 == 1'd1))) begin
        SxSquaredDivS_blk_n = SxSquaredDivS_full_n;
    end else begin
        SxSquaredDivS_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~(((1'b0 == SyDivS_full_n) & (ap_predicate_op417_write_state108 == 1'b1)) | ((1'b0 == SxSquaredDivS_full_n) & (ap_predicate_op415_write_state108 == 1'b1)) | ((1'b0 == SxDivS_full_n) & (ap_predicate_op414_write_state108 == 1'b1)) | ((1'b0 == SDiv1_full_n) & (ap_predicate_op413_write_state108 == 1'b1))) & (ap_predicate_op415_write_state108 == 1'b1) & (1'b1 == ap_CS_fsm_state108))) begin
        SxSquaredDivS_write = 1'b1;
    end else begin
        SxSquaredDivS_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state108) & (icmp_ln103_reg_223 == 1'd0) & (tmp_reg_202 == 1'd1))) begin
        SyDivS_blk_n = SyDivS_full_n;
    end else begin
        SyDivS_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~(((1'b0 == SyDivS_full_n) & (ap_predicate_op417_write_state108 == 1'b1)) | ((1'b0 == SxSquaredDivS_full_n) & (ap_predicate_op415_write_state108 == 1'b1)) | ((1'b0 == SxDivS_full_n) & (ap_predicate_op414_write_state108 == 1'b1)) | ((1'b0 == SDiv1_full_n) & (ap_predicate_op413_write_state108 == 1'b1))) & (ap_predicate_op417_write_state108 == 1'b1) & (1'b1 == ap_CS_fsm_state108))) begin
        SyDivS_write = 1'b1;
    end else begin
        SyDivS_write = 1'b0;
    end
end

assign ap_ST_fsm_state100_blk = 1'b0;

assign ap_ST_fsm_state101_blk = 1'b0;

assign ap_ST_fsm_state102_blk = 1'b0;

assign ap_ST_fsm_state103_blk = 1'b0;

assign ap_ST_fsm_state104_blk = 1'b0;

assign ap_ST_fsm_state105_blk = 1'b0;

assign ap_ST_fsm_state106_blk = 1'b0;

assign ap_ST_fsm_state107_blk = 1'b0;

always @ (*) begin
    if ((((1'b0 == SyDivS_full_n) & (ap_predicate_op417_write_state108 == 1'b1)) | ((1'b0 == SxSquaredDivS_full_n) & (ap_predicate_op415_write_state108 == 1'b1)) | ((1'b0 == SxDivS_full_n) & (ap_predicate_op414_write_state108 == 1'b1)) | ((1'b0 == SDiv1_full_n) & (ap_predicate_op413_write_state108 == 1'b1)))) begin
        ap_ST_fsm_state108_blk = 1'b1;
    end else begin
        ap_ST_fsm_state108_blk = 1'b0;
    end
end

assign ap_ST_fsm_state10_blk = 1'b0;

assign ap_ST_fsm_state11_blk = 1'b0;

assign ap_ST_fsm_state12_blk = 1'b0;

assign ap_ST_fsm_state13_blk = 1'b0;

assign ap_ST_fsm_state14_blk = 1'b0;

assign ap_ST_fsm_state15_blk = 1'b0;

assign ap_ST_fsm_state16_blk = 1'b0;

assign ap_ST_fsm_state17_blk = 1'b0;

assign ap_ST_fsm_state18_blk = 1'b0;

assign ap_ST_fsm_state19_blk = 1'b0;

always @ (*) begin
    if (((ap_done_reg == 1'b1) | (ap_start == 1'b0))) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state20_blk = 1'b0;

assign ap_ST_fsm_state21_blk = 1'b0;

assign ap_ST_fsm_state22_blk = 1'b0;

assign ap_ST_fsm_state23_blk = 1'b0;

assign ap_ST_fsm_state24_blk = 1'b0;

assign ap_ST_fsm_state25_blk = 1'b0;

assign ap_ST_fsm_state26_blk = 1'b0;

assign ap_ST_fsm_state27_blk = 1'b0;

assign ap_ST_fsm_state28_blk = 1'b0;

assign ap_ST_fsm_state29_blk = 1'b0;

always @ (*) begin
    if (((last1_empty_n == 1'b0) | (partialSy_empty_n == 1'b0) | (partialSx_empty_n == 1'b0) | (partialS_empty_n == 1'b0))) begin
        ap_ST_fsm_state2_blk = 1'b1;
    end else begin
        ap_ST_fsm_state2_blk = 1'b0;
    end
end

assign ap_ST_fsm_state30_blk = 1'b0;

assign ap_ST_fsm_state31_blk = 1'b0;

assign ap_ST_fsm_state32_blk = 1'b0;

assign ap_ST_fsm_state33_blk = 1'b0;

assign ap_ST_fsm_state34_blk = 1'b0;

assign ap_ST_fsm_state35_blk = 1'b0;

assign ap_ST_fsm_state36_blk = 1'b0;

assign ap_ST_fsm_state37_blk = 1'b0;

assign ap_ST_fsm_state38_blk = 1'b0;

assign ap_ST_fsm_state39_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state40_blk = 1'b0;

assign ap_ST_fsm_state41_blk = 1'b0;

assign ap_ST_fsm_state42_blk = 1'b0;

assign ap_ST_fsm_state43_blk = 1'b0;

assign ap_ST_fsm_state44_blk = 1'b0;

assign ap_ST_fsm_state45_blk = 1'b0;

assign ap_ST_fsm_state46_blk = 1'b0;

assign ap_ST_fsm_state47_blk = 1'b0;

assign ap_ST_fsm_state48_blk = 1'b0;

assign ap_ST_fsm_state49_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state50_blk = 1'b0;

assign ap_ST_fsm_state51_blk = 1'b0;

assign ap_ST_fsm_state52_blk = 1'b0;

assign ap_ST_fsm_state53_blk = 1'b0;

assign ap_ST_fsm_state54_blk = 1'b0;

assign ap_ST_fsm_state55_blk = 1'b0;

assign ap_ST_fsm_state56_blk = 1'b0;

assign ap_ST_fsm_state57_blk = 1'b0;

assign ap_ST_fsm_state58_blk = 1'b0;

assign ap_ST_fsm_state59_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state60_blk = 1'b0;

assign ap_ST_fsm_state61_blk = 1'b0;

assign ap_ST_fsm_state62_blk = 1'b0;

assign ap_ST_fsm_state63_blk = 1'b0;

assign ap_ST_fsm_state64_blk = 1'b0;

assign ap_ST_fsm_state65_blk = 1'b0;

assign ap_ST_fsm_state66_blk = 1'b0;

assign ap_ST_fsm_state67_blk = 1'b0;

assign ap_ST_fsm_state68_blk = 1'b0;

assign ap_ST_fsm_state69_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state70_blk = 1'b0;

assign ap_ST_fsm_state71_blk = 1'b0;

assign ap_ST_fsm_state72_blk = 1'b0;

assign ap_ST_fsm_state73_blk = 1'b0;

assign ap_ST_fsm_state74_blk = 1'b0;

assign ap_ST_fsm_state75_blk = 1'b0;

assign ap_ST_fsm_state76_blk = 1'b0;

assign ap_ST_fsm_state77_blk = 1'b0;

assign ap_ST_fsm_state78_blk = 1'b0;

assign ap_ST_fsm_state79_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state80_blk = 1'b0;

assign ap_ST_fsm_state81_blk = 1'b0;

assign ap_ST_fsm_state82_blk = 1'b0;

assign ap_ST_fsm_state83_blk = 1'b0;

assign ap_ST_fsm_state84_blk = 1'b0;

assign ap_ST_fsm_state85_blk = 1'b0;

assign ap_ST_fsm_state86_blk = 1'b0;

assign ap_ST_fsm_state87_blk = 1'b0;

assign ap_ST_fsm_state88_blk = 1'b0;

assign ap_ST_fsm_state89_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

assign ap_ST_fsm_state90_blk = 1'b0;

assign ap_ST_fsm_state91_blk = 1'b0;

assign ap_ST_fsm_state92_blk = 1'b0;

assign ap_ST_fsm_state93_blk = 1'b0;

assign ap_ST_fsm_state94_blk = 1'b0;

assign ap_ST_fsm_state95_blk = 1'b0;

assign ap_ST_fsm_state96_blk = 1'b0;

assign ap_ST_fsm_state97_blk = 1'b0;

assign ap_ST_fsm_state98_blk = 1'b0;

assign ap_ST_fsm_state99_blk = 1'b0;

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if ((~(((1'b0 == SyDivS_full_n) & (ap_predicate_op417_write_state108 == 1'b1)) | ((1'b0 == SxSquaredDivS_full_n) & (ap_predicate_op415_write_state108 == 1'b1)) | ((1'b0 == SxDivS_full_n) & (ap_predicate_op414_write_state108 == 1'b1)) | ((1'b0 == SDiv1_full_n) & (ap_predicate_op413_write_state108 == 1'b1))) & (1'b1 == ap_CS_fsm_state108) & ((grp_nbreadreq_fu_64_p3 == 1'd0) | (tmp_reg_202 == 1'd0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~(((1'b0 == SyDivS_full_n) & (ap_predicate_op417_write_state108 == 1'b1)) | ((1'b0 == SxSquaredDivS_full_n) & (ap_predicate_op415_write_state108 == 1'b1)) | ((1'b0 == SxDivS_full_n) & (ap_predicate_op414_write_state108 == 1'b1)) | ((1'b0 == SDiv1_full_n) & (ap_predicate_op413_write_state108 == 1'b1))) & (1'b1 == ap_CS_fsm_state108) & ((grp_nbreadreq_fu_64_p3 == 1'd0) | (tmp_reg_202 == 1'd0)))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        last1_blk_n = last1_empty_n;
    end else begin
        last1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((last1_empty_n == 1'b0) | (partialSy_empty_n == 1'b0) | (partialSx_empty_n == 1'b0) | (partialS_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state2))) begin
        last1_read = 1'b1;
    end else begin
        last1_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        partialS_blk_n = partialS_empty_n;
    end else begin
        partialS_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((last1_empty_n == 1'b0) | (partialSy_empty_n == 1'b0) | (partialSx_empty_n == 1'b0) | (partialS_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state2))) begin
        partialS_read = 1'b1;
    end else begin
        partialS_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        partialSx_blk_n = partialSx_empty_n;
    end else begin
        partialSx_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((last1_empty_n == 1'b0) | (partialSy_empty_n == 1'b0) | (partialSx_empty_n == 1'b0) | (partialS_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state2))) begin
        partialSx_read = 1'b1;
    end else begin
        partialSx_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        partialSy_blk_n = partialSy_empty_n;
    end else begin
        partialSy_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((last1_empty_n == 1'b0) | (partialSy_empty_n == 1'b0) | (partialSx_empty_n == 1'b0) | (partialS_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state2))) begin
        partialSy_read = 1'b1;
    end else begin
        partialSy_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (grp_nbreadreq_fu_64_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (grp_nbreadreq_fu_64_p3 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state108;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if ((~((last1_empty_n == 1'b0) | (partialSy_empty_n == 1'b0) | (partialSx_empty_n == 1'b0) | (partialS_empty_n == 1'b0)) & (icmp_ln103_fu_128_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state108;
            end else if ((~((last1_empty_n == 1'b0) | (partialSy_empty_n == 1'b0) | (partialSx_empty_n == 1'b0) | (partialS_empty_n == 1'b0)) & (icmp_ln103_fu_128_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state67;
        end
        ap_ST_fsm_state67 : begin
            ap_NS_fsm = ap_ST_fsm_state68;
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_state69;
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state70;
        end
        ap_ST_fsm_state70 : begin
            ap_NS_fsm = ap_ST_fsm_state71;
        end
        ap_ST_fsm_state71 : begin
            ap_NS_fsm = ap_ST_fsm_state72;
        end
        ap_ST_fsm_state72 : begin
            ap_NS_fsm = ap_ST_fsm_state73;
        end
        ap_ST_fsm_state73 : begin
            ap_NS_fsm = ap_ST_fsm_state74;
        end
        ap_ST_fsm_state74 : begin
            ap_NS_fsm = ap_ST_fsm_state75;
        end
        ap_ST_fsm_state75 : begin
            ap_NS_fsm = ap_ST_fsm_state76;
        end
        ap_ST_fsm_state76 : begin
            ap_NS_fsm = ap_ST_fsm_state77;
        end
        ap_ST_fsm_state77 : begin
            ap_NS_fsm = ap_ST_fsm_state78;
        end
        ap_ST_fsm_state78 : begin
            ap_NS_fsm = ap_ST_fsm_state79;
        end
        ap_ST_fsm_state79 : begin
            ap_NS_fsm = ap_ST_fsm_state80;
        end
        ap_ST_fsm_state80 : begin
            ap_NS_fsm = ap_ST_fsm_state81;
        end
        ap_ST_fsm_state81 : begin
            ap_NS_fsm = ap_ST_fsm_state82;
        end
        ap_ST_fsm_state82 : begin
            ap_NS_fsm = ap_ST_fsm_state83;
        end
        ap_ST_fsm_state83 : begin
            ap_NS_fsm = ap_ST_fsm_state84;
        end
        ap_ST_fsm_state84 : begin
            ap_NS_fsm = ap_ST_fsm_state85;
        end
        ap_ST_fsm_state85 : begin
            ap_NS_fsm = ap_ST_fsm_state86;
        end
        ap_ST_fsm_state86 : begin
            ap_NS_fsm = ap_ST_fsm_state87;
        end
        ap_ST_fsm_state87 : begin
            ap_NS_fsm = ap_ST_fsm_state88;
        end
        ap_ST_fsm_state88 : begin
            ap_NS_fsm = ap_ST_fsm_state89;
        end
        ap_ST_fsm_state89 : begin
            ap_NS_fsm = ap_ST_fsm_state90;
        end
        ap_ST_fsm_state90 : begin
            ap_NS_fsm = ap_ST_fsm_state91;
        end
        ap_ST_fsm_state91 : begin
            ap_NS_fsm = ap_ST_fsm_state92;
        end
        ap_ST_fsm_state92 : begin
            ap_NS_fsm = ap_ST_fsm_state93;
        end
        ap_ST_fsm_state93 : begin
            ap_NS_fsm = ap_ST_fsm_state94;
        end
        ap_ST_fsm_state94 : begin
            ap_NS_fsm = ap_ST_fsm_state95;
        end
        ap_ST_fsm_state95 : begin
            ap_NS_fsm = ap_ST_fsm_state96;
        end
        ap_ST_fsm_state96 : begin
            ap_NS_fsm = ap_ST_fsm_state97;
        end
        ap_ST_fsm_state97 : begin
            ap_NS_fsm = ap_ST_fsm_state98;
        end
        ap_ST_fsm_state98 : begin
            ap_NS_fsm = ap_ST_fsm_state99;
        end
        ap_ST_fsm_state99 : begin
            ap_NS_fsm = ap_ST_fsm_state100;
        end
        ap_ST_fsm_state100 : begin
            ap_NS_fsm = ap_ST_fsm_state101;
        end
        ap_ST_fsm_state101 : begin
            ap_NS_fsm = ap_ST_fsm_state102;
        end
        ap_ST_fsm_state102 : begin
            ap_NS_fsm = ap_ST_fsm_state103;
        end
        ap_ST_fsm_state103 : begin
            ap_NS_fsm = ap_ST_fsm_state104;
        end
        ap_ST_fsm_state104 : begin
            ap_NS_fsm = ap_ST_fsm_state105;
        end
        ap_ST_fsm_state105 : begin
            ap_NS_fsm = ap_ST_fsm_state106;
        end
        ap_ST_fsm_state106 : begin
            ap_NS_fsm = ap_ST_fsm_state107;
        end
        ap_ST_fsm_state107 : begin
            ap_NS_fsm = ap_ST_fsm_state108;
        end
        ap_ST_fsm_state108 : begin
            if ((~(((1'b0 == SyDivS_full_n) & (ap_predicate_op417_write_state108 == 1'b1)) | ((1'b0 == SxSquaredDivS_full_n) & (ap_predicate_op415_write_state108 == 1'b1)) | ((1'b0 == SxDivS_full_n) & (ap_predicate_op414_write_state108 == 1'b1)) | ((1'b0 == SDiv1_full_n) & (ap_predicate_op413_write_state108 == 1'b1))) & (1'b1 == ap_CS_fsm_state108) & ((grp_nbreadreq_fu_64_p3 == 1'd0) | (tmp_reg_202 == 1'd0)))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if ((~(((1'b0 == SyDivS_full_n) & (ap_predicate_op417_write_state108 == 1'b1)) | ((1'b0 == SxSquaredDivS_full_n) & (ap_predicate_op415_write_state108 == 1'b1)) | ((1'b0 == SxDivS_full_n) & (ap_predicate_op414_write_state108 == 1'b1)) | ((1'b0 == SDiv1_full_n) & (ap_predicate_op413_write_state108 == 1'b1))) & (grp_nbreadreq_fu_64_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state108) & (tmp_reg_202 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state108;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign SDiv1_din = sdiv_ln105_reg_273[63:0];

assign SxDivSTemp_fu_176_p1 = sdiv_ln107_reg_248[63:0];

assign SxDivS_din = SxDivSTemp_reg_263;

assign SxSquaredDivS_din = trunc_ln1_reg_278;

assign SyDivS_din = sdiv_ln111_reg_253[63:0];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state102 = ap_CS_fsm[32'd101];

assign ap_CS_fsm_state103 = ap_CS_fsm[32'd102];

assign ap_CS_fsm_state107 = ap_CS_fsm[32'd106];

assign ap_CS_fsm_state108 = ap_CS_fsm[32'd107];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state38 = ap_CS_fsm[32'd37];

always @ (*) begin
    ap_block_state1 = ((ap_done_reg == 1'b1) | (ap_start == 1'b0));
end

always @ (*) begin
    ap_block_state108 = (((1'b0 == SyDivS_full_n) & (ap_predicate_op417_write_state108 == 1'b1)) | ((1'b0 == SxSquaredDivS_full_n) & (ap_predicate_op415_write_state108 == 1'b1)) | ((1'b0 == SxDivS_full_n) & (ap_predicate_op414_write_state108 == 1'b1)) | ((1'b0 == SDiv1_full_n) & (ap_predicate_op413_write_state108 == 1'b1)));
end

always @ (*) begin
    ap_block_state2 = ((last1_empty_n == 1'b0) | (partialSy_empty_n == 1'b0) | (partialSx_empty_n == 1'b0) | (partialS_empty_n == 1'b0));
end

always @ (*) begin
    ap_predicate_op413_write_state108 = ((icmp_ln103_reg_223 == 1'd0) & (tmp_reg_202 == 1'd1));
end

always @ (*) begin
    ap_predicate_op414_write_state108 = ((icmp_ln103_reg_223 == 1'd0) & (tmp_reg_202 == 1'd1));
end

always @ (*) begin
    ap_predicate_op415_write_state108 = ((icmp_ln103_reg_223 == 1'd0) & (tmp_reg_202 == 1'd1));
end

always @ (*) begin
    ap_predicate_op417_write_state108 = ((icmp_ln103_reg_223 == 1'd0) & (tmp_reg_202 == 1'd1));
end

assign grp_fu_144_p0 = {{partialSx_read_reg_212}, {32'd0}};

assign grp_fu_144_p1 = sext_ln105_fu_134_p1;

assign grp_fu_157_p0 = {{partialSy_read_reg_218}, {32'd0}};

assign grp_fu_157_p1 = sext_ln105_fu_134_p1;

assign grp_nbreadreq_fu_64_p3 = last1_empty_n;

assign icmp_ln103_fu_128_p2 = ((last1_dout == 2'd0) ? 1'b1 : 1'b0);

assign sext_ln105_fu_134_p1 = partialS_read_reg_206;

endmodule //fit_interStage1
