-- ==============================================================
-- Generated by Vitis HLS v2023.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity fit is
generic (
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 4;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32 );
port (
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    interrupt : OUT STD_LOGIC;
    input_r_TDATA : IN STD_LOGIC_VECTOR (63 downto 0);
    output_r_TDATA : OUT STD_LOGIC_VECTOR (383 downto 0);
    input_r_TVALID : IN STD_LOGIC;
    input_r_TREADY : OUT STD_LOGIC;
    output_r_TVALID : OUT STD_LOGIC;
    output_r_TREADY : IN STD_LOGIC );
end;


architecture behav of fit is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "fit_fit,hls_ip_2023_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7s100-fgga676-2,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=7.030000,HLS_SYN_LAT=-1,HLS_SYN_TPT=-1,HLS_SYN_MEM=19,HLS_SYN_DSP=0,HLS_SYN_FF=55825,HLS_SYN_LUT=41606,HLS_VERSION=2023_1}";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';

attribute shreg_extract : string;
    signal ap_rst_reg_2 : STD_LOGIC := '1';
attribute shreg_extract of ap_rst_reg_2 : signal is "no";
    signal ap_rst_reg_1 : STD_LOGIC := '1';
attribute shreg_extract of ap_rst_reg_1 : signal is "no";
    signal ap_rst_n_inv : STD_LOGIC := '1';
attribute shreg_extract of ap_rst_n_inv : signal is "no";
    signal ap_start : STD_LOGIC;
    signal ap_ready : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_continue : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal readStage_U0_ap_start : STD_LOGIC;
    signal readStage_U0_start_full_n : STD_LOGIC;
    signal readStage_U0_ap_done : STD_LOGIC;
    signal readStage_U0_ap_continue : STD_LOGIC;
    signal readStage_U0_ap_idle : STD_LOGIC;
    signal readStage_U0_ap_ready : STD_LOGIC;
    signal readStage_U0_x1_din : STD_LOGIC_VECTOR (11 downto 0);
    signal readStage_U0_x1_write : STD_LOGIC;
    signal readStage_U0_x2_din : STD_LOGIC_VECTOR (11 downto 0);
    signal readStage_U0_x2_write : STD_LOGIC;
    signal readStage_U0_y1_din : STD_LOGIC_VECTOR (11 downto 0);
    signal readStage_U0_y1_write : STD_LOGIC;
    signal readStage_U0_y2_din : STD_LOGIC_VECTOR (11 downto 0);
    signal readStage_U0_y2_write : STD_LOGIC;
    signal readStage_U0_sigmaDiv1_din : STD_LOGIC_VECTOR (63 downto 0);
    signal readStage_U0_sigmaDiv1_write : STD_LOGIC;
    signal readStage_U0_sigmaSquaredDiv1_din : STD_LOGIC_VECTOR (63 downto 0);
    signal readStage_U0_sigmaSquaredDiv1_write : STD_LOGIC;
    signal readStage_U0_last1_din : STD_LOGIC_VECTOR (1 downto 0);
    signal readStage_U0_last1_write : STD_LOGIC;
    signal readStage_U0_last2_din : STD_LOGIC_VECTOR (1 downto 0);
    signal readStage_U0_last2_write : STD_LOGIC;
    signal readStage_U0_last3_din : STD_LOGIC_VECTOR (1 downto 0);
    signal readStage_U0_last3_write : STD_LOGIC;
    signal readStage_U0_partialS_din : STD_LOGIC_VECTOR (63 downto 0);
    signal readStage_U0_partialS_write : STD_LOGIC;
    signal readStage_U0_partialSx_din : STD_LOGIC_VECTOR (63 downto 0);
    signal readStage_U0_partialSx_write : STD_LOGIC;
    signal readStage_U0_partialSy_din : STD_LOGIC_VECTOR (63 downto 0);
    signal readStage_U0_partialSy_write : STD_LOGIC;
    signal readStage_U0_start_out : STD_LOGIC;
    signal readStage_U0_start_write : STD_LOGIC;
    signal readStage_U0_input_r_TREADY : STD_LOGIC;
    signal interStage1_U0_ap_start : STD_LOGIC;
    signal interStage1_U0_ap_done : STD_LOGIC;
    signal interStage1_U0_ap_continue : STD_LOGIC;
    signal interStage1_U0_ap_idle : STD_LOGIC;
    signal interStage1_U0_ap_ready : STD_LOGIC;
    signal interStage1_U0_partialS_read : STD_LOGIC;
    signal interStage1_U0_partialSx_read : STD_LOGIC;
    signal interStage1_U0_partialSy_read : STD_LOGIC;
    signal interStage1_U0_last1_read : STD_LOGIC;
    signal interStage1_U0_SDiv1_din : STD_LOGIC_VECTOR (63 downto 0);
    signal interStage1_U0_SDiv1_write : STD_LOGIC;
    signal interStage1_U0_SxDivS_din : STD_LOGIC_VECTOR (63 downto 0);
    signal interStage1_U0_SxDivS_write : STD_LOGIC;
    signal interStage1_U0_SxSquaredDivS_din : STD_LOGIC_VECTOR (63 downto 0);
    signal interStage1_U0_SxSquaredDivS_write : STD_LOGIC;
    signal interStage1_U0_SyDivS_din : STD_LOGIC_VECTOR (63 downto 0);
    signal interStage1_U0_SyDivS_write : STD_LOGIC;
    signal interStage2_U0_ap_start : STD_LOGIC;
    signal interStage2_U0_ap_done : STD_LOGIC;
    signal interStage2_U0_ap_continue : STD_LOGIC;
    signal interStage2_U0_ap_idle : STD_LOGIC;
    signal interStage2_U0_ap_ready : STD_LOGIC;
    signal interStage2_U0_x1_read : STD_LOGIC;
    signal interStage2_U0_y1_read : STD_LOGIC;
    signal interStage2_U0_sigmaDiv1_read : STD_LOGIC;
    signal interStage2_U0_SDiv1_read : STD_LOGIC;
    signal interStage2_U0_SxDivS_read : STD_LOGIC;
    signal interStage2_U0_SxSquaredDivS_read : STD_LOGIC;
    signal interStage2_U0_SyDivS_read : STD_LOGIC;
    signal interStage2_U0_last2_read : STD_LOGIC;
    signal interStage2_U0_resultStream_din : STD_LOGIC_VECTOR (331 downto 0);
    signal interStage2_U0_resultStream_write : STD_LOGIC;
    signal finalStage_U0_ap_start : STD_LOGIC;
    signal finalStage_U0_ap_done : STD_LOGIC;
    signal finalStage_U0_ap_continue : STD_LOGIC;
    signal finalStage_U0_ap_idle : STD_LOGIC;
    signal finalStage_U0_ap_ready : STD_LOGIC;
    signal finalStage_U0_resultStream_read : STD_LOGIC;
    signal finalStage_U0_x2_read : STD_LOGIC;
    signal finalStage_U0_y2_read : STD_LOGIC;
    signal finalStage_U0_sigmaSquaredDiv1_read : STD_LOGIC;
    signal finalStage_U0_last3_read : STD_LOGIC;
    signal finalStage_U0_output_r_TDATA : STD_LOGIC_VECTOR (383 downto 0);
    signal finalStage_U0_output_r_TVALID : STD_LOGIC;
    signal partialS_full_n : STD_LOGIC;
    signal partialS_dout : STD_LOGIC_VECTOR (63 downto 0);
    signal partialS_num_data_valid : STD_LOGIC_VECTOR (4 downto 0);
    signal partialS_fifo_cap : STD_LOGIC_VECTOR (4 downto 0);
    signal partialS_empty_n : STD_LOGIC;
    signal partialSx_full_n : STD_LOGIC;
    signal partialSx_dout : STD_LOGIC_VECTOR (63 downto 0);
    signal partialSx_num_data_valid : STD_LOGIC_VECTOR (4 downto 0);
    signal partialSx_fifo_cap : STD_LOGIC_VECTOR (4 downto 0);
    signal partialSx_empty_n : STD_LOGIC;
    signal partialSy_full_n : STD_LOGIC;
    signal partialSy_dout : STD_LOGIC_VECTOR (63 downto 0);
    signal partialSy_num_data_valid : STD_LOGIC_VECTOR (4 downto 0);
    signal partialSy_fifo_cap : STD_LOGIC_VECTOR (4 downto 0);
    signal partialSy_empty_n : STD_LOGIC;
    signal x1_full_n : STD_LOGIC;
    signal x1_dout : STD_LOGIC_VECTOR (11 downto 0);
    signal x1_num_data_valid : STD_LOGIC_VECTOR (4 downto 0);
    signal x1_fifo_cap : STD_LOGIC_VECTOR (4 downto 0);
    signal x1_empty_n : STD_LOGIC;
    signal x2_full_n : STD_LOGIC;
    signal x2_dout : STD_LOGIC_VECTOR (11 downto 0);
    signal x2_num_data_valid : STD_LOGIC_VECTOR (4 downto 0);
    signal x2_fifo_cap : STD_LOGIC_VECTOR (4 downto 0);
    signal x2_empty_n : STD_LOGIC;
    signal y1_full_n : STD_LOGIC;
    signal y1_dout : STD_LOGIC_VECTOR (11 downto 0);
    signal y1_num_data_valid : STD_LOGIC_VECTOR (4 downto 0);
    signal y1_fifo_cap : STD_LOGIC_VECTOR (4 downto 0);
    signal y1_empty_n : STD_LOGIC;
    signal y2_full_n : STD_LOGIC;
    signal y2_dout : STD_LOGIC_VECTOR (11 downto 0);
    signal y2_num_data_valid : STD_LOGIC_VECTOR (4 downto 0);
    signal y2_fifo_cap : STD_LOGIC_VECTOR (4 downto 0);
    signal y2_empty_n : STD_LOGIC;
    signal sigmaDiv1_full_n : STD_LOGIC;
    signal sigmaDiv1_dout : STD_LOGIC_VECTOR (63 downto 0);
    signal sigmaDiv1_num_data_valid : STD_LOGIC_VECTOR (4 downto 0);
    signal sigmaDiv1_fifo_cap : STD_LOGIC_VECTOR (4 downto 0);
    signal sigmaDiv1_empty_n : STD_LOGIC;
    signal sigmaSquaredDiv1_full_n : STD_LOGIC;
    signal sigmaSquaredDiv1_dout : STD_LOGIC_VECTOR (63 downto 0);
    signal sigmaSquaredDiv1_num_data_valid : STD_LOGIC_VECTOR (4 downto 0);
    signal sigmaSquaredDiv1_fifo_cap : STD_LOGIC_VECTOR (4 downto 0);
    signal sigmaSquaredDiv1_empty_n : STD_LOGIC;
    signal last1_full_n : STD_LOGIC;
    signal last1_dout : STD_LOGIC_VECTOR (1 downto 0);
    signal last1_num_data_valid : STD_LOGIC_VECTOR (4 downto 0);
    signal last1_fifo_cap : STD_LOGIC_VECTOR (4 downto 0);
    signal last1_empty_n : STD_LOGIC;
    signal last2_full_n : STD_LOGIC;
    signal last2_dout : STD_LOGIC_VECTOR (1 downto 0);
    signal last2_num_data_valid : STD_LOGIC_VECTOR (4 downto 0);
    signal last2_fifo_cap : STD_LOGIC_VECTOR (4 downto 0);
    signal last2_empty_n : STD_LOGIC;
    signal last3_full_n : STD_LOGIC;
    signal last3_dout : STD_LOGIC_VECTOR (1 downto 0);
    signal last3_num_data_valid : STD_LOGIC_VECTOR (4 downto 0);
    signal last3_fifo_cap : STD_LOGIC_VECTOR (4 downto 0);
    signal last3_empty_n : STD_LOGIC;
    signal SDiv1_full_n : STD_LOGIC;
    signal SDiv1_dout : STD_LOGIC_VECTOR (63 downto 0);
    signal SDiv1_num_data_valid : STD_LOGIC_VECTOR (4 downto 0);
    signal SDiv1_fifo_cap : STD_LOGIC_VECTOR (4 downto 0);
    signal SDiv1_empty_n : STD_LOGIC;
    signal SxDivS_full_n : STD_LOGIC;
    signal SxDivS_dout : STD_LOGIC_VECTOR (63 downto 0);
    signal SxDivS_num_data_valid : STD_LOGIC_VECTOR (4 downto 0);
    signal SxDivS_fifo_cap : STD_LOGIC_VECTOR (4 downto 0);
    signal SxDivS_empty_n : STD_LOGIC;
    signal SxSquaredDivS_full_n : STD_LOGIC;
    signal SxSquaredDivS_dout : STD_LOGIC_VECTOR (63 downto 0);
    signal SxSquaredDivS_num_data_valid : STD_LOGIC_VECTOR (4 downto 0);
    signal SxSquaredDivS_fifo_cap : STD_LOGIC_VECTOR (4 downto 0);
    signal SxSquaredDivS_empty_n : STD_LOGIC;
    signal SyDivS_full_n : STD_LOGIC;
    signal SyDivS_dout : STD_LOGIC_VECTOR (63 downto 0);
    signal SyDivS_num_data_valid : STD_LOGIC_VECTOR (4 downto 0);
    signal SyDivS_fifo_cap : STD_LOGIC_VECTOR (4 downto 0);
    signal SyDivS_empty_n : STD_LOGIC;
    signal resultStream_full_n : STD_LOGIC;
    signal resultStream_dout : STD_LOGIC_VECTOR (331 downto 0);
    signal resultStream_num_data_valid : STD_LOGIC_VECTOR (4 downto 0);
    signal resultStream_fifo_cap : STD_LOGIC_VECTOR (4 downto 0);
    signal resultStream_empty_n : STD_LOGIC;
    signal start_for_interStage1_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_interStage1_U0_full_n : STD_LOGIC;
    signal start_for_interStage1_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_interStage1_U0_empty_n : STD_LOGIC;
    signal start_for_interStage2_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_interStage2_U0_full_n : STD_LOGIC;
    signal start_for_interStage2_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_interStage2_U0_empty_n : STD_LOGIC;
    signal start_for_finalStage_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_finalStage_U0_full_n : STD_LOGIC;
    signal start_for_finalStage_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_finalStage_U0_empty_n : STD_LOGIC;

    component fit_readStage IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        input_r_TVALID : IN STD_LOGIC;
        x1_din : OUT STD_LOGIC_VECTOR (11 downto 0);
        x1_num_data_valid : IN STD_LOGIC_VECTOR (4 downto 0);
        x1_fifo_cap : IN STD_LOGIC_VECTOR (4 downto 0);
        x1_full_n : IN STD_LOGIC;
        x1_write : OUT STD_LOGIC;
        x2_din : OUT STD_LOGIC_VECTOR (11 downto 0);
        x2_num_data_valid : IN STD_LOGIC_VECTOR (4 downto 0);
        x2_fifo_cap : IN STD_LOGIC_VECTOR (4 downto 0);
        x2_full_n : IN STD_LOGIC;
        x2_write : OUT STD_LOGIC;
        y1_din : OUT STD_LOGIC_VECTOR (11 downto 0);
        y1_num_data_valid : IN STD_LOGIC_VECTOR (4 downto 0);
        y1_fifo_cap : IN STD_LOGIC_VECTOR (4 downto 0);
        y1_full_n : IN STD_LOGIC;
        y1_write : OUT STD_LOGIC;
        y2_din : OUT STD_LOGIC_VECTOR (11 downto 0);
        y2_num_data_valid : IN STD_LOGIC_VECTOR (4 downto 0);
        y2_fifo_cap : IN STD_LOGIC_VECTOR (4 downto 0);
        y2_full_n : IN STD_LOGIC;
        y2_write : OUT STD_LOGIC;
        sigmaDiv1_din : OUT STD_LOGIC_VECTOR (63 downto 0);
        sigmaDiv1_num_data_valid : IN STD_LOGIC_VECTOR (4 downto 0);
        sigmaDiv1_fifo_cap : IN STD_LOGIC_VECTOR (4 downto 0);
        sigmaDiv1_full_n : IN STD_LOGIC;
        sigmaDiv1_write : OUT STD_LOGIC;
        sigmaSquaredDiv1_din : OUT STD_LOGIC_VECTOR (63 downto 0);
        sigmaSquaredDiv1_num_data_valid : IN STD_LOGIC_VECTOR (4 downto 0);
        sigmaSquaredDiv1_fifo_cap : IN STD_LOGIC_VECTOR (4 downto 0);
        sigmaSquaredDiv1_full_n : IN STD_LOGIC;
        sigmaSquaredDiv1_write : OUT STD_LOGIC;
        last1_din : OUT STD_LOGIC_VECTOR (1 downto 0);
        last1_num_data_valid : IN STD_LOGIC_VECTOR (4 downto 0);
        last1_fifo_cap : IN STD_LOGIC_VECTOR (4 downto 0);
        last1_full_n : IN STD_LOGIC;
        last1_write : OUT STD_LOGIC;
        last2_din : OUT STD_LOGIC_VECTOR (1 downto 0);
        last2_num_data_valid : IN STD_LOGIC_VECTOR (4 downto 0);
        last2_fifo_cap : IN STD_LOGIC_VECTOR (4 downto 0);
        last2_full_n : IN STD_LOGIC;
        last2_write : OUT STD_LOGIC;
        last3_din : OUT STD_LOGIC_VECTOR (1 downto 0);
        last3_num_data_valid : IN STD_LOGIC_VECTOR (4 downto 0);
        last3_fifo_cap : IN STD_LOGIC_VECTOR (4 downto 0);
        last3_full_n : IN STD_LOGIC;
        last3_write : OUT STD_LOGIC;
        partialS_din : OUT STD_LOGIC_VECTOR (63 downto 0);
        partialS_num_data_valid : IN STD_LOGIC_VECTOR (4 downto 0);
        partialS_fifo_cap : IN STD_LOGIC_VECTOR (4 downto 0);
        partialS_full_n : IN STD_LOGIC;
        partialS_write : OUT STD_LOGIC;
        partialSx_din : OUT STD_LOGIC_VECTOR (63 downto 0);
        partialSx_num_data_valid : IN STD_LOGIC_VECTOR (4 downto 0);
        partialSx_fifo_cap : IN STD_LOGIC_VECTOR (4 downto 0);
        partialSx_full_n : IN STD_LOGIC;
        partialSx_write : OUT STD_LOGIC;
        partialSy_din : OUT STD_LOGIC_VECTOR (63 downto 0);
        partialSy_num_data_valid : IN STD_LOGIC_VECTOR (4 downto 0);
        partialSy_fifo_cap : IN STD_LOGIC_VECTOR (4 downto 0);
        partialSy_full_n : IN STD_LOGIC;
        partialSy_write : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        input_r_TDATA : IN STD_LOGIC_VECTOR (63 downto 0);
        input_r_TREADY : OUT STD_LOGIC );
    end component;


    component fit_interStage1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        partialS_dout : IN STD_LOGIC_VECTOR (63 downto 0);
        partialS_num_data_valid : IN STD_LOGIC_VECTOR (4 downto 0);
        partialS_fifo_cap : IN STD_LOGIC_VECTOR (4 downto 0);
        partialS_empty_n : IN STD_LOGIC;
        partialS_read : OUT STD_LOGIC;
        partialSx_dout : IN STD_LOGIC_VECTOR (63 downto 0);
        partialSx_num_data_valid : IN STD_LOGIC_VECTOR (4 downto 0);
        partialSx_fifo_cap : IN STD_LOGIC_VECTOR (4 downto 0);
        partialSx_empty_n : IN STD_LOGIC;
        partialSx_read : OUT STD_LOGIC;
        partialSy_dout : IN STD_LOGIC_VECTOR (63 downto 0);
        partialSy_num_data_valid : IN STD_LOGIC_VECTOR (4 downto 0);
        partialSy_fifo_cap : IN STD_LOGIC_VECTOR (4 downto 0);
        partialSy_empty_n : IN STD_LOGIC;
        partialSy_read : OUT STD_LOGIC;
        last1_dout : IN STD_LOGIC_VECTOR (1 downto 0);
        last1_num_data_valid : IN STD_LOGIC_VECTOR (4 downto 0);
        last1_fifo_cap : IN STD_LOGIC_VECTOR (4 downto 0);
        last1_empty_n : IN STD_LOGIC;
        last1_read : OUT STD_LOGIC;
        SDiv1_din : OUT STD_LOGIC_VECTOR (63 downto 0);
        SDiv1_num_data_valid : IN STD_LOGIC_VECTOR (4 downto 0);
        SDiv1_fifo_cap : IN STD_LOGIC_VECTOR (4 downto 0);
        SDiv1_full_n : IN STD_LOGIC;
        SDiv1_write : OUT STD_LOGIC;
        SxDivS_din : OUT STD_LOGIC_VECTOR (63 downto 0);
        SxDivS_num_data_valid : IN STD_LOGIC_VECTOR (4 downto 0);
        SxDivS_fifo_cap : IN STD_LOGIC_VECTOR (4 downto 0);
        SxDivS_full_n : IN STD_LOGIC;
        SxDivS_write : OUT STD_LOGIC;
        SxSquaredDivS_din : OUT STD_LOGIC_VECTOR (63 downto 0);
        SxSquaredDivS_num_data_valid : IN STD_LOGIC_VECTOR (4 downto 0);
        SxSquaredDivS_fifo_cap : IN STD_LOGIC_VECTOR (4 downto 0);
        SxSquaredDivS_full_n : IN STD_LOGIC;
        SxSquaredDivS_write : OUT STD_LOGIC;
        SyDivS_din : OUT STD_LOGIC_VECTOR (63 downto 0);
        SyDivS_num_data_valid : IN STD_LOGIC_VECTOR (4 downto 0);
        SyDivS_fifo_cap : IN STD_LOGIC_VECTOR (4 downto 0);
        SyDivS_full_n : IN STD_LOGIC;
        SyDivS_write : OUT STD_LOGIC );
    end component;


    component fit_interStage2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        x1_dout : IN STD_LOGIC_VECTOR (11 downto 0);
        x1_num_data_valid : IN STD_LOGIC_VECTOR (4 downto 0);
        x1_fifo_cap : IN STD_LOGIC_VECTOR (4 downto 0);
        x1_empty_n : IN STD_LOGIC;
        x1_read : OUT STD_LOGIC;
        y1_dout : IN STD_LOGIC_VECTOR (11 downto 0);
        y1_num_data_valid : IN STD_LOGIC_VECTOR (4 downto 0);
        y1_fifo_cap : IN STD_LOGIC_VECTOR (4 downto 0);
        y1_empty_n : IN STD_LOGIC;
        y1_read : OUT STD_LOGIC;
        sigmaDiv1_dout : IN STD_LOGIC_VECTOR (63 downto 0);
        sigmaDiv1_num_data_valid : IN STD_LOGIC_VECTOR (4 downto 0);
        sigmaDiv1_fifo_cap : IN STD_LOGIC_VECTOR (4 downto 0);
        sigmaDiv1_empty_n : IN STD_LOGIC;
        sigmaDiv1_read : OUT STD_LOGIC;
        SDiv1_dout : IN STD_LOGIC_VECTOR (63 downto 0);
        SDiv1_num_data_valid : IN STD_LOGIC_VECTOR (4 downto 0);
        SDiv1_fifo_cap : IN STD_LOGIC_VECTOR (4 downto 0);
        SDiv1_empty_n : IN STD_LOGIC;
        SDiv1_read : OUT STD_LOGIC;
        SxDivS_dout : IN STD_LOGIC_VECTOR (63 downto 0);
        SxDivS_num_data_valid : IN STD_LOGIC_VECTOR (4 downto 0);
        SxDivS_fifo_cap : IN STD_LOGIC_VECTOR (4 downto 0);
        SxDivS_empty_n : IN STD_LOGIC;
        SxDivS_read : OUT STD_LOGIC;
        SxSquaredDivS_dout : IN STD_LOGIC_VECTOR (63 downto 0);
        SxSquaredDivS_num_data_valid : IN STD_LOGIC_VECTOR (4 downto 0);
        SxSquaredDivS_fifo_cap : IN STD_LOGIC_VECTOR (4 downto 0);
        SxSquaredDivS_empty_n : IN STD_LOGIC;
        SxSquaredDivS_read : OUT STD_LOGIC;
        SyDivS_dout : IN STD_LOGIC_VECTOR (63 downto 0);
        SyDivS_num_data_valid : IN STD_LOGIC_VECTOR (4 downto 0);
        SyDivS_fifo_cap : IN STD_LOGIC_VECTOR (4 downto 0);
        SyDivS_empty_n : IN STD_LOGIC;
        SyDivS_read : OUT STD_LOGIC;
        last2_dout : IN STD_LOGIC_VECTOR (1 downto 0);
        last2_num_data_valid : IN STD_LOGIC_VECTOR (4 downto 0);
        last2_fifo_cap : IN STD_LOGIC_VECTOR (4 downto 0);
        last2_empty_n : IN STD_LOGIC;
        last2_read : OUT STD_LOGIC;
        resultStream_din : OUT STD_LOGIC_VECTOR (331 downto 0);
        resultStream_num_data_valid : IN STD_LOGIC_VECTOR (4 downto 0);
        resultStream_fifo_cap : IN STD_LOGIC_VECTOR (4 downto 0);
        resultStream_full_n : IN STD_LOGIC;
        resultStream_write : OUT STD_LOGIC );
    end component;


    component fit_finalStage IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        resultStream_dout : IN STD_LOGIC_VECTOR (331 downto 0);
        resultStream_num_data_valid : IN STD_LOGIC_VECTOR (4 downto 0);
        resultStream_fifo_cap : IN STD_LOGIC_VECTOR (4 downto 0);
        resultStream_empty_n : IN STD_LOGIC;
        resultStream_read : OUT STD_LOGIC;
        x2_dout : IN STD_LOGIC_VECTOR (11 downto 0);
        x2_num_data_valid : IN STD_LOGIC_VECTOR (4 downto 0);
        x2_fifo_cap : IN STD_LOGIC_VECTOR (4 downto 0);
        x2_empty_n : IN STD_LOGIC;
        x2_read : OUT STD_LOGIC;
        y2_dout : IN STD_LOGIC_VECTOR (11 downto 0);
        y2_num_data_valid : IN STD_LOGIC_VECTOR (4 downto 0);
        y2_fifo_cap : IN STD_LOGIC_VECTOR (4 downto 0);
        y2_empty_n : IN STD_LOGIC;
        y2_read : OUT STD_LOGIC;
        sigmaSquaredDiv1_dout : IN STD_LOGIC_VECTOR (63 downto 0);
        sigmaSquaredDiv1_num_data_valid : IN STD_LOGIC_VECTOR (4 downto 0);
        sigmaSquaredDiv1_fifo_cap : IN STD_LOGIC_VECTOR (4 downto 0);
        sigmaSquaredDiv1_empty_n : IN STD_LOGIC;
        sigmaSquaredDiv1_read : OUT STD_LOGIC;
        last3_dout : IN STD_LOGIC_VECTOR (1 downto 0);
        last3_num_data_valid : IN STD_LOGIC_VECTOR (4 downto 0);
        last3_fifo_cap : IN STD_LOGIC_VECTOR (4 downto 0);
        last3_empty_n : IN STD_LOGIC;
        last3_read : OUT STD_LOGIC;
        output_r_TDATA : OUT STD_LOGIC_VECTOR (383 downto 0);
        output_r_TVALID : OUT STD_LOGIC;
        output_r_TREADY : IN STD_LOGIC );
    end component;


    component fit_fifo_w64_d10_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (63 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (63 downto 0);
        if_num_data_valid : OUT STD_LOGIC_VECTOR (4 downto 0);
        if_fifo_cap : OUT STD_LOGIC_VECTOR (4 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fit_fifo_w12_d10_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (11 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (11 downto 0);
        if_num_data_valid : OUT STD_LOGIC_VECTOR (4 downto 0);
        if_fifo_cap : OUT STD_LOGIC_VECTOR (4 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fit_fifo_w2_d10_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (1 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (1 downto 0);
        if_num_data_valid : OUT STD_LOGIC_VECTOR (4 downto 0);
        if_fifo_cap : OUT STD_LOGIC_VECTOR (4 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fit_fifo_w332_d10_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (331 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (331 downto 0);
        if_num_data_valid : OUT STD_LOGIC_VECTOR (4 downto 0);
        if_fifo_cap : OUT STD_LOGIC_VECTOR (4 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fit_start_for_interStage1_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fit_start_for_interStage2_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fit_start_for_finalStage_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fit_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_continue : OUT STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;



begin
    control_s_axi_U : component fit_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_continue => ap_continue,
        ap_idle => ap_idle);

    readStage_U0 : component fit_readStage
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => readStage_U0_ap_start,
        start_full_n => readStage_U0_start_full_n,
        ap_done => readStage_U0_ap_done,
        ap_continue => readStage_U0_ap_continue,
        ap_idle => readStage_U0_ap_idle,
        ap_ready => readStage_U0_ap_ready,
        input_r_TVALID => input_r_TVALID,
        x1_din => readStage_U0_x1_din,
        x1_num_data_valid => x1_num_data_valid,
        x1_fifo_cap => x1_fifo_cap,
        x1_full_n => x1_full_n,
        x1_write => readStage_U0_x1_write,
        x2_din => readStage_U0_x2_din,
        x2_num_data_valid => x2_num_data_valid,
        x2_fifo_cap => x2_fifo_cap,
        x2_full_n => x2_full_n,
        x2_write => readStage_U0_x2_write,
        y1_din => readStage_U0_y1_din,
        y1_num_data_valid => y1_num_data_valid,
        y1_fifo_cap => y1_fifo_cap,
        y1_full_n => y1_full_n,
        y1_write => readStage_U0_y1_write,
        y2_din => readStage_U0_y2_din,
        y2_num_data_valid => y2_num_data_valid,
        y2_fifo_cap => y2_fifo_cap,
        y2_full_n => y2_full_n,
        y2_write => readStage_U0_y2_write,
        sigmaDiv1_din => readStage_U0_sigmaDiv1_din,
        sigmaDiv1_num_data_valid => sigmaDiv1_num_data_valid,
        sigmaDiv1_fifo_cap => sigmaDiv1_fifo_cap,
        sigmaDiv1_full_n => sigmaDiv1_full_n,
        sigmaDiv1_write => readStage_U0_sigmaDiv1_write,
        sigmaSquaredDiv1_din => readStage_U0_sigmaSquaredDiv1_din,
        sigmaSquaredDiv1_num_data_valid => sigmaSquaredDiv1_num_data_valid,
        sigmaSquaredDiv1_fifo_cap => sigmaSquaredDiv1_fifo_cap,
        sigmaSquaredDiv1_full_n => sigmaSquaredDiv1_full_n,
        sigmaSquaredDiv1_write => readStage_U0_sigmaSquaredDiv1_write,
        last1_din => readStage_U0_last1_din,
        last1_num_data_valid => last1_num_data_valid,
        last1_fifo_cap => last1_fifo_cap,
        last1_full_n => last1_full_n,
        last1_write => readStage_U0_last1_write,
        last2_din => readStage_U0_last2_din,
        last2_num_data_valid => last2_num_data_valid,
        last2_fifo_cap => last2_fifo_cap,
        last2_full_n => last2_full_n,
        last2_write => readStage_U0_last2_write,
        last3_din => readStage_U0_last3_din,
        last3_num_data_valid => last3_num_data_valid,
        last3_fifo_cap => last3_fifo_cap,
        last3_full_n => last3_full_n,
        last3_write => readStage_U0_last3_write,
        partialS_din => readStage_U0_partialS_din,
        partialS_num_data_valid => partialS_num_data_valid,
        partialS_fifo_cap => partialS_fifo_cap,
        partialS_full_n => partialS_full_n,
        partialS_write => readStage_U0_partialS_write,
        partialSx_din => readStage_U0_partialSx_din,
        partialSx_num_data_valid => partialSx_num_data_valid,
        partialSx_fifo_cap => partialSx_fifo_cap,
        partialSx_full_n => partialSx_full_n,
        partialSx_write => readStage_U0_partialSx_write,
        partialSy_din => readStage_U0_partialSy_din,
        partialSy_num_data_valid => partialSy_num_data_valid,
        partialSy_fifo_cap => partialSy_fifo_cap,
        partialSy_full_n => partialSy_full_n,
        partialSy_write => readStage_U0_partialSy_write,
        start_out => readStage_U0_start_out,
        start_write => readStage_U0_start_write,
        input_r_TDATA => input_r_TDATA,
        input_r_TREADY => readStage_U0_input_r_TREADY);

    interStage1_U0 : component fit_interStage1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => interStage1_U0_ap_start,
        ap_done => interStage1_U0_ap_done,
        ap_continue => interStage1_U0_ap_continue,
        ap_idle => interStage1_U0_ap_idle,
        ap_ready => interStage1_U0_ap_ready,
        partialS_dout => partialS_dout,
        partialS_num_data_valid => partialS_num_data_valid,
        partialS_fifo_cap => partialS_fifo_cap,
        partialS_empty_n => partialS_empty_n,
        partialS_read => interStage1_U0_partialS_read,
        partialSx_dout => partialSx_dout,
        partialSx_num_data_valid => partialSx_num_data_valid,
        partialSx_fifo_cap => partialSx_fifo_cap,
        partialSx_empty_n => partialSx_empty_n,
        partialSx_read => interStage1_U0_partialSx_read,
        partialSy_dout => partialSy_dout,
        partialSy_num_data_valid => partialSy_num_data_valid,
        partialSy_fifo_cap => partialSy_fifo_cap,
        partialSy_empty_n => partialSy_empty_n,
        partialSy_read => interStage1_U0_partialSy_read,
        last1_dout => last1_dout,
        last1_num_data_valid => last1_num_data_valid,
        last1_fifo_cap => last1_fifo_cap,
        last1_empty_n => last1_empty_n,
        last1_read => interStage1_U0_last1_read,
        SDiv1_din => interStage1_U0_SDiv1_din,
        SDiv1_num_data_valid => SDiv1_num_data_valid,
        SDiv1_fifo_cap => SDiv1_fifo_cap,
        SDiv1_full_n => SDiv1_full_n,
        SDiv1_write => interStage1_U0_SDiv1_write,
        SxDivS_din => interStage1_U0_SxDivS_din,
        SxDivS_num_data_valid => SxDivS_num_data_valid,
        SxDivS_fifo_cap => SxDivS_fifo_cap,
        SxDivS_full_n => SxDivS_full_n,
        SxDivS_write => interStage1_U0_SxDivS_write,
        SxSquaredDivS_din => interStage1_U0_SxSquaredDivS_din,
        SxSquaredDivS_num_data_valid => SxSquaredDivS_num_data_valid,
        SxSquaredDivS_fifo_cap => SxSquaredDivS_fifo_cap,
        SxSquaredDivS_full_n => SxSquaredDivS_full_n,
        SxSquaredDivS_write => interStage1_U0_SxSquaredDivS_write,
        SyDivS_din => interStage1_U0_SyDivS_din,
        SyDivS_num_data_valid => SyDivS_num_data_valid,
        SyDivS_fifo_cap => SyDivS_fifo_cap,
        SyDivS_full_n => SyDivS_full_n,
        SyDivS_write => interStage1_U0_SyDivS_write);

    interStage2_U0 : component fit_interStage2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => interStage2_U0_ap_start,
        ap_done => interStage2_U0_ap_done,
        ap_continue => interStage2_U0_ap_continue,
        ap_idle => interStage2_U0_ap_idle,
        ap_ready => interStage2_U0_ap_ready,
        x1_dout => x1_dout,
        x1_num_data_valid => x1_num_data_valid,
        x1_fifo_cap => x1_fifo_cap,
        x1_empty_n => x1_empty_n,
        x1_read => interStage2_U0_x1_read,
        y1_dout => y1_dout,
        y1_num_data_valid => y1_num_data_valid,
        y1_fifo_cap => y1_fifo_cap,
        y1_empty_n => y1_empty_n,
        y1_read => interStage2_U0_y1_read,
        sigmaDiv1_dout => sigmaDiv1_dout,
        sigmaDiv1_num_data_valid => sigmaDiv1_num_data_valid,
        sigmaDiv1_fifo_cap => sigmaDiv1_fifo_cap,
        sigmaDiv1_empty_n => sigmaDiv1_empty_n,
        sigmaDiv1_read => interStage2_U0_sigmaDiv1_read,
        SDiv1_dout => SDiv1_dout,
        SDiv1_num_data_valid => SDiv1_num_data_valid,
        SDiv1_fifo_cap => SDiv1_fifo_cap,
        SDiv1_empty_n => SDiv1_empty_n,
        SDiv1_read => interStage2_U0_SDiv1_read,
        SxDivS_dout => SxDivS_dout,
        SxDivS_num_data_valid => SxDivS_num_data_valid,
        SxDivS_fifo_cap => SxDivS_fifo_cap,
        SxDivS_empty_n => SxDivS_empty_n,
        SxDivS_read => interStage2_U0_SxDivS_read,
        SxSquaredDivS_dout => SxSquaredDivS_dout,
        SxSquaredDivS_num_data_valid => SxSquaredDivS_num_data_valid,
        SxSquaredDivS_fifo_cap => SxSquaredDivS_fifo_cap,
        SxSquaredDivS_empty_n => SxSquaredDivS_empty_n,
        SxSquaredDivS_read => interStage2_U0_SxSquaredDivS_read,
        SyDivS_dout => SyDivS_dout,
        SyDivS_num_data_valid => SyDivS_num_data_valid,
        SyDivS_fifo_cap => SyDivS_fifo_cap,
        SyDivS_empty_n => SyDivS_empty_n,
        SyDivS_read => interStage2_U0_SyDivS_read,
        last2_dout => last2_dout,
        last2_num_data_valid => last2_num_data_valid,
        last2_fifo_cap => last2_fifo_cap,
        last2_empty_n => last2_empty_n,
        last2_read => interStage2_U0_last2_read,
        resultStream_din => interStage2_U0_resultStream_din,
        resultStream_num_data_valid => resultStream_num_data_valid,
        resultStream_fifo_cap => resultStream_fifo_cap,
        resultStream_full_n => resultStream_full_n,
        resultStream_write => interStage2_U0_resultStream_write);

    finalStage_U0 : component fit_finalStage
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => finalStage_U0_ap_start,
        ap_done => finalStage_U0_ap_done,
        ap_continue => finalStage_U0_ap_continue,
        ap_idle => finalStage_U0_ap_idle,
        ap_ready => finalStage_U0_ap_ready,
        resultStream_dout => resultStream_dout,
        resultStream_num_data_valid => resultStream_num_data_valid,
        resultStream_fifo_cap => resultStream_fifo_cap,
        resultStream_empty_n => resultStream_empty_n,
        resultStream_read => finalStage_U0_resultStream_read,
        x2_dout => x2_dout,
        x2_num_data_valid => x2_num_data_valid,
        x2_fifo_cap => x2_fifo_cap,
        x2_empty_n => x2_empty_n,
        x2_read => finalStage_U0_x2_read,
        y2_dout => y2_dout,
        y2_num_data_valid => y2_num_data_valid,
        y2_fifo_cap => y2_fifo_cap,
        y2_empty_n => y2_empty_n,
        y2_read => finalStage_U0_y2_read,
        sigmaSquaredDiv1_dout => sigmaSquaredDiv1_dout,
        sigmaSquaredDiv1_num_data_valid => sigmaSquaredDiv1_num_data_valid,
        sigmaSquaredDiv1_fifo_cap => sigmaSquaredDiv1_fifo_cap,
        sigmaSquaredDiv1_empty_n => sigmaSquaredDiv1_empty_n,
        sigmaSquaredDiv1_read => finalStage_U0_sigmaSquaredDiv1_read,
        last3_dout => last3_dout,
        last3_num_data_valid => last3_num_data_valid,
        last3_fifo_cap => last3_fifo_cap,
        last3_empty_n => last3_empty_n,
        last3_read => finalStage_U0_last3_read,
        output_r_TDATA => finalStage_U0_output_r_TDATA,
        output_r_TVALID => finalStage_U0_output_r_TVALID,
        output_r_TREADY => output_r_TREADY);

    partialS_U : component fit_fifo_w64_d10_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => readStage_U0_partialS_din,
        if_full_n => partialS_full_n,
        if_write => readStage_U0_partialS_write,
        if_dout => partialS_dout,
        if_num_data_valid => partialS_num_data_valid,
        if_fifo_cap => partialS_fifo_cap,
        if_empty_n => partialS_empty_n,
        if_read => interStage1_U0_partialS_read);

    partialSx_U : component fit_fifo_w64_d10_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => readStage_U0_partialSx_din,
        if_full_n => partialSx_full_n,
        if_write => readStage_U0_partialSx_write,
        if_dout => partialSx_dout,
        if_num_data_valid => partialSx_num_data_valid,
        if_fifo_cap => partialSx_fifo_cap,
        if_empty_n => partialSx_empty_n,
        if_read => interStage1_U0_partialSx_read);

    partialSy_U : component fit_fifo_w64_d10_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => readStage_U0_partialSy_din,
        if_full_n => partialSy_full_n,
        if_write => readStage_U0_partialSy_write,
        if_dout => partialSy_dout,
        if_num_data_valid => partialSy_num_data_valid,
        if_fifo_cap => partialSy_fifo_cap,
        if_empty_n => partialSy_empty_n,
        if_read => interStage1_U0_partialSy_read);

    x1_U : component fit_fifo_w12_d10_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => readStage_U0_x1_din,
        if_full_n => x1_full_n,
        if_write => readStage_U0_x1_write,
        if_dout => x1_dout,
        if_num_data_valid => x1_num_data_valid,
        if_fifo_cap => x1_fifo_cap,
        if_empty_n => x1_empty_n,
        if_read => interStage2_U0_x1_read);

    x2_U : component fit_fifo_w12_d10_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => readStage_U0_x2_din,
        if_full_n => x2_full_n,
        if_write => readStage_U0_x2_write,
        if_dout => x2_dout,
        if_num_data_valid => x2_num_data_valid,
        if_fifo_cap => x2_fifo_cap,
        if_empty_n => x2_empty_n,
        if_read => finalStage_U0_x2_read);

    y1_U : component fit_fifo_w12_d10_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => readStage_U0_y1_din,
        if_full_n => y1_full_n,
        if_write => readStage_U0_y1_write,
        if_dout => y1_dout,
        if_num_data_valid => y1_num_data_valid,
        if_fifo_cap => y1_fifo_cap,
        if_empty_n => y1_empty_n,
        if_read => interStage2_U0_y1_read);

    y2_U : component fit_fifo_w12_d10_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => readStage_U0_y2_din,
        if_full_n => y2_full_n,
        if_write => readStage_U0_y2_write,
        if_dout => y2_dout,
        if_num_data_valid => y2_num_data_valid,
        if_fifo_cap => y2_fifo_cap,
        if_empty_n => y2_empty_n,
        if_read => finalStage_U0_y2_read);

    sigmaDiv1_U : component fit_fifo_w64_d10_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => readStage_U0_sigmaDiv1_din,
        if_full_n => sigmaDiv1_full_n,
        if_write => readStage_U0_sigmaDiv1_write,
        if_dout => sigmaDiv1_dout,
        if_num_data_valid => sigmaDiv1_num_data_valid,
        if_fifo_cap => sigmaDiv1_fifo_cap,
        if_empty_n => sigmaDiv1_empty_n,
        if_read => interStage2_U0_sigmaDiv1_read);

    sigmaSquaredDiv1_U : component fit_fifo_w64_d10_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => readStage_U0_sigmaSquaredDiv1_din,
        if_full_n => sigmaSquaredDiv1_full_n,
        if_write => readStage_U0_sigmaSquaredDiv1_write,
        if_dout => sigmaSquaredDiv1_dout,
        if_num_data_valid => sigmaSquaredDiv1_num_data_valid,
        if_fifo_cap => sigmaSquaredDiv1_fifo_cap,
        if_empty_n => sigmaSquaredDiv1_empty_n,
        if_read => finalStage_U0_sigmaSquaredDiv1_read);

    last1_U : component fit_fifo_w2_d10_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => readStage_U0_last1_din,
        if_full_n => last1_full_n,
        if_write => readStage_U0_last1_write,
        if_dout => last1_dout,
        if_num_data_valid => last1_num_data_valid,
        if_fifo_cap => last1_fifo_cap,
        if_empty_n => last1_empty_n,
        if_read => interStage1_U0_last1_read);

    last2_U : component fit_fifo_w2_d10_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => readStage_U0_last2_din,
        if_full_n => last2_full_n,
        if_write => readStage_U0_last2_write,
        if_dout => last2_dout,
        if_num_data_valid => last2_num_data_valid,
        if_fifo_cap => last2_fifo_cap,
        if_empty_n => last2_empty_n,
        if_read => interStage2_U0_last2_read);

    last3_U : component fit_fifo_w2_d10_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => readStage_U0_last3_din,
        if_full_n => last3_full_n,
        if_write => readStage_U0_last3_write,
        if_dout => last3_dout,
        if_num_data_valid => last3_num_data_valid,
        if_fifo_cap => last3_fifo_cap,
        if_empty_n => last3_empty_n,
        if_read => finalStage_U0_last3_read);

    SDiv1_U : component fit_fifo_w64_d10_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => interStage1_U0_SDiv1_din,
        if_full_n => SDiv1_full_n,
        if_write => interStage1_U0_SDiv1_write,
        if_dout => SDiv1_dout,
        if_num_data_valid => SDiv1_num_data_valid,
        if_fifo_cap => SDiv1_fifo_cap,
        if_empty_n => SDiv1_empty_n,
        if_read => interStage2_U0_SDiv1_read);

    SxDivS_U : component fit_fifo_w64_d10_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => interStage1_U0_SxDivS_din,
        if_full_n => SxDivS_full_n,
        if_write => interStage1_U0_SxDivS_write,
        if_dout => SxDivS_dout,
        if_num_data_valid => SxDivS_num_data_valid,
        if_fifo_cap => SxDivS_fifo_cap,
        if_empty_n => SxDivS_empty_n,
        if_read => interStage2_U0_SxDivS_read);

    SxSquaredDivS_U : component fit_fifo_w64_d10_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => interStage1_U0_SxSquaredDivS_din,
        if_full_n => SxSquaredDivS_full_n,
        if_write => interStage1_U0_SxSquaredDivS_write,
        if_dout => SxSquaredDivS_dout,
        if_num_data_valid => SxSquaredDivS_num_data_valid,
        if_fifo_cap => SxSquaredDivS_fifo_cap,
        if_empty_n => SxSquaredDivS_empty_n,
        if_read => interStage2_U0_SxSquaredDivS_read);

    SyDivS_U : component fit_fifo_w64_d10_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => interStage1_U0_SyDivS_din,
        if_full_n => SyDivS_full_n,
        if_write => interStage1_U0_SyDivS_write,
        if_dout => SyDivS_dout,
        if_num_data_valid => SyDivS_num_data_valid,
        if_fifo_cap => SyDivS_fifo_cap,
        if_empty_n => SyDivS_empty_n,
        if_read => interStage2_U0_SyDivS_read);

    resultStream_U : component fit_fifo_w332_d10_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => interStage2_U0_resultStream_din,
        if_full_n => resultStream_full_n,
        if_write => interStage2_U0_resultStream_write,
        if_dout => resultStream_dout,
        if_num_data_valid => resultStream_num_data_valid,
        if_fifo_cap => resultStream_fifo_cap,
        if_empty_n => resultStream_empty_n,
        if_read => finalStage_U0_resultStream_read);

    start_for_interStage1_U0_U : component fit_start_for_interStage1_U0
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_interStage1_U0_din,
        if_full_n => start_for_interStage1_U0_full_n,
        if_write => readStage_U0_start_write,
        if_dout => start_for_interStage1_U0_dout,
        if_empty_n => start_for_interStage1_U0_empty_n,
        if_read => interStage1_U0_ap_ready);

    start_for_interStage2_U0_U : component fit_start_for_interStage2_U0
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_interStage2_U0_din,
        if_full_n => start_for_interStage2_U0_full_n,
        if_write => readStage_U0_start_write,
        if_dout => start_for_interStage2_U0_dout,
        if_empty_n => start_for_interStage2_U0_empty_n,
        if_read => interStage2_U0_ap_ready);

    start_for_finalStage_U0_U : component fit_start_for_finalStage_U0
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_finalStage_U0_din,
        if_full_n => start_for_finalStage_U0_full_n,
        if_write => readStage_U0_start_write,
        if_dout => start_for_finalStage_U0_dout,
        if_empty_n => start_for_finalStage_U0_empty_n,
        if_read => finalStage_U0_ap_ready);





    ap_rst_n_inv_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            ap_rst_n_inv <= ap_rst_reg_1;
        end if;
    end process;

    ap_rst_reg_1_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            ap_rst_reg_1 <= ap_rst_reg_2;
        end if;
    end process;

    ap_rst_reg_2_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
                        ap_rst_reg_2 <= not(ap_rst_n);
        end if;
    end process;
    ap_done <= finalStage_U0_ap_done;
    ap_idle <= (readStage_U0_ap_idle and interStage2_U0_ap_idle and interStage1_U0_ap_idle and finalStage_U0_ap_idle);
    ap_ready <= readStage_U0_ap_ready;
    finalStage_U0_ap_continue <= ap_continue;
    finalStage_U0_ap_start <= start_for_finalStage_U0_empty_n;
    input_r_TREADY <= readStage_U0_input_r_TREADY;
    interStage1_U0_ap_continue <= ap_const_logic_1;
    interStage1_U0_ap_start <= start_for_interStage1_U0_empty_n;
    interStage2_U0_ap_continue <= ap_const_logic_1;
    interStage2_U0_ap_start <= start_for_interStage2_U0_empty_n;
    output_r_TDATA <= finalStage_U0_output_r_TDATA;
    output_r_TVALID <= finalStage_U0_output_r_TVALID;
    readStage_U0_ap_continue <= ap_const_logic_1;
    readStage_U0_ap_start <= ap_start;
    readStage_U0_start_full_n <= (start_for_interStage2_U0_full_n and start_for_interStage1_U0_full_n and start_for_finalStage_U0_full_n);
    start_for_finalStage_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_interStage1_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_interStage2_U0_din <= (0=>ap_const_logic_1, others=>'-');
end behav;
