-- ==============================================================
-- Generated by Vitis HLS v2023.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity fit_readStage is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_r_TVALID : IN STD_LOGIC;
    x1_din : OUT STD_LOGIC_VECTOR (11 downto 0);
    x1_num_data_valid : IN STD_LOGIC_VECTOR (4 downto 0);
    x1_fifo_cap : IN STD_LOGIC_VECTOR (4 downto 0);
    x1_full_n : IN STD_LOGIC;
    x1_write : OUT STD_LOGIC;
    x2_din : OUT STD_LOGIC_VECTOR (11 downto 0);
    x2_num_data_valid : IN STD_LOGIC_VECTOR (4 downto 0);
    x2_fifo_cap : IN STD_LOGIC_VECTOR (4 downto 0);
    x2_full_n : IN STD_LOGIC;
    x2_write : OUT STD_LOGIC;
    y1_din : OUT STD_LOGIC_VECTOR (11 downto 0);
    y1_num_data_valid : IN STD_LOGIC_VECTOR (4 downto 0);
    y1_fifo_cap : IN STD_LOGIC_VECTOR (4 downto 0);
    y1_full_n : IN STD_LOGIC;
    y1_write : OUT STD_LOGIC;
    y2_din : OUT STD_LOGIC_VECTOR (11 downto 0);
    y2_num_data_valid : IN STD_LOGIC_VECTOR (4 downto 0);
    y2_fifo_cap : IN STD_LOGIC_VECTOR (4 downto 0);
    y2_full_n : IN STD_LOGIC;
    y2_write : OUT STD_LOGIC;
    sigmaDiv1_din : OUT STD_LOGIC_VECTOR (63 downto 0);
    sigmaDiv1_num_data_valid : IN STD_LOGIC_VECTOR (4 downto 0);
    sigmaDiv1_fifo_cap : IN STD_LOGIC_VECTOR (4 downto 0);
    sigmaDiv1_full_n : IN STD_LOGIC;
    sigmaDiv1_write : OUT STD_LOGIC;
    sigmaSquaredDiv1_din : OUT STD_LOGIC_VECTOR (63 downto 0);
    sigmaSquaredDiv1_num_data_valid : IN STD_LOGIC_VECTOR (4 downto 0);
    sigmaSquaredDiv1_fifo_cap : IN STD_LOGIC_VECTOR (4 downto 0);
    sigmaSquaredDiv1_full_n : IN STD_LOGIC;
    sigmaSquaredDiv1_write : OUT STD_LOGIC;
    last1_din : OUT STD_LOGIC_VECTOR (1 downto 0);
    last1_num_data_valid : IN STD_LOGIC_VECTOR (4 downto 0);
    last1_fifo_cap : IN STD_LOGIC_VECTOR (4 downto 0);
    last1_full_n : IN STD_LOGIC;
    last1_write : OUT STD_LOGIC;
    last2_din : OUT STD_LOGIC_VECTOR (1 downto 0);
    last2_num_data_valid : IN STD_LOGIC_VECTOR (4 downto 0);
    last2_fifo_cap : IN STD_LOGIC_VECTOR (4 downto 0);
    last2_full_n : IN STD_LOGIC;
    last2_write : OUT STD_LOGIC;
    last3_din : OUT STD_LOGIC_VECTOR (1 downto 0);
    last3_num_data_valid : IN STD_LOGIC_VECTOR (4 downto 0);
    last3_fifo_cap : IN STD_LOGIC_VECTOR (4 downto 0);
    last3_full_n : IN STD_LOGIC;
    last3_write : OUT STD_LOGIC;
    partialS_din : OUT STD_LOGIC_VECTOR (63 downto 0);
    partialS_num_data_valid : IN STD_LOGIC_VECTOR (4 downto 0);
    partialS_fifo_cap : IN STD_LOGIC_VECTOR (4 downto 0);
    partialS_full_n : IN STD_LOGIC;
    partialS_write : OUT STD_LOGIC;
    partialSx_din : OUT STD_LOGIC_VECTOR (63 downto 0);
    partialSx_num_data_valid : IN STD_LOGIC_VECTOR (4 downto 0);
    partialSx_fifo_cap : IN STD_LOGIC_VECTOR (4 downto 0);
    partialSx_full_n : IN STD_LOGIC;
    partialSx_write : OUT STD_LOGIC;
    partialSy_din : OUT STD_LOGIC_VECTOR (63 downto 0);
    partialSy_num_data_valid : IN STD_LOGIC_VECTOR (4 downto 0);
    partialSy_fifo_cap : IN STD_LOGIC_VECTOR (4 downto 0);
    partialSy_full_n : IN STD_LOGIC;
    partialSy_write : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    input_r_TDATA : IN STD_LOGIC_VECTOR (63 downto 0);
    input_r_TREADY : OUT STD_LOGIC );
end;


architecture behav of fit_readStage is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv34_100000000 : STD_LOGIC_VECTOR (33 downto 0) := "0100000000000000000000000000000000";
    constant ap_const_lv32_43 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000011";

attribute shreg_extract : string;
    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter14 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter15 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter16 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter17 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter18 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter19 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter20 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter21 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter22 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter23 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter24 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter25 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter26 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter27 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter28 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter29 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter30 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter31 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter32 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter33 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter34 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter35 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter36 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter37 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter38 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter39 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter40 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal internal_ap_ready : STD_LOGIC;
    signal tmp_nbreadreq_fu_82_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter12 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter13 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter14 : BOOLEAN;
    signal ap_block_state16_pp0_stage0_iter15 : BOOLEAN;
    signal ap_block_state17_pp0_stage0_iter16 : BOOLEAN;
    signal ap_block_state18_pp0_stage0_iter17 : BOOLEAN;
    signal ap_block_state19_pp0_stage0_iter18 : BOOLEAN;
    signal ap_block_state20_pp0_stage0_iter19 : BOOLEAN;
    signal ap_block_state21_pp0_stage0_iter20 : BOOLEAN;
    signal ap_block_state22_pp0_stage0_iter21 : BOOLEAN;
    signal ap_block_state23_pp0_stage0_iter22 : BOOLEAN;
    signal ap_block_state24_pp0_stage0_iter23 : BOOLEAN;
    signal ap_block_state25_pp0_stage0_iter24 : BOOLEAN;
    signal ap_block_state26_pp0_stage0_iter25 : BOOLEAN;
    signal ap_block_state27_pp0_stage0_iter26 : BOOLEAN;
    signal ap_block_state28_pp0_stage0_iter27 : BOOLEAN;
    signal ap_block_state29_pp0_stage0_iter28 : BOOLEAN;
    signal ap_block_state30_pp0_stage0_iter29 : BOOLEAN;
    signal ap_block_state31_pp0_stage0_iter30 : BOOLEAN;
    signal ap_block_state32_pp0_stage0_iter31 : BOOLEAN;
    signal ap_block_state33_pp0_stage0_iter32 : BOOLEAN;
    signal ap_block_state34_pp0_stage0_iter33 : BOOLEAN;
    signal ap_block_state35_pp0_stage0_iter34 : BOOLEAN;
    signal ap_block_state36_pp0_stage0_iter35 : BOOLEAN;
    signal ap_block_state37_pp0_stage0_iter36 : BOOLEAN;
    signal ap_block_state38_pp0_stage0_iter37 : BOOLEAN;
    signal ap_block_state39_pp0_stage0_iter38 : BOOLEAN;
    signal ap_block_state40_pp0_stage0_iter39 : BOOLEAN;
    signal ap_block_state41_pp0_stage0_iter40 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal input_r_TDATA_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal partialS_blk_n : STD_LOGIC;
    signal partialSx_blk_n : STD_LOGIC;
    signal partialSy_blk_n : STD_LOGIC;
    signal x1_blk_n : STD_LOGIC;
    signal x2_blk_n : STD_LOGIC;
    signal y1_blk_n : STD_LOGIC;
    signal y2_blk_n : STD_LOGIC;
    signal sigmaDiv1_blk_n : STD_LOGIC;
    signal sigmaSquaredDiv1_blk_n : STD_LOGIC;
    signal last1_blk_n : STD_LOGIC;
    signal last2_blk_n : STD_LOGIC;
    signal last3_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal obs_x_fu_192_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal obs_x_reg_285 : STD_LOGIC_VECTOR (11 downto 0);
    signal obs_x_reg_285_pp0_iter1_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal obs_x_reg_285_pp0_iter2_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal obs_x_reg_285_pp0_iter3_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal obs_x_reg_285_pp0_iter4_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal obs_x_reg_285_pp0_iter5_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal obs_x_reg_285_pp0_iter6_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal obs_x_reg_285_pp0_iter7_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal obs_x_reg_285_pp0_iter8_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal obs_x_reg_285_pp0_iter9_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal obs_x_reg_285_pp0_iter10_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal obs_x_reg_285_pp0_iter11_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal obs_x_reg_285_pp0_iter12_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal obs_x_reg_285_pp0_iter13_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal obs_x_reg_285_pp0_iter14_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal obs_x_reg_285_pp0_iter15_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal obs_x_reg_285_pp0_iter16_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal obs_x_reg_285_pp0_iter17_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal obs_x_reg_285_pp0_iter18_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal obs_x_reg_285_pp0_iter19_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal obs_x_reg_285_pp0_iter20_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal obs_x_reg_285_pp0_iter21_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal obs_x_reg_285_pp0_iter22_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal obs_x_reg_285_pp0_iter23_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal obs_x_reg_285_pp0_iter24_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal obs_x_reg_285_pp0_iter25_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal obs_x_reg_285_pp0_iter26_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal obs_x_reg_285_pp0_iter27_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal obs_x_reg_285_pp0_iter28_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal obs_x_reg_285_pp0_iter29_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal obs_x_reg_285_pp0_iter30_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal obs_x_reg_285_pp0_iter31_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal obs_x_reg_285_pp0_iter32_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal obs_x_reg_285_pp0_iter33_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal obs_x_reg_285_pp0_iter34_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal obs_x_reg_285_pp0_iter35_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal obs_x_reg_285_pp0_iter36_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal obs_x_reg_285_pp0_iter37_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal obs_x_reg_285_pp0_iter38_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal obs_x_reg_285_pp0_iter39_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal obs_y_reg_292 : STD_LOGIC_VECTOR (11 downto 0);
    signal obs_y_reg_292_pp0_iter1_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal obs_y_reg_292_pp0_iter2_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal obs_y_reg_292_pp0_iter3_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal obs_y_reg_292_pp0_iter4_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal obs_y_reg_292_pp0_iter5_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal obs_y_reg_292_pp0_iter6_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal obs_y_reg_292_pp0_iter7_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal obs_y_reg_292_pp0_iter8_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal obs_y_reg_292_pp0_iter9_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal obs_y_reg_292_pp0_iter10_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal obs_y_reg_292_pp0_iter11_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal obs_y_reg_292_pp0_iter12_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal obs_y_reg_292_pp0_iter13_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal obs_y_reg_292_pp0_iter14_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal obs_y_reg_292_pp0_iter15_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal obs_y_reg_292_pp0_iter16_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal obs_y_reg_292_pp0_iter17_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal obs_y_reg_292_pp0_iter18_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal obs_y_reg_292_pp0_iter19_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal obs_y_reg_292_pp0_iter20_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal obs_y_reg_292_pp0_iter21_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal obs_y_reg_292_pp0_iter22_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal obs_y_reg_292_pp0_iter23_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal obs_y_reg_292_pp0_iter24_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal obs_y_reg_292_pp0_iter25_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal obs_y_reg_292_pp0_iter26_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal obs_y_reg_292_pp0_iter27_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal obs_y_reg_292_pp0_iter28_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal obs_y_reg_292_pp0_iter29_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal obs_y_reg_292_pp0_iter30_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal obs_y_reg_292_pp0_iter31_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal obs_y_reg_292_pp0_iter32_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal obs_y_reg_292_pp0_iter33_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal obs_y_reg_292_pp0_iter34_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal obs_y_reg_292_pp0_iter35_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal obs_y_reg_292_pp0_iter36_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal obs_y_reg_292_pp0_iter37_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal obs_y_reg_292_pp0_iter38_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal obs_y_reg_292_pp0_iter39_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal obs_last_reg_299 : STD_LOGIC_VECTOR (1 downto 0);
    signal obs_last_reg_299_pp0_iter1_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal obs_last_reg_299_pp0_iter2_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal obs_last_reg_299_pp0_iter3_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal obs_last_reg_299_pp0_iter4_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal obs_last_reg_299_pp0_iter5_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal obs_last_reg_299_pp0_iter6_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal obs_last_reg_299_pp0_iter7_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal obs_last_reg_299_pp0_iter8_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal obs_last_reg_299_pp0_iter9_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal obs_last_reg_299_pp0_iter10_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal obs_last_reg_299_pp0_iter11_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal obs_last_reg_299_pp0_iter12_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal obs_last_reg_299_pp0_iter13_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal obs_last_reg_299_pp0_iter14_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal obs_last_reg_299_pp0_iter15_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal obs_last_reg_299_pp0_iter16_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal obs_last_reg_299_pp0_iter17_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal obs_last_reg_299_pp0_iter18_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal obs_last_reg_299_pp0_iter19_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal obs_last_reg_299_pp0_iter20_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal obs_last_reg_299_pp0_iter21_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal obs_last_reg_299_pp0_iter22_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal obs_last_reg_299_pp0_iter23_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal obs_last_reg_299_pp0_iter24_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal obs_last_reg_299_pp0_iter25_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal obs_last_reg_299_pp0_iter26_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal obs_last_reg_299_pp0_iter27_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal obs_last_reg_299_pp0_iter28_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal obs_last_reg_299_pp0_iter29_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal obs_last_reg_299_pp0_iter30_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal obs_last_reg_299_pp0_iter31_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal obs_last_reg_299_pp0_iter32_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal obs_last_reg_299_pp0_iter33_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal obs_last_reg_299_pp0_iter34_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal obs_last_reg_299_pp0_iter35_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal obs_last_reg_299_pp0_iter36_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal obs_last_reg_299_pp0_iter37_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal obs_last_reg_299_pp0_iter38_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal obs_last_reg_299_pp0_iter39_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_230_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal sigmaInv_reg_311 : STD_LOGIC_VECTOR (33 downto 0);
    signal sigmaInv_reg_311_pp0_iter38_reg : STD_LOGIC_VECTOR (33 downto 0);
    signal sigmaInv_reg_311_pp0_iter39_reg : STD_LOGIC_VECTOR (33 downto 0);
    signal sigmaSquaredInv_reg_317 : STD_LOGIC_VECTOR (35 downto 0);
    signal sigmaSquaredInv_reg_317_pp0_iter39_reg : STD_LOGIC_VECTOR (35 downto 0);
    signal mul_ln45_fu_184_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal mul_ln45_reg_323 : STD_LOGIC_VECTOR (47 downto 0);
    signal mul_ln46_fu_188_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal mul_ln46_reg_328 : STD_LOGIC_VECTOR (47 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal sext_ln38_1_fu_268_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln38_fu_180_p0 : STD_LOGIC_VECTOR (33 downto 0);
    signal sext_ln38_fu_236_p1 : STD_LOGIC_VECTOR (67 downto 0);
    signal mul_ln38_fu_180_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal mul_ln45_fu_184_p0 : STD_LOGIC_VECTOR (35 downto 0);
    signal sext_ln38_2_fu_251_p1 : STD_LOGIC_VECTOR (47 downto 0);
    signal mul_ln46_fu_188_p0 : STD_LOGIC_VECTOR (35 downto 0);
    signal obs_sigma_fu_206_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln38_fu_180_p2 : STD_LOGIC_VECTOR (67 downto 0);
    signal grp_fu_230_ce : STD_LOGIC;
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter8_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter9_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter10_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter11_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter12_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter13_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter14_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter15_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter16_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter17_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter18_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter19_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter20_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter21_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter22_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter23_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter24_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter25_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter26_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter27_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter28_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter29_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter30_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter31_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter32_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter33_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter34_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter35_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter36_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter37_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter38_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter39_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_loop_init : STD_LOGIC;
    signal regslice_both_input_r_U_apdone_blk : STD_LOGIC;
    signal input_r_TDATA_int_regslice : STD_LOGIC_VECTOR (63 downto 0);
    signal input_r_TVALID_int_regslice : STD_LOGIC;
    signal input_r_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_input_r_U_ack_in : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component fit_mul_34s_34s_68_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (33 downto 0);
        din1 : IN STD_LOGIC_VECTOR (33 downto 0);
        dout : OUT STD_LOGIC_VECTOR (67 downto 0) );
    end component;


    component fit_mul_36s_12s_48_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (35 downto 0);
        din1 : IN STD_LOGIC_VECTOR (11 downto 0);
        dout : OUT STD_LOGIC_VECTOR (47 downto 0) );
    end component;


    component fit_sdiv_34ns_12s_34_38_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (33 downto 0);
        din1 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (33 downto 0) );
    end component;


    component fit_flow_control_loop_pipe IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC;
        ap_continue : IN STD_LOGIC );
    end component;


    component fit_regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    mul_34s_34s_68_1_1_U1 : component fit_mul_34s_34s_68_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 34,
        din1_WIDTH => 34,
        dout_WIDTH => 68)
    port map (
        din0 => mul_ln38_fu_180_p0,
        din1 => mul_ln38_fu_180_p1,
        dout => mul_ln38_fu_180_p2);

    mul_36s_12s_48_1_1_U2 : component fit_mul_36s_12s_48_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 36,
        din1_WIDTH => 12,
        dout_WIDTH => 48)
    port map (
        din0 => mul_ln45_fu_184_p0,
        din1 => obs_x_reg_285_pp0_iter38_reg,
        dout => mul_ln45_fu_184_p2);

    mul_36s_12s_48_1_1_U3 : component fit_mul_36s_12s_48_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 36,
        din1_WIDTH => 12,
        dout_WIDTH => 48)
    port map (
        din0 => mul_ln46_fu_188_p0,
        din1 => obs_y_reg_292_pp0_iter38_reg,
        dout => mul_ln46_fu_188_p2);

    sdiv_34ns_12s_34_38_1_U4 : component fit_sdiv_34ns_12s_34_38_1
    generic map (
        ID => 1,
        NUM_STAGE => 38,
        din0_WIDTH => 34,
        din1_WIDTH => 12,
        dout_WIDTH => 34)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => ap_const_lv34_100000000,
        din1 => obs_sigma_fu_206_p4,
        ce => grp_fu_230_ce,
        dout => grp_fu_230_p2);

    flow_control_loop_pipe_U : component fit_flow_control_loop_pipe
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => real_start,
        ap_ready => internal_ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int,
        ap_continue => ap_continue);

    regslice_both_input_r_U : component fit_regslice_both
    generic map (
        DataWidth => 64)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => input_r_TDATA,
        vld_in => input_r_TVALID,
        ack_in => regslice_both_input_r_U_ack_in,
        data_out => input_r_TDATA_int_regslice,
        vld_out => input_r_TVALID_int_regslice,
        ack_out => input_r_TREADY_int_regslice,
        apdone_blk => regslice_both_input_r_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter39_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter15 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter16 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter17_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter17 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter18_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter18 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter19_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter19 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter20_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter20 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter20 <= ap_enable_reg_pp0_iter19;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter21_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter21 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter21 <= ap_enable_reg_pp0_iter20;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter22_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter22 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter22 <= ap_enable_reg_pp0_iter21;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter23_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter23 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter23 <= ap_enable_reg_pp0_iter22;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter24_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter24 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter24 <= ap_enable_reg_pp0_iter23;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter25_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter25 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter25 <= ap_enable_reg_pp0_iter24;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter26_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter26 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter26 <= ap_enable_reg_pp0_iter25;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter27_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter27 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter27 <= ap_enable_reg_pp0_iter26;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter28_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter28 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter28 <= ap_enable_reg_pp0_iter27;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter29_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter29 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter29 <= ap_enable_reg_pp0_iter28;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter30_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter30 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter30 <= ap_enable_reg_pp0_iter29;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter31_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter31 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter31 <= ap_enable_reg_pp0_iter30;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter32_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter32 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter32 <= ap_enable_reg_pp0_iter31;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter33_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter33 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter33 <= ap_enable_reg_pp0_iter32;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter34_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter34 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter34 <= ap_enable_reg_pp0_iter33;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter35_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter35 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter35 <= ap_enable_reg_pp0_iter34;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter36_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter36 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter36 <= ap_enable_reg_pp0_iter35;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter37_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter37 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter37 <= ap_enable_reg_pp0_iter36;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter38_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter38 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter38 <= ap_enable_reg_pp0_iter37;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter39_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter39 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter39 <= ap_enable_reg_pp0_iter38;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter40_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter40 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter40 <= ap_enable_reg_pp0_iter39;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((real_start = ap_const_logic_1) and (internal_ap_ready = ap_const_logic_0))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
                ap_loop_exit_ready_pp0_iter11_reg <= ap_loop_exit_ready_pp0_iter10_reg;
                ap_loop_exit_ready_pp0_iter12_reg <= ap_loop_exit_ready_pp0_iter11_reg;
                ap_loop_exit_ready_pp0_iter13_reg <= ap_loop_exit_ready_pp0_iter12_reg;
                ap_loop_exit_ready_pp0_iter14_reg <= ap_loop_exit_ready_pp0_iter13_reg;
                ap_loop_exit_ready_pp0_iter15_reg <= ap_loop_exit_ready_pp0_iter14_reg;
                ap_loop_exit_ready_pp0_iter16_reg <= ap_loop_exit_ready_pp0_iter15_reg;
                ap_loop_exit_ready_pp0_iter17_reg <= ap_loop_exit_ready_pp0_iter16_reg;
                ap_loop_exit_ready_pp0_iter18_reg <= ap_loop_exit_ready_pp0_iter17_reg;
                ap_loop_exit_ready_pp0_iter19_reg <= ap_loop_exit_ready_pp0_iter18_reg;
                ap_loop_exit_ready_pp0_iter20_reg <= ap_loop_exit_ready_pp0_iter19_reg;
                ap_loop_exit_ready_pp0_iter21_reg <= ap_loop_exit_ready_pp0_iter20_reg;
                ap_loop_exit_ready_pp0_iter22_reg <= ap_loop_exit_ready_pp0_iter21_reg;
                ap_loop_exit_ready_pp0_iter23_reg <= ap_loop_exit_ready_pp0_iter22_reg;
                ap_loop_exit_ready_pp0_iter24_reg <= ap_loop_exit_ready_pp0_iter23_reg;
                ap_loop_exit_ready_pp0_iter25_reg <= ap_loop_exit_ready_pp0_iter24_reg;
                ap_loop_exit_ready_pp0_iter26_reg <= ap_loop_exit_ready_pp0_iter25_reg;
                ap_loop_exit_ready_pp0_iter27_reg <= ap_loop_exit_ready_pp0_iter26_reg;
                ap_loop_exit_ready_pp0_iter28_reg <= ap_loop_exit_ready_pp0_iter27_reg;
                ap_loop_exit_ready_pp0_iter29_reg <= ap_loop_exit_ready_pp0_iter28_reg;
                ap_loop_exit_ready_pp0_iter30_reg <= ap_loop_exit_ready_pp0_iter29_reg;
                ap_loop_exit_ready_pp0_iter31_reg <= ap_loop_exit_ready_pp0_iter30_reg;
                ap_loop_exit_ready_pp0_iter32_reg <= ap_loop_exit_ready_pp0_iter31_reg;
                ap_loop_exit_ready_pp0_iter33_reg <= ap_loop_exit_ready_pp0_iter32_reg;
                ap_loop_exit_ready_pp0_iter34_reg <= ap_loop_exit_ready_pp0_iter33_reg;
                ap_loop_exit_ready_pp0_iter35_reg <= ap_loop_exit_ready_pp0_iter34_reg;
                ap_loop_exit_ready_pp0_iter36_reg <= ap_loop_exit_ready_pp0_iter35_reg;
                ap_loop_exit_ready_pp0_iter37_reg <= ap_loop_exit_ready_pp0_iter36_reg;
                ap_loop_exit_ready_pp0_iter38_reg <= ap_loop_exit_ready_pp0_iter37_reg;
                ap_loop_exit_ready_pp0_iter39_reg <= ap_loop_exit_ready_pp0_iter38_reg;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
                ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
                ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
                mul_ln45_reg_323 <= mul_ln45_fu_184_p2;
                mul_ln46_reg_328 <= mul_ln46_fu_188_p2;
                obs_last_reg_299_pp0_iter10_reg <= obs_last_reg_299_pp0_iter9_reg;
                obs_last_reg_299_pp0_iter11_reg <= obs_last_reg_299_pp0_iter10_reg;
                obs_last_reg_299_pp0_iter12_reg <= obs_last_reg_299_pp0_iter11_reg;
                obs_last_reg_299_pp0_iter13_reg <= obs_last_reg_299_pp0_iter12_reg;
                obs_last_reg_299_pp0_iter14_reg <= obs_last_reg_299_pp0_iter13_reg;
                obs_last_reg_299_pp0_iter15_reg <= obs_last_reg_299_pp0_iter14_reg;
                obs_last_reg_299_pp0_iter16_reg <= obs_last_reg_299_pp0_iter15_reg;
                obs_last_reg_299_pp0_iter17_reg <= obs_last_reg_299_pp0_iter16_reg;
                obs_last_reg_299_pp0_iter18_reg <= obs_last_reg_299_pp0_iter17_reg;
                obs_last_reg_299_pp0_iter19_reg <= obs_last_reg_299_pp0_iter18_reg;
                obs_last_reg_299_pp0_iter20_reg <= obs_last_reg_299_pp0_iter19_reg;
                obs_last_reg_299_pp0_iter21_reg <= obs_last_reg_299_pp0_iter20_reg;
                obs_last_reg_299_pp0_iter22_reg <= obs_last_reg_299_pp0_iter21_reg;
                obs_last_reg_299_pp0_iter23_reg <= obs_last_reg_299_pp0_iter22_reg;
                obs_last_reg_299_pp0_iter24_reg <= obs_last_reg_299_pp0_iter23_reg;
                obs_last_reg_299_pp0_iter25_reg <= obs_last_reg_299_pp0_iter24_reg;
                obs_last_reg_299_pp0_iter26_reg <= obs_last_reg_299_pp0_iter25_reg;
                obs_last_reg_299_pp0_iter27_reg <= obs_last_reg_299_pp0_iter26_reg;
                obs_last_reg_299_pp0_iter28_reg <= obs_last_reg_299_pp0_iter27_reg;
                obs_last_reg_299_pp0_iter29_reg <= obs_last_reg_299_pp0_iter28_reg;
                obs_last_reg_299_pp0_iter2_reg <= obs_last_reg_299_pp0_iter1_reg;
                obs_last_reg_299_pp0_iter30_reg <= obs_last_reg_299_pp0_iter29_reg;
                obs_last_reg_299_pp0_iter31_reg <= obs_last_reg_299_pp0_iter30_reg;
                obs_last_reg_299_pp0_iter32_reg <= obs_last_reg_299_pp0_iter31_reg;
                obs_last_reg_299_pp0_iter33_reg <= obs_last_reg_299_pp0_iter32_reg;
                obs_last_reg_299_pp0_iter34_reg <= obs_last_reg_299_pp0_iter33_reg;
                obs_last_reg_299_pp0_iter35_reg <= obs_last_reg_299_pp0_iter34_reg;
                obs_last_reg_299_pp0_iter36_reg <= obs_last_reg_299_pp0_iter35_reg;
                obs_last_reg_299_pp0_iter37_reg <= obs_last_reg_299_pp0_iter36_reg;
                obs_last_reg_299_pp0_iter38_reg <= obs_last_reg_299_pp0_iter37_reg;
                obs_last_reg_299_pp0_iter39_reg <= obs_last_reg_299_pp0_iter38_reg;
                obs_last_reg_299_pp0_iter3_reg <= obs_last_reg_299_pp0_iter2_reg;
                obs_last_reg_299_pp0_iter4_reg <= obs_last_reg_299_pp0_iter3_reg;
                obs_last_reg_299_pp0_iter5_reg <= obs_last_reg_299_pp0_iter4_reg;
                obs_last_reg_299_pp0_iter6_reg <= obs_last_reg_299_pp0_iter5_reg;
                obs_last_reg_299_pp0_iter7_reg <= obs_last_reg_299_pp0_iter6_reg;
                obs_last_reg_299_pp0_iter8_reg <= obs_last_reg_299_pp0_iter7_reg;
                obs_last_reg_299_pp0_iter9_reg <= obs_last_reg_299_pp0_iter8_reg;
                obs_x_reg_285_pp0_iter10_reg <= obs_x_reg_285_pp0_iter9_reg;
                obs_x_reg_285_pp0_iter11_reg <= obs_x_reg_285_pp0_iter10_reg;
                obs_x_reg_285_pp0_iter12_reg <= obs_x_reg_285_pp0_iter11_reg;
                obs_x_reg_285_pp0_iter13_reg <= obs_x_reg_285_pp0_iter12_reg;
                obs_x_reg_285_pp0_iter14_reg <= obs_x_reg_285_pp0_iter13_reg;
                obs_x_reg_285_pp0_iter15_reg <= obs_x_reg_285_pp0_iter14_reg;
                obs_x_reg_285_pp0_iter16_reg <= obs_x_reg_285_pp0_iter15_reg;
                obs_x_reg_285_pp0_iter17_reg <= obs_x_reg_285_pp0_iter16_reg;
                obs_x_reg_285_pp0_iter18_reg <= obs_x_reg_285_pp0_iter17_reg;
                obs_x_reg_285_pp0_iter19_reg <= obs_x_reg_285_pp0_iter18_reg;
                obs_x_reg_285_pp0_iter20_reg <= obs_x_reg_285_pp0_iter19_reg;
                obs_x_reg_285_pp0_iter21_reg <= obs_x_reg_285_pp0_iter20_reg;
                obs_x_reg_285_pp0_iter22_reg <= obs_x_reg_285_pp0_iter21_reg;
                obs_x_reg_285_pp0_iter23_reg <= obs_x_reg_285_pp0_iter22_reg;
                obs_x_reg_285_pp0_iter24_reg <= obs_x_reg_285_pp0_iter23_reg;
                obs_x_reg_285_pp0_iter25_reg <= obs_x_reg_285_pp0_iter24_reg;
                obs_x_reg_285_pp0_iter26_reg <= obs_x_reg_285_pp0_iter25_reg;
                obs_x_reg_285_pp0_iter27_reg <= obs_x_reg_285_pp0_iter26_reg;
                obs_x_reg_285_pp0_iter28_reg <= obs_x_reg_285_pp0_iter27_reg;
                obs_x_reg_285_pp0_iter29_reg <= obs_x_reg_285_pp0_iter28_reg;
                obs_x_reg_285_pp0_iter2_reg <= obs_x_reg_285_pp0_iter1_reg;
                obs_x_reg_285_pp0_iter30_reg <= obs_x_reg_285_pp0_iter29_reg;
                obs_x_reg_285_pp0_iter31_reg <= obs_x_reg_285_pp0_iter30_reg;
                obs_x_reg_285_pp0_iter32_reg <= obs_x_reg_285_pp0_iter31_reg;
                obs_x_reg_285_pp0_iter33_reg <= obs_x_reg_285_pp0_iter32_reg;
                obs_x_reg_285_pp0_iter34_reg <= obs_x_reg_285_pp0_iter33_reg;
                obs_x_reg_285_pp0_iter35_reg <= obs_x_reg_285_pp0_iter34_reg;
                obs_x_reg_285_pp0_iter36_reg <= obs_x_reg_285_pp0_iter35_reg;
                obs_x_reg_285_pp0_iter37_reg <= obs_x_reg_285_pp0_iter36_reg;
                obs_x_reg_285_pp0_iter38_reg <= obs_x_reg_285_pp0_iter37_reg;
                obs_x_reg_285_pp0_iter39_reg <= obs_x_reg_285_pp0_iter38_reg;
                obs_x_reg_285_pp0_iter3_reg <= obs_x_reg_285_pp0_iter2_reg;
                obs_x_reg_285_pp0_iter4_reg <= obs_x_reg_285_pp0_iter3_reg;
                obs_x_reg_285_pp0_iter5_reg <= obs_x_reg_285_pp0_iter4_reg;
                obs_x_reg_285_pp0_iter6_reg <= obs_x_reg_285_pp0_iter5_reg;
                obs_x_reg_285_pp0_iter7_reg <= obs_x_reg_285_pp0_iter6_reg;
                obs_x_reg_285_pp0_iter8_reg <= obs_x_reg_285_pp0_iter7_reg;
                obs_x_reg_285_pp0_iter9_reg <= obs_x_reg_285_pp0_iter8_reg;
                obs_y_reg_292_pp0_iter10_reg <= obs_y_reg_292_pp0_iter9_reg;
                obs_y_reg_292_pp0_iter11_reg <= obs_y_reg_292_pp0_iter10_reg;
                obs_y_reg_292_pp0_iter12_reg <= obs_y_reg_292_pp0_iter11_reg;
                obs_y_reg_292_pp0_iter13_reg <= obs_y_reg_292_pp0_iter12_reg;
                obs_y_reg_292_pp0_iter14_reg <= obs_y_reg_292_pp0_iter13_reg;
                obs_y_reg_292_pp0_iter15_reg <= obs_y_reg_292_pp0_iter14_reg;
                obs_y_reg_292_pp0_iter16_reg <= obs_y_reg_292_pp0_iter15_reg;
                obs_y_reg_292_pp0_iter17_reg <= obs_y_reg_292_pp0_iter16_reg;
                obs_y_reg_292_pp0_iter18_reg <= obs_y_reg_292_pp0_iter17_reg;
                obs_y_reg_292_pp0_iter19_reg <= obs_y_reg_292_pp0_iter18_reg;
                obs_y_reg_292_pp0_iter20_reg <= obs_y_reg_292_pp0_iter19_reg;
                obs_y_reg_292_pp0_iter21_reg <= obs_y_reg_292_pp0_iter20_reg;
                obs_y_reg_292_pp0_iter22_reg <= obs_y_reg_292_pp0_iter21_reg;
                obs_y_reg_292_pp0_iter23_reg <= obs_y_reg_292_pp0_iter22_reg;
                obs_y_reg_292_pp0_iter24_reg <= obs_y_reg_292_pp0_iter23_reg;
                obs_y_reg_292_pp0_iter25_reg <= obs_y_reg_292_pp0_iter24_reg;
                obs_y_reg_292_pp0_iter26_reg <= obs_y_reg_292_pp0_iter25_reg;
                obs_y_reg_292_pp0_iter27_reg <= obs_y_reg_292_pp0_iter26_reg;
                obs_y_reg_292_pp0_iter28_reg <= obs_y_reg_292_pp0_iter27_reg;
                obs_y_reg_292_pp0_iter29_reg <= obs_y_reg_292_pp0_iter28_reg;
                obs_y_reg_292_pp0_iter2_reg <= obs_y_reg_292_pp0_iter1_reg;
                obs_y_reg_292_pp0_iter30_reg <= obs_y_reg_292_pp0_iter29_reg;
                obs_y_reg_292_pp0_iter31_reg <= obs_y_reg_292_pp0_iter30_reg;
                obs_y_reg_292_pp0_iter32_reg <= obs_y_reg_292_pp0_iter31_reg;
                obs_y_reg_292_pp0_iter33_reg <= obs_y_reg_292_pp0_iter32_reg;
                obs_y_reg_292_pp0_iter34_reg <= obs_y_reg_292_pp0_iter33_reg;
                obs_y_reg_292_pp0_iter35_reg <= obs_y_reg_292_pp0_iter34_reg;
                obs_y_reg_292_pp0_iter36_reg <= obs_y_reg_292_pp0_iter35_reg;
                obs_y_reg_292_pp0_iter37_reg <= obs_y_reg_292_pp0_iter36_reg;
                obs_y_reg_292_pp0_iter38_reg <= obs_y_reg_292_pp0_iter37_reg;
                obs_y_reg_292_pp0_iter39_reg <= obs_y_reg_292_pp0_iter38_reg;
                obs_y_reg_292_pp0_iter3_reg <= obs_y_reg_292_pp0_iter2_reg;
                obs_y_reg_292_pp0_iter4_reg <= obs_y_reg_292_pp0_iter3_reg;
                obs_y_reg_292_pp0_iter5_reg <= obs_y_reg_292_pp0_iter4_reg;
                obs_y_reg_292_pp0_iter6_reg <= obs_y_reg_292_pp0_iter5_reg;
                obs_y_reg_292_pp0_iter7_reg <= obs_y_reg_292_pp0_iter6_reg;
                obs_y_reg_292_pp0_iter8_reg <= obs_y_reg_292_pp0_iter7_reg;
                obs_y_reg_292_pp0_iter9_reg <= obs_y_reg_292_pp0_iter8_reg;
                sigmaInv_reg_311 <= grp_fu_230_p2;
                sigmaInv_reg_311_pp0_iter38_reg <= sigmaInv_reg_311;
                sigmaInv_reg_311_pp0_iter39_reg <= sigmaInv_reg_311_pp0_iter38_reg;
                sigmaSquaredInv_reg_317 <= mul_ln38_fu_180_p2(67 downto 32);
                sigmaSquaredInv_reg_317_pp0_iter39_reg <= sigmaSquaredInv_reg_317;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                obs_last_reg_299_pp0_iter1_reg <= obs_last_reg_299;
                obs_x_reg_285_pp0_iter1_reg <= obs_x_reg_285;
                obs_y_reg_292_pp0_iter1_reg <= obs_y_reg_292;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_nbreadreq_fu_82_p3 = ap_const_lv1_1))) then
                obs_last_reg_299 <= input_r_TDATA_int_regslice(49 downto 48);
                obs_x_reg_285 <= obs_x_fu_192_p1;
                obs_y_reg_292 <= input_r_TDATA_int_regslice(27 downto 16);
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter40, tmp_nbreadreq_fu_82_p3, ap_done_reg, x1_full_n, x2_full_n, y1_full_n, y2_full_n, sigmaDiv1_full_n, sigmaSquaredDiv1_full_n, last1_full_n, last2_full_n, last3_full_n, partialS_full_n, partialSx_full_n, partialSy_full_n, ap_start_int, input_r_TVALID_int_regslice)
    begin
                ap_block_pp0_stage0_01001 <= ((ap_done_reg = ap_const_logic_1) or ((ap_enable_reg_pp0_iter40 = ap_const_logic_1) and ((partialSy_full_n = ap_const_logic_0) or (partialSx_full_n = ap_const_logic_0) or (partialS_full_n = ap_const_logic_0) or (last3_full_n = ap_const_logic_0) or (last2_full_n = ap_const_logic_0) or (last1_full_n = ap_const_logic_0) or (sigmaSquaredDiv1_full_n = ap_const_logic_0) or (sigmaDiv1_full_n = ap_const_logic_0) or (y2_full_n = ap_const_logic_0) or (y1_full_n = ap_const_logic_0) or (x2_full_n = ap_const_logic_0) or (x1_full_n = ap_const_logic_0))) or ((ap_start_int = ap_const_logic_1) and ((ap_done_reg = ap_const_logic_1) or ((input_r_TVALID_int_regslice = ap_const_logic_0) and (tmp_nbreadreq_fu_82_p3 = ap_const_lv1_1)))));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter40, tmp_nbreadreq_fu_82_p3, ap_done_reg, x1_full_n, x2_full_n, y1_full_n, y2_full_n, sigmaDiv1_full_n, sigmaSquaredDiv1_full_n, last1_full_n, last2_full_n, last3_full_n, partialS_full_n, partialSx_full_n, partialSy_full_n, ap_start_int, input_r_TVALID_int_regslice)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_done_reg = ap_const_logic_1) or ((ap_enable_reg_pp0_iter40 = ap_const_logic_1) and ((partialSy_full_n = ap_const_logic_0) or (partialSx_full_n = ap_const_logic_0) or (partialS_full_n = ap_const_logic_0) or (last3_full_n = ap_const_logic_0) or (last2_full_n = ap_const_logic_0) or (last1_full_n = ap_const_logic_0) or (sigmaSquaredDiv1_full_n = ap_const_logic_0) or (sigmaDiv1_full_n = ap_const_logic_0) or (y2_full_n = ap_const_logic_0) or (y1_full_n = ap_const_logic_0) or (x2_full_n = ap_const_logic_0) or (x1_full_n = ap_const_logic_0))) or ((ap_start_int = ap_const_logic_1) and ((ap_done_reg = ap_const_logic_1) or ((input_r_TVALID_int_regslice = ap_const_logic_0) and (tmp_nbreadreq_fu_82_p3 = ap_const_lv1_1)))));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter40, tmp_nbreadreq_fu_82_p3, ap_done_reg, x1_full_n, x2_full_n, y1_full_n, y2_full_n, sigmaDiv1_full_n, sigmaSquaredDiv1_full_n, last1_full_n, last2_full_n, last3_full_n, partialS_full_n, partialSx_full_n, partialSy_full_n, ap_start_int, input_r_TVALID_int_regslice)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_done_reg = ap_const_logic_1) or ((ap_enable_reg_pp0_iter40 = ap_const_logic_1) and ((partialSy_full_n = ap_const_logic_0) or (partialSx_full_n = ap_const_logic_0) or (partialS_full_n = ap_const_logic_0) or (last3_full_n = ap_const_logic_0) or (last2_full_n = ap_const_logic_0) or (last1_full_n = ap_const_logic_0) or (sigmaSquaredDiv1_full_n = ap_const_logic_0) or (sigmaDiv1_full_n = ap_const_logic_0) or (y2_full_n = ap_const_logic_0) or (y1_full_n = ap_const_logic_0) or (x2_full_n = ap_const_logic_0) or (x1_full_n = ap_const_logic_0))) or ((ap_start_int = ap_const_logic_1) and ((ap_done_reg = ap_const_logic_1) or ((input_r_TVALID_int_regslice = ap_const_logic_0) and (tmp_nbreadreq_fu_82_p3 = ap_const_lv1_1)))));
    end process;

        ap_block_state10_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage0_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage0_iter15 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage0_iter16 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage0_iter17 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage0_iter18 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state1_pp0_stage0_iter0_assign_proc : process(tmp_nbreadreq_fu_82_p3, ap_done_reg, input_r_TVALID_int_regslice)
    begin
                ap_block_state1_pp0_stage0_iter0 <= ((ap_done_reg = ap_const_logic_1) or ((input_r_TVALID_int_regslice = ap_const_logic_0) and (tmp_nbreadreq_fu_82_p3 = ap_const_lv1_1)));
    end process;

        ap_block_state20_pp0_stage0_iter19 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp0_stage0_iter20 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp0_stage0_iter21 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp0_stage0_iter22 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state24_pp0_stage0_iter23 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state25_pp0_stage0_iter24 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state26_pp0_stage0_iter25 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state27_pp0_stage0_iter26 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state28_pp0_stage0_iter27 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state29_pp0_stage0_iter28 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state30_pp0_stage0_iter29 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state31_pp0_stage0_iter30 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state32_pp0_stage0_iter31 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state33_pp0_stage0_iter32 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state34_pp0_stage0_iter33 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state35_pp0_stage0_iter34 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state36_pp0_stage0_iter35 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state37_pp0_stage0_iter36 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state38_pp0_stage0_iter37 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state39_pp0_stage0_iter38 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state40_pp0_stage0_iter39 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state41_pp0_stage0_iter40_assign_proc : process(x1_full_n, x2_full_n, y1_full_n, y2_full_n, sigmaDiv1_full_n, sigmaSquaredDiv1_full_n, last1_full_n, last2_full_n, last3_full_n, partialS_full_n, partialSx_full_n, partialSy_full_n)
    begin
                ap_block_state41_pp0_stage0_iter40 <= ((partialSy_full_n = ap_const_logic_0) or (partialSx_full_n = ap_const_logic_0) or (partialS_full_n = ap_const_logic_0) or (last3_full_n = ap_const_logic_0) or (last2_full_n = ap_const_logic_0) or (last1_full_n = ap_const_logic_0) or (sigmaSquaredDiv1_full_n = ap_const_logic_0) or (sigmaDiv1_full_n = ap_const_logic_0) or (y2_full_n = ap_const_logic_0) or (y1_full_n = ap_const_logic_0) or (x2_full_n = ap_const_logic_0) or (x1_full_n = ap_const_logic_0));
    end process;

        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, tmp_nbreadreq_fu_82_p3, ap_block_pp0_stage0_subdone, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_nbreadreq_fu_82_p3 = ap_const_lv1_0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_done_reg, ap_block_pp0_stage0_subdone, ap_loop_exit_ready_pp0_iter39_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter39_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_idle_pp0 = ap_const_logic_1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter17, ap_enable_reg_pp0_iter18, ap_enable_reg_pp0_iter19, ap_enable_reg_pp0_iter20, ap_enable_reg_pp0_iter21, ap_enable_reg_pp0_iter22, ap_enable_reg_pp0_iter23, ap_enable_reg_pp0_iter24, ap_enable_reg_pp0_iter25, ap_enable_reg_pp0_iter26, ap_enable_reg_pp0_iter27, ap_enable_reg_pp0_iter28, ap_enable_reg_pp0_iter29, ap_enable_reg_pp0_iter30, ap_enable_reg_pp0_iter31, ap_enable_reg_pp0_iter32, ap_enable_reg_pp0_iter33, ap_enable_reg_pp0_iter34, ap_enable_reg_pp0_iter35, ap_enable_reg_pp0_iter36, ap_enable_reg_pp0_iter37, ap_enable_reg_pp0_iter38, ap_enable_reg_pp0_iter39, ap_enable_reg_pp0_iter40)
    begin
        if (((ap_enable_reg_pp0_iter24 = ap_const_logic_0) and (ap_enable_reg_pp0_iter23 = ap_const_logic_0) and (ap_enable_reg_pp0_iter22 = ap_const_logic_0) and (ap_enable_reg_pp0_iter21 = ap_const_logic_0) and (ap_enable_reg_pp0_iter20 = ap_const_logic_0) and (ap_enable_reg_pp0_iter19 = ap_const_logic_0) and (ap_enable_reg_pp0_iter18 = ap_const_logic_0) and (ap_enable_reg_pp0_iter17 = ap_const_logic_0) and (ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) 
    and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter40 = ap_const_logic_0) and (ap_enable_reg_pp0_iter39 = ap_const_logic_0) and (ap_enable_reg_pp0_iter38 = ap_const_logic_0) and (ap_enable_reg_pp0_iter37 = ap_const_logic_0) and (ap_enable_reg_pp0_iter36 = ap_const_logic_0) and (ap_enable_reg_pp0_iter35 = ap_const_logic_0) and (ap_enable_reg_pp0_iter34 = ap_const_logic_0) and (ap_enable_reg_pp0_iter33 = ap_const_logic_0) and (ap_enable_reg_pp0_iter32 = ap_const_logic_0) and (ap_enable_reg_pp0_iter31 = ap_const_logic_0) and (ap_enable_reg_pp0_iter30 = ap_const_logic_0) and (ap_enable_reg_pp0_iter29 = ap_const_logic_0) and (ap_enable_reg_pp0_iter28 = ap_const_logic_0) and (ap_enable_reg_pp0_iter27 = ap_const_logic_0) and (ap_enable_reg_pp0_iter26 = ap_const_logic_0) and (ap_enable_reg_pp0_iter25 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;
    ap_ready <= internal_ap_ready;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_230_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_230_ce <= ap_const_logic_1;
        else 
            grp_fu_230_ce <= ap_const_logic_0;
        end if; 
    end process;


    input_r_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, tmp_nbreadreq_fu_82_p3, ap_done_reg, ap_block_pp0_stage0, ap_start_int, input_r_TVALID_int_regslice)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_done_reg = ap_const_logic_0) and (tmp_nbreadreq_fu_82_p3 = ap_const_lv1_1))) then 
            input_r_TDATA_blk_n <= input_r_TVALID_int_regslice;
        else 
            input_r_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    input_r_TREADY <= regslice_both_input_r_U_ack_in;

    input_r_TREADY_int_regslice_assign_proc : process(ap_CS_fsm_pp0_stage0, tmp_nbreadreq_fu_82_p3, ap_block_pp0_stage0_11001, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_nbreadreq_fu_82_p3 = ap_const_lv1_1))) then 
            input_r_TREADY_int_regslice <= ap_const_logic_1;
        else 
            input_r_TREADY_int_regslice <= ap_const_logic_0;
        end if; 
    end process;


    last1_blk_n_assign_proc : process(ap_enable_reg_pp0_iter40, last1_full_n, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter40 = ap_const_logic_1))) then 
            last1_blk_n <= last1_full_n;
        else 
            last1_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    last1_din <= obs_last_reg_299_pp0_iter39_reg;

    last1_write_assign_proc : process(ap_enable_reg_pp0_iter40, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter40 = ap_const_logic_1))) then 
            last1_write <= ap_const_logic_1;
        else 
            last1_write <= ap_const_logic_0;
        end if; 
    end process;


    last2_blk_n_assign_proc : process(ap_enable_reg_pp0_iter40, last2_full_n, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter40 = ap_const_logic_1))) then 
            last2_blk_n <= last2_full_n;
        else 
            last2_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    last2_din <= obs_last_reg_299_pp0_iter39_reg;

    last2_write_assign_proc : process(ap_enable_reg_pp0_iter40, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter40 = ap_const_logic_1))) then 
            last2_write <= ap_const_logic_1;
        else 
            last2_write <= ap_const_logic_0;
        end if; 
    end process;


    last3_blk_n_assign_proc : process(ap_enable_reg_pp0_iter40, last3_full_n, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter40 = ap_const_logic_1))) then 
            last3_blk_n <= last3_full_n;
        else 
            last3_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    last3_din <= obs_last_reg_299_pp0_iter39_reg;

    last3_write_assign_proc : process(ap_enable_reg_pp0_iter40, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter40 = ap_const_logic_1))) then 
            last3_write <= ap_const_logic_1;
        else 
            last3_write <= ap_const_logic_0;
        end if; 
    end process;

    mul_ln38_fu_180_p0 <= sext_ln38_fu_236_p1(34 - 1 downto 0);
    mul_ln38_fu_180_p1 <= sext_ln38_fu_236_p1(34 - 1 downto 0);
    mul_ln45_fu_184_p0 <= sext_ln38_2_fu_251_p1(36 - 1 downto 0);
    mul_ln46_fu_188_p0 <= sext_ln38_2_fu_251_p1(36 - 1 downto 0);
    obs_sigma_fu_206_p4 <= input_r_TDATA_int_regslice(43 downto 32);
    obs_x_fu_192_p1 <= input_r_TDATA_int_regslice(12 - 1 downto 0);

    partialS_blk_n_assign_proc : process(ap_enable_reg_pp0_iter40, partialS_full_n, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter40 = ap_const_logic_1))) then 
            partialS_blk_n <= partialS_full_n;
        else 
            partialS_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    partialS_din <= sext_ln38_1_fu_268_p1;

    partialS_write_assign_proc : process(ap_enable_reg_pp0_iter40, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter40 = ap_const_logic_1))) then 
            partialS_write <= ap_const_logic_1;
        else 
            partialS_write <= ap_const_logic_0;
        end if; 
    end process;


    partialSx_blk_n_assign_proc : process(ap_enable_reg_pp0_iter40, partialSx_full_n, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter40 = ap_const_logic_1))) then 
            partialSx_blk_n <= partialSx_full_n;
        else 
            partialSx_blk_n <= ap_const_logic_1;
        end if; 
    end process;

        partialSx_din <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_ln45_reg_323),64));


    partialSx_write_assign_proc : process(ap_enable_reg_pp0_iter40, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter40 = ap_const_logic_1))) then 
            partialSx_write <= ap_const_logic_1;
        else 
            partialSx_write <= ap_const_logic_0;
        end if; 
    end process;


    partialSy_blk_n_assign_proc : process(ap_enable_reg_pp0_iter40, partialSy_full_n, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter40 = ap_const_logic_1))) then 
            partialSy_blk_n <= partialSy_full_n;
        else 
            partialSy_blk_n <= ap_const_logic_1;
        end if; 
    end process;

        partialSy_din <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_ln46_reg_328),64));


    partialSy_write_assign_proc : process(ap_enable_reg_pp0_iter40, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter40 = ap_const_logic_1))) then 
            partialSy_write <= ap_const_logic_1;
        else 
            partialSy_write <= ap_const_logic_0;
        end if; 
    end process;


    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_full_n = ap_const_logic_0) and (start_once_reg = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

        sext_ln38_1_fu_268_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sigmaSquaredInv_reg_317_pp0_iter39_reg),64));

        sext_ln38_2_fu_251_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sigmaSquaredInv_reg_317),48));

        sext_ln38_fu_236_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sigmaInv_reg_311),68));


    sigmaDiv1_blk_n_assign_proc : process(ap_enable_reg_pp0_iter40, sigmaDiv1_full_n, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter40 = ap_const_logic_1))) then 
            sigmaDiv1_blk_n <= sigmaDiv1_full_n;
        else 
            sigmaDiv1_blk_n <= ap_const_logic_1;
        end if; 
    end process;

        sigmaDiv1_din <= std_logic_vector(IEEE.numeric_std.resize(signed(sigmaInv_reg_311_pp0_iter39_reg),64));


    sigmaDiv1_write_assign_proc : process(ap_enable_reg_pp0_iter40, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter40 = ap_const_logic_1))) then 
            sigmaDiv1_write <= ap_const_logic_1;
        else 
            sigmaDiv1_write <= ap_const_logic_0;
        end if; 
    end process;


    sigmaSquaredDiv1_blk_n_assign_proc : process(ap_enable_reg_pp0_iter40, sigmaSquaredDiv1_full_n, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter40 = ap_const_logic_1))) then 
            sigmaSquaredDiv1_blk_n <= sigmaSquaredDiv1_full_n;
        else 
            sigmaSquaredDiv1_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    sigmaSquaredDiv1_din <= sext_ln38_1_fu_268_p1;

    sigmaSquaredDiv1_write_assign_proc : process(ap_enable_reg_pp0_iter40, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter40 = ap_const_logic_1))) then 
            sigmaSquaredDiv1_write <= ap_const_logic_1;
        else 
            sigmaSquaredDiv1_write <= ap_const_logic_0;
        end if; 
    end process;

    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((real_start = ap_const_logic_1) and (start_once_reg = ap_const_logic_0))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

    tmp_nbreadreq_fu_82_p3 <= (0=>(input_r_TVALID_int_regslice), others=>'-');

    x1_blk_n_assign_proc : process(ap_enable_reg_pp0_iter40, x1_full_n, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter40 = ap_const_logic_1))) then 
            x1_blk_n <= x1_full_n;
        else 
            x1_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    x1_din <= obs_x_reg_285_pp0_iter39_reg;

    x1_write_assign_proc : process(ap_enable_reg_pp0_iter40, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter40 = ap_const_logic_1))) then 
            x1_write <= ap_const_logic_1;
        else 
            x1_write <= ap_const_logic_0;
        end if; 
    end process;


    x2_blk_n_assign_proc : process(ap_enable_reg_pp0_iter40, x2_full_n, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter40 = ap_const_logic_1))) then 
            x2_blk_n <= x2_full_n;
        else 
            x2_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    x2_din <= obs_x_reg_285_pp0_iter39_reg;

    x2_write_assign_proc : process(ap_enable_reg_pp0_iter40, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter40 = ap_const_logic_1))) then 
            x2_write <= ap_const_logic_1;
        else 
            x2_write <= ap_const_logic_0;
        end if; 
    end process;


    y1_blk_n_assign_proc : process(ap_enable_reg_pp0_iter40, y1_full_n, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter40 = ap_const_logic_1))) then 
            y1_blk_n <= y1_full_n;
        else 
            y1_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    y1_din <= obs_y_reg_292_pp0_iter39_reg;

    y1_write_assign_proc : process(ap_enable_reg_pp0_iter40, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter40 = ap_const_logic_1))) then 
            y1_write <= ap_const_logic_1;
        else 
            y1_write <= ap_const_logic_0;
        end if; 
    end process;


    y2_blk_n_assign_proc : process(ap_enable_reg_pp0_iter40, y2_full_n, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter40 = ap_const_logic_1))) then 
            y2_blk_n <= y2_full_n;
        else 
            y2_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    y2_din <= obs_y_reg_292_pp0_iter39_reg;

    y2_write_assign_proc : process(ap_enable_reg_pp0_iter40, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter40 = ap_const_logic_1))) then 
            y2_write <= ap_const_logic_1;
        else 
            y2_write <= ap_const_logic_0;
        end if; 
    end process;

end behav;
